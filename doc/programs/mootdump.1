.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MOOTDUMP 1"
.TH MOOTDUMP 1 "2017-04-24" "moot v2.0.17-pre1" "moot PoS Tagger"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
mootdump \- moocow's HMM part\-of\-speech tagger/disambiguator: model dumper.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
mootdump [\s-1OPTIONS\s0] \s-1MODEL\s0
.PP
.Vb 2
\& Arguments:
\&    MODEL  Input model.
\&
\& Options
\&    \-h       \-\-help              Print help and exit.
\&    \-V       \-\-version           Print version and exit.
\&    \-cFILE   \-\-rcfile=FILE       Read an alternate configuration file.
\&    \-vLEVEL  \-\-verbose=LEVEL     Verbosity level.
\&    \-B       \-\-no\-banner         Suppress initial banner message (implied at verbosity levels <= 2)
\&    \-gBOOL   \-\-hash\-ngrams=BOOL  Whether to hash stored n\-grams (default=yes)
\&    \-k       \-\-const             Enable dump of scalar model constants
\&    \-l       \-\-lex               Enable lexical probability dump
\&    \-C       \-\-class             Enable lexical\-class probability dump
\&    \-s       \-\-suffix            Enable suffix\-trie dump
\&    \-n       \-\-ngrams            Enable tag n\-gram probability dump
\&    \-oFILE   \-\-output=FILE       Specify output file (default=stdout).
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
moocow's \s-1HMM\s0 part-of-speech tagger/disambiguator: model dumper.
.PP
\&'mootdump' creates text-dumps of compile \s-1HMM\s0 models for debugging.
.PP
See mootfiles for details on moot model file formats.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.ie n .IP """MODEL""" 4
.el .IP "\f(CWMODEL\fR" 4
.IX Item "MODEL"
Input model.
.Sp
\&\s-1MODEL\s0 may be either a binary or a text model.
.Sp
For details on moot file formats, see mootfiles.
.SH "OPTIONS"
.IX Header "OPTIONS"
.ie n .IP """\-\-help"" , ""\-h""" 4
.el .IP "\f(CW\-\-help\fR , \f(CW\-h\fR" 4
.IX Item "--help , -h"
Print help and exit.
.Sp
Default: '0'
.ie n .IP """\-\-version"" , ""\-V""" 4
.el .IP "\f(CW\-\-version\fR , \f(CW\-V\fR" 4
.IX Item "--version , -V"
Print version and exit.
.Sp
Default: '0'
.ie n .IP """\-\-rcfile=FILE"" , ""\-cFILE""" 4
.el .IP "\f(CW\-\-rcfile=FILE\fR , \f(CW\-cFILE\fR" 4
.IX Item "--rcfile=FILE , -cFILE"
Read an alternate configuration file.
.Sp
Default: '\s-1NULL\s0'
.Sp
See also: \*(L"\s-1CONFIGURATION FILES\*(R"\s0.
.ie n .IP """\-\-verbose=LEVEL"" , ""\-vLEVEL""" 4
.el .IP "\f(CW\-\-verbose=LEVEL\fR , \f(CW\-vLEVEL\fR" 4
.IX Item "--verbose=LEVEL , -vLEVEL"
Verbosity level.
.Sp
Default: '3'
.Sp
Be more or less verbose.  Recognized values are in the range 0..6:
.RS 4
.IP "0 (silent)" 4
.IX Item "0 (silent)"
Disable all diagnostic messages.
.IP "1 (errors)" 4
.IX Item "1 (errors)"
Print error messages to stderr.
.IP "2 (warnings)" 4
.IX Item "2 (warnings)"
Print warnings to stderr.
.IP "3 (info)" 4
.IX Item "3 (info)"
Print general diagnostic information to stderr.
.IP "4 (progress)" 4
.IX Item "4 (progress)"
Print progress information to stderr.
.IP "5 (debug)" 4
.IX Item "5 (debug)"
Print debugging information to stderr (if applicable).
.IP "6 (trace)" 4
.IX Item "6 (trace)"
Print execution trace information to stderr (if applicable).
.RE
.RS 4
.RE
.ie n .IP """\-\-no\-banner"" , ""\-B""" 4
.el .IP "\f(CW\-\-no\-banner\fR , \f(CW\-B\fR" 4
.IX Item "--no-banner , -B"
Suppress initial banner message (implied at verbosity levels <= 2)
.Sp
Default: '0'
.ie n .IP """\-\-hash\-ngrams=BOOL"" , ""\-gBOOL""" 4
.el .IP "\f(CW\-\-hash\-ngrams=BOOL\fR , \f(CW\-gBOOL\fR" 4
.IX Item "--hash-ngrams=BOOL , -gBOOL"
Whether to hash stored n\-grams (default=yes)
.Sp
Default: '1'
.Sp
If specified and true, tag n\-grams will be stored in a slow but memory-friendly
hash.  Otherwise, a fast but large array will be used (only useful for implicit compilation).
.ie n .IP """\-\-const"" , ""\-k""" 4
.el .IP "\f(CW\-\-const\fR , \f(CW\-k\fR" 4
.IX Item "--const , -k"
Enable dump of scalar model constants
.Sp
Default: '0'
.Sp
If none of the \-\-(const|lex|class|suffix|ngrams) options are specified, a full dump is
produced (as if all of the above options had been specified).  If any of these
options \fBare\fR specified, only the model properties indicated by the specified
flag(s) are dumped.
.ie n .IP """\-\-lex"" , ""\-l""" 4
.el .IP "\f(CW\-\-lex\fR , \f(CW\-l\fR" 4
.IX Item "--lex , -l"
Enable lexical probability dump
.Sp
Default: '0'
.Sp
See \*(L"\-\-const , \-k\*(R"
.ie n .IP """\-\-class"" , ""\-C""" 4
.el .IP "\f(CW\-\-class\fR , \f(CW\-C\fR" 4
.IX Item "--class , -C"
Enable lexical-class probability dump
.Sp
Default: '0'
.Sp
See \*(L"\-\-const , \-k\*(R"
.ie n .IP """\-\-suffix"" , ""\-s""" 4
.el .IP "\f(CW\-\-suffix\fR , \f(CW\-s\fR" 4
.IX Item "--suffix , -s"
Enable suffix-trie dump
.Sp
Default: '0'
.Sp
See \*(L"\-\-const , \-k\*(R"
.ie n .IP """\-\-ngrams"" , ""\-n""" 4
.el .IP "\f(CW\-\-ngrams\fR , \f(CW\-n\fR" 4
.IX Item "--ngrams , -n"
Enable tag n\-gram probability dump
.Sp
Default: '0'
.Sp
See \*(L"\-\-const , \-k\*(R"
.ie n .IP """\-\-output=FILE"" , ""\-oFILE""" 4
.el .IP "\f(CW\-\-output=FILE\fR , \f(CW\-oFILE\fR" 4
.IX Item "--output=FILE , -oFILE"
Specify output file (default=stdout).
.Sp
Default: '\-'
.Sp
Text dump will be written to \s-1FILE.\s0
.SH "CONFIGURATION FILES"
.IX Header "CONFIGURATION FILES"
Configuration files are expected to contain lines of the form:
.PP
.Vb 1
\&    LONG_OPTION_NAME    OPTION_VALUE
.Ve
.PP
where \s-1LONG_OPTION_NAME\s0 is the long name of some option,
without the leading '\-\-', and \s-1OPTION_VALUE\s0 is the value for
that option, if any.  Fields are whitespace-separated.
Blank lines and comments (lines beginning with '#')
are ignored.
.PP
The following configuration files are read by default:
.IP "\(bu" 4
/etc/mootdumprc
.IP "\(bu" 4
~/.mootdumprc
.SH "ADDENDA"
.IX Header "ADDENDA"
.SS "About this Document"
.IX Subsection "About this Document"
Documentation file auto-generated by optgen.perl version 0.07
using Getopt::Gen version 0.14.
Translation was initiated
as:
.PP
.Vb 1
\&   optgen.perl \-l \-\-nocfile \-\-nohfile \-\-notimestamp \-F mootdump mootdump.gog
.Ve
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
None known.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Initial development of the this was supported by the project
\&'Kollokationen im Wo\*:rterbuch'
( \*(L"collocations in the dictionary\*(R", http://www.bbaw.de/forschung/kollokationen )
in association with the project
\&'Digitales Wo\*:rterbuch der deutschen Sprache des 20. Jahrhunderts (\s-1DWDS\s0)'
( \*(L"digital dictionary of the German language of the 20th century\*(R", http://www.dwds.de )
at the Berlin-Brandenburgische Akademie der Wissenschaften ( http://www.bbaw.de )
with funding from
the Alexander von Humboldt Stiftung ( http://www.avh.de )
and from the Zukunftsinvestitionsprogramm of the
German federal government.
Development of the DynHMM and \s-1WASTE\s0 extensions was
supported by the DFG-funded projects
\&'Deutsches Textarchiv' ( \*(L"German text archive\*(R", http://www.deutschestextarchiv.de )
and '\s-1DLEX\s0'
at the Berlin-Brandenburgische Akademie der Wissenschaften.
.PP
The authors are grateful to Christiane Fellbaum, Alexander Geyken,
Gerald Neumann, Edmund Pohl, Alexey Sokirko, and others
for offering useful insights in the course of development
of this package.
Thomas Hanneforth wrote and maintains the libFSM \*(C+ library
for finite-state device operations used by the
class-based \s-1HMM\s0 tagger / disambiguator, without which
moot could not have been built.
Alexander Geyken and Thomas Hanneforth developed the
rule-based morphological analysis system for German
which was used in the development and testing of the
class-based \s-1HMM\s0 tagger / disambiguator.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bryan Jurish <moocow@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
mootfiles,
mootrain,
mootcompile,
moot
