#include <dwdsScanner.h>

int dwds::Scanner::scan ( )
{
std:
	m_token = m_cursor;
    /*!re2c
        re2c:define:YYCTYPE = "unsigned char";
        re2c:define:YYCURSOR = m_cursor;
        re2c:define:YYMARKER = m_marker;
        re2c:define:YYLIMIT = m_limit;
        re2c:define:YYFILL:naked = 1;
        re2c:define:YYFILL@len = #;
        re2c:define:YYFILL = "if (!fill(#)) { return 0; }";
        re2c:yyfill:enable = 1;
        re2c:indent:top = 8;
        re2c:indent:string="	";
    */

    //-- Unicode character classes (auto-generated)
    /*!re2c
%%UCL%%
    */

	*/

	//-- Numbers
	/*!re2c
	DIGIT		      = [0-9];
	ROMAN                 = [IXVLMDC]+;
	NUMBER                = (DIGIT | No | Nd | Nl)+;
	*/

	//-- Special characters, punctuation
	/*!re2c 
	QUOTE_L                = ([`\"])|([\xE2][\x80][\x98\x9A\x9B\x9C\x9E\x9F]);
	QUOTE_R                = (['\"])|([\xE2][\x80][\x99\x9D]);
	QUOTE_G1               = ([\xC2][\xAB])|([\xE2][\x80][\xB9]);
	QUOTE_G2               = ([\xC2][\xBB])|([\xE2][\x80][\xBA]);
	QUOTE_G                = QUOTE_G1|QUOTE_G2;
        QUOTE                  = QUOTE_L|QUOTE_R|QUOTE_G;
        EOS                    = ([?!]|([\xE2][\x80][\xA6]))+;
        SC                     = Pc|Pd|Pe|Pf|Pi|Po|Ps|Sc|Sk|Sm|So|EOS|([\xC2][\xB5])|QUOTE|Lm;
	HYPH1                   = [-];
	HYPH2                   = ([\xC2][\xAC])|([\xC2][\xAD])|([\xE2][\xB8][\x97]);
	HYPH                    = HYPH1|HYPH2;
	*/

	//-- Additional helpers
	/*!re2c
        WS                     = [ \r\n\t\f];
        SEP                    = [^ \r\n\t\f,;\.:?!\"\'`()%$/\[\]{}];
        ANY_CHARACTER          = Any;
	*/

	//-- Combine alphabet and modifiers
	/*!re2c
	Greek_Mn_DTA           = ([\xCD][\x97])|([\xCC][\x80-\xBF]);
	Latin_Mn_DTA           = ([\xCD][\xA4])|([\xCC][\x80-\xBF]);
	Latin_Mn               = Latin_Mn_DTA;
	LATIN                  = Latin | (Latin Mn) | (Latin Lm);
	*/

	//-- Conjunctions
	/*!re2c
	CON_WORD                = "und"|"oder"|"sowie";
        CON_PUNCT               = [/,];
        CON_ABBR                = [uo][\.];
        CON                     = CON_WORD|CON_PUNCT|CON_ABBR;
        */

	//-- LINKS
	/*!re2c
        IPv6                    = ((([0-9A-Fa-f]{1,4}":"){7}([0-9A-Fa-f]{1,4}|":"))|(([0-9A-Fa-f]{1,4}":"){6}(":"[0-9A-Fa-f]{1,4}|(([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])([\.]([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])){3})|":"))|(([0-9A-Fa-f]{1,4}":"){5}(((":"[0-9A-Fa-f]{1,4}){1,2})|":"(([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])([\.]([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])){3})|":"))|(([0-9A-Fa-f]{1,4}":"){4}(((":"[0-9A-Fa-f]{1,4}){1,3})|((":"[0-9A-Fa-f]{1,4})?":"(([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])([\.]([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])){3}))|":"))|(([0-9A-Fa-f]{1,4}":"){3}(((":"[0-9A-Fa-f]{1,4}){1,4})|((":"[0-9A-Fa-f]{1,4}){0,2}":"(([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])([\.]([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])){3}))|":"))|(([0-9A-Fa-f]{1,4}":"){2}(((":"[0-9A-Fa-f]{1,4}){1,5})|((":"[0-9A-Fa-f]{1,4}){0,3}":"(([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])([\.]([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])){3}))|":"))|(([0-9A-Fa-f]{1,4}":"){1}(((":"[0-9A-Fa-f]{1,4}){1,6})|((":"[0-9A-Fa-f]{1,4}){0,4}":"(([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])([\.]([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])){3}))|":"))|(":"(((":"[0-9A-Fa-f]{1,4}){1,7})|((":"[0-9A-Fa-f]{1,4}){0,5}":"(([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])([\.]([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9])){3}))|":")))([%][.]+)?;
        IPv4                    = ((([0]?[1-9]|"00")?[0-9]|"1"[0-9][0-9]|"2"[0-4][0-9]|"25"[0-5])"."){3}(([0]?[1-9]|"00")?[0-9]|"1"[0-9][0-9]|"2"[0-4][0-9]|"25"[0-5]);
        IP                      = IPv4|IPv6;


        MAILPART                = ([A-z0-9]|[\._\-])+;
        
        URI1a                   = (MAILPART "@")?([a-z] MAILPART ":" ("/"{1,3}|[a-z0-9%]));
        URI1b                   = ([^ \n\t\r\(\)<>]+|"("([^ \t\n\r\(\)<>]+|("("[^ \n\t\r\(\)<>]+")"))*")")*;
        URI1c                   = ("("([^ \t\n\r\(\)<>]+|("("[^ \n\t\r\(\)<>]+")"))*")"|[^ \n\t\r`!\(\)\[\]{};:'\"\.,<>?«»“”‘’]);

        URI2a                   = (MAILPART "@")?[a-z0-9\.\-]+[\.][a-z]{2,6};
        URI2b                   = ([^ \t\n\r\(\)<>]*[^ \n\t\r`!\(\)\[\]{};:'\"\.,<>?«»“”‘’]|"("([^ \t\n\r\(\)<>]+|("("[^ \n\t\r\(\)<>]+")"))*")")*;
        
        URI1                    = URI1a URI1b URI1c;
        URI2                    = URI2a URI2b;

        LINK                    = ([A-z]+"://")?([A-z0-9]+[\.])+[A-z0-9]{2,6}[/A-z0-9?:~\.]*;
        LINK2                   = IP|URI1|URI2;
	*/

	//-- XML
	/*!re2c
	XML                     = "<"[/]?[a-zA-Z?][^<>\n]*">";
	*/

	//"$SB$" (WS* "$SB$")*     { m_offset += length (); return TOKEN_SB; }
    /*!re2c

	"%%"[^%\n]+"%%"          { m_offset += length (); goto std; }

	"$WB$"                   { m_offset += length (); return TOKEN_WB; }
	"$SB$"                   { m_offset += length (); return TOKEN_SB; }

	XML                      { m_offset += length (); return TOKEN_XML; }

        LINK2                    { m_offset += length (); return TOKEN_REST; }

	ROMAN                    { m_offset += length (); return TOKEN_ROMAN_NUM; }
        LATIN+	                 { m_offset += length (); return LATIN_LOWER; }

        Greek+                   { m_offset += length (); return TOKEN_GREEK; }

	NUMBER                   { m_offset += length (); return TOKEN_NUM; }

	HYPH                     { m_offset += length (); return TOKEN_HYPH; }
	SC                       { m_offset += length (); return TOKEN_SC; }

	WS*[\n]WS*               { m_offset += length (); return TOKEN_NL; }

        WS+                      { m_offset += length (); return TOKEN_SPACE; }

	Lo|Lt                    { m_offset += length (); return TOKEN_REST; }

        ANY_CHARACTER            { m_offset += length (); return TOKEN_REST; }

    */
}
