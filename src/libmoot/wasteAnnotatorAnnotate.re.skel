#include "wasteAnnotator.h"

/*-- moo: useful shortcuts for re2c actions --*/
#define annot0(a)		token.insert(a,"[" a "]")
#define annot1(a1) 		annot0(a1); return
#define annot2(a1,a2)		annot0(a1); annot0(a2); return
#define annot3(a1,a2,a3)	annot0(a1); annot0(a2); annot0(a3); return
#define annot4(a1,a2,a3,a4)	annot0(a1); annot0(a2); annot0(a3); annot0(a4); return

namespace moot {

  void wasteAnnotator::annotate_token(mootToken& token)
  {
    const unsigned char *sp  = (const unsigned char*)token.tok_text.c_str();
    const unsigned char *m   = sp;

    /*!re2c
      re2c:define:YYCTYPE = "unsigned char";
      re2c:define:YYCURSOR = sp;
      re2c:define:YYMARKER = m;
      re2c:yyfill:enable   = 0;
      re2c:indent:top = 6;
      re2c:indent:string = "  ";
    */

    //-- Auto-generated property rules go here
    /*!re2c
      %%UCL%%
    */

    //-- Manual definitions
    /*!re2c
	QUOTE_L                 = ([`\"])|([`][`])|([\xE2][\x80][\x98\x9A\x9B\x9C\x9E\x9F]);
	QUOTE_R                 = (['\"])|([\'][\'])|([\xE2][\x80][\x99\x9D]);
	QUOTE_G1                = ([\xC2][\xAB])|([\xE2][\x80][\xB9]);
	QUOTE_G2                = ([\xC2][\xBB])|([\xE2][\x80][\xBA]);
	QUOTE_G                 = QUOTE_G1|QUOTE_G2;
        QUOTE                   = QUOTE_L|QUOTE_R|QUOTE_G;
	HYPHEN			= "-" | "¬" | "­" | "⸗" | "–" | "—" ;
        PUNCT                   = Pc|Pd|Pe|Pf|Pi|Po|Ps|Sk|Sm|So|QUOTE|HYPHEN;
	BYTE			= [\x01-\xFF];
    */

    /*!re2c

      "."                             [\000]     { annot1("$."); }
      [\.:]+                          [\000]     { annot2("$.","$("); }
      [?!]+                           [\000]     { annot1("$."); }
      [,]                             [\000]     { annot1("$,"); }
      [;]                             [\000]     { annot1("$."); }

      [%]                             [\000]     { annot3("NN","$(","$PERCENT"); }
      "§"                             [\000]     { annot3("NN","$(","$PARAGRAPH"); /*-- use double quotes and not [] in pattern for non-ascii symbols! --*/ }
      Sc                              [\000]     { annot3("NN","$(","$CURRENCY"); }
      PUNCT                           [\000]     { annot1("$("); }

      [+-]?[0-9]+([\. :,_][0-9]+)*    [\000]     { annot1("CARD"); }
      [+-]?[0-9]+([\. :,_][0-9]+)*"." [\000]     { annot2("ADJA","$ORD"); }
      [IXVLMDCixvlmdc]+"."	      [\000]	 { annot3("ADJA","$ABBREV","$ORD"); }
      BYTE+ "."                       [\000]     { annot2("XY","$ABBREV"); }

      HYPHEN BYTE                                { annot1("TRUNC"); }
      BYTE* HYPHEN                    [\000]     { annot1("TRUNC"); }

      ("www.")|[a-zA-Z]+("@"|":/")               { annot4("NN","NE","XY","$LINK"); }


      [^]             { return; }

    */
  }

#undef annot0
#undef annot1
#undef annot2
#undef annot3
#undef annot4

} // namespace moot
