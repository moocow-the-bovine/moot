/* -*- Mode: C++ -*-; coding: utf-8; c-basic-offset: 2; */
#include "wasteScanner.h"
#include "wasteTypes.h"

int moot::wasteScanner::yylex ( )
{
	yytoken = yycursor;
    /*!re2c
        re2c:define:YYCTYPE = "unsigned char";
        re2c:define:YYCURSOR = yycursor;
        re2c:define:YYMARKER = yymarker;
        re2c:define:YYLIMIT = yylimit;
        re2c:define:YYFILL:naked = 1;
        re2c:define:YYFILL@len = #;
        re2c:define:YYFILL = "if (!fill(#)) { return wScanTypeEOF; }";
        re2c:yyfill:enable = 1;
        re2c:indent:top = 8;
        re2c:indent:string="	";
    */

    //-- Unicode character classes (auto-generated)
    /*!re2c
%%UCL%%
    */


	//-- Numbers
	/*!re2c
	DIGIT		      = [0-9];
	ROMAN                 = [IXVLMDC]+;
	NUMBER                = (DIGIT | No | Nd | Nl)+;
	*/

	//-- Special characters, punctuation
	/*!re2c 
	QUOTE_L                = ([`\"])|([\xE2][\x80][\x98\x9A\x9B\x9C\x9E\x9F]);
	QUOTE_R                = (['\"])|([\xE2][\x80][\x99\x9D]);
	QUOTE_G1               = ([\xC2][\xAB])|([\xE2][\x80][\xB9]);
	QUOTE_G2               = ([\xC2][\xBB])|([\xE2][\x80][\xBA]);
	QUOTE_G                = QUOTE_G1|QUOTE_G2;
        QUOTE                  = QUOTE_L|QUOTE_R|QUOTE_G;
        EOS                    = ([?!]|([\xE2][\x80][\xA6]))+;
        SC                     = Pc|Pd|Pe|Pf|Pi|Po|Ps|Sc|Sk|Sm|So|EOS|([\xC2][\xB5])|QUOTE|Lm;
	HYPH1                   = [-];
	HYPH2                   = ([\xC2][\xAC])|([\xC2][\xAD])|([\xE2][\xB8][\x97]);
	HYPH                    = HYPH1|HYPH2;
	*/

	//-- Additional helpers
	/*!re2c
        WS                     = [ \r\n\t\f];
        ANY_CHARACTER          = Any;
	*/

	//-- Combine alphabet and modifiers
	/*!re2c
	LATIN                  = Latin (Lm|Mn)*;
	ALPHA                  = (Lu | Ll | Lt | Lo) ( Lm | Mn )*;
	*/

	//-- LINKS / URIs; cf http://tools.ietf.org/html/rfc3986
	/*!re2c
	XDIGIT			= [0-9A-Fa-f];
	DBYTE                   = ([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9]);

        IPv6                    = (((XDIGIT{1,4}":"){7}(XDIGIT{1,4}|":"))|((XDIGIT{1,4}":"){6}(":"XDIGIT{1,4}|(DBYTE([\.]DBYTE){3})|":"))|((XDIGIT{1,4}":"){5}(((":"XDIGIT{1,4}){1,2})|":"(DBYTE([\.]DBYTE){3})|":"))|((XDIGIT{1,4}":"){4}(((":"XDIGIT{1,4}){1,3})|((":"XDIGIT{1,4})?":"(DBYTE([\.]DBYTE){3}))|":"))|((XDIGIT{1,4}":"){3}(((":"XDIGIT{1,4}){1,4})|((":"XDIGIT{1,4}){0,2}":"(DBYTE([\.]DBYTE){3}))|":"))|((XDIGIT{1,4}":"){2}(((":"XDIGIT{1,4}){1,5})|((":"XDIGIT{1,4}){0,3}":"(DBYTE([\.]DBYTE){3}))|":"))|((XDIGIT{1,4}":"){1}(((":"XDIGIT{1,4}){1,6})|((":"XDIGIT{1,4}){0,4}":"(DBYTE([\.]DBYTE){3}))|":"))|(":"(((":"XDIGIT{1,4}){1,7})|((":"XDIGIT{1,4}){0,5}":"(DBYTE([\.]DBYTE){3}))|":")))([%][.]+)?;
        IPv4                    = ((([0]?[1-9]|"00")?[0-9]|"1"[0-9][0-9]|"2"[0-4][0-9]|"25"[0-5])"."){3}(([0]?[1-9]|"00")?[0-9]|"1"[0-9][0-9]|"2"[0-4][0-9]|"25"[0-5]);
        IP                      = IPv4|IPv6;

	URI_ESCAPE 		= "%" XDIGIT{2} ;

	URI_GEN_DELIMS		= [:/?#\[\]@] ;
	URI_SUB_DELIMS		= [!&'\(\)\*\+,;=\$] ;
	URI_RESERVED		= URI_GEN_DELIMS | URI_SUB_DELIMS ;
	URI_FREE		= [A-Za-z0-9\.\_\-~] ;
	URI_SUBFREE		= URI_FREE | URI_ESCAPE | URI_SUB_DELIMS ;

	URI_SCHEME		= [A-Za-z][A-Za-z0-9\+\-\.]* ;

	URI_IP_FUTURE		= "v" (XDIGIT)+ "." ( URI_FREE | URI_SUB_DELIMS | ":" )+ ;
	URI_IP_LITERAL		= "[" (IPv6 | URI_IP_FUTURE) "]" ;
	URI_HOSTNAME            = ( URI_SUBFREE )+ ;
	URI_PORT		= [0-9]* ;
	URI_HOST        	= URI_IP_LITERAL | IPv4 | URI_HOSTNAME ;
	URI_USERINFO		= ( URI_SUBFREE | ":" )* ;
	URI_AUTHORITY           = (URI_USERINFO "@")? URI_HOST (":" URI_PORT)? ;

	URI_PATH_CHAR__rfc3986	= ( URI_SUBFREE | [:@] );
	URI_PATH_CHAR__link	= ( URI_SUBFREE | [:@%<>{}\[\]`|] );
	URI_PATH_CHAR		= URI_PATH_CHAR__link ;

	URI_SEGMENT		= URI_PATH_CHAR* ;
	URI_SEGMENT_NZ		= URI_PATH_CHAR+ ;
	URI_SEGMENT_NZ_NC	= ( URI_SUBFREE | [@] )+ ;

	URI_PATH_ABEMPTY	= ("/" URI_SEGMENT)* ;
	URI_PATH_ABSOLUTE	= "/" (URI_SEGMENT_NZ ("/" URI_SEGMENT)*)? ;
	URI_PATH_NOSCHEME	= URI_SEGMENT_NZ_NC ( "/" URI_SEGMENT )* ;
	URI_PATH_ROOTLESS       = URI_SEGMENT_NZ ( "/" URI_SEGMENT )* ;
	URI_PATH_EMPTY		= "" ;

	URI_PATH__rfc3986	= URI_PATH_ABEMPTY | URI_PATH_ABSOLUTE | URI_PATH_NOSCHEME | URI_PATH_ROOTLESS | URI_PATH_EMPTY ;
	URI_PATH__link		= URI_PATH_ABEMPTY | URI_PATH_ABSOLUTE ;
	URI_PATH		= URI_PATH__link ;

	URI_QUERY		= ( URI_PATH_CHAR | [/?] )* ;
	URI_FRAGMENT		= ( URI_PATH_CHAR | [/?] )* ;

	URI			=  URI_SCHEME ":" "//" URI_AUTHORITY URI_PATH ("?" URI_QUERY)?  ("#" URI_FRAGMENT)? ;
	*/

        //-- old link rules (pre-2013-11-18; ultimate target: LINK2) -- ought to work again with NUL sentinel
        /*!re2c
        MAILPART                = [A-Za-z0-9\._\-]+;
        URI1a                   = (MAILPART "@")?([a-z] MAILPART ":" ("/"{1,3}|[a-z0-9%]));
        URI1b                   = ([^ \x00\n\t\r\(\)<>]+|"("([^ \x00\t\n\r\(\)<>]+|("("[^ \x00\n\t\r\(\)<>]+")"))*")")*;
        URI1c                   = ("("([^ \x00\t\n\r\(\)<>]+|("("[^ \x00\n\t\r\(\)<>]+")"))*")"|[^ \x00\n\t\r`!\(\)\[\]{};:'\"\.,<>?«»“”‘’]);

        URI2a                   = (MAILPART "@")?[a-z0-9\.\-]+[\.][a-zA-z]{2,6};
        URI2b                   = ([^ \x00\t\n\r\(\)<>]*[^ \x00\n\t\r`!\(\)\[\]{};:'\"\.,<>?«»“”‘’]|"("([^ \x00\t\n\r\(\)<>]+|("("[^ \x00\n\t\r\(\)<>]+")"))*")")*;
        
        URI1                    = URI1a URI1b URI1c;
        URI2                    = URI2a URI2b;

        LINK1                   = ([A-Za-z]+"://")?([A-Za-z0-9]+[\.])+[A-Za-z0-9]{2,6}[/A-Za-z0-9?:~\.]*;
        LINK2                   = IP|URI1|URI2;
	 */

	//-- XML
	/*NOT_re2c
	XML                     = "<"[/]?[a-zA-Z_\.?][^<>\n]*">";
	*/

	//-- links
	/*NOT_re2c
        LINK2                    { add_columns( yyleng() ); return wScanTypeLink; }
	*/

	/*!re2c
	[\x00]     		 { return wScanTypeEOF; /*-- EOF simulation with NUL-byte --*/}
	"%%"[^%\n]+"%%"          { add_columns( yyleng() ); return wScanTypeComment; }

	"$WB$"                   { add_columns( yyleng() ); return wScanTypeWB; }
	"$SB$"                   { add_columns( yyleng() ); return wScanTypeSB; }

	URI                      { add_columns( yyleng() ); return wScanTypeLink; }

	ROMAN                    { add_columns( yyleng() ); return wScanTypeRoman; }

        LATIN+	                 { add_columns( yyleng() ); return wScanTypeLatin; }
        Greek+                   { add_columns( yyleng() ); return wScanTypeGreek; }

	NUMBER                   { add_columns( yyleng() ); return wScanTypeNumber; }
	HYPH                     { add_columns( yyleng() ); return wScanTypeHyphen; }
	SC                       { add_columns( yyleng() ); return wScanTypePunct; }

	WS*[\n]WS*               { add_columns( yyleng() ); return wScanTypeNewline; }
        WS+                      { add_columns( yyleng() ); return wScanTypeSpace; }

	ALPHA+                   { add_columns( yyleng() ); return wScanTypeAlpha; }

        ANY_CHARACTER            { add_columns( yyleng() ); return wScanTypeOther; }
	*/
}
