# -*- Mode: Shell-Script -*-
# Getopt::Gen specification for 'waste'
#-----------------------------------------------------------------------------
program "waste"
#program_version "0.01"

purpose	"Low-level rule-based codec for moot/WASTE HMM tokenizer."
author  "Bryan Jurish <moocow@cpan.org> and Kay-Michael WÃ¼rzner <wuerzner@bbaw.de>"
on_reparse "warn"

#-----------------------------------------------------------------------------
# Details
#-----------------------------------------------------------------------------
details "
waste is the top-level command-line interface to the moot/WASTE HMM tokenizer system.
It can be used as a complete tokenization pipeline (--full, the default),
as a standalone scanner (--scan), lexical encoder (--lex), HMM disambiguator (--tag) or lexical decoder (--decode),
or as (almost) any combination  of the above components.
Input and output formats depend on the chosen mode of operation; in the default mode,
it takes as input one or more 'raw' files, and produces a 'medium' output file whose 'best-tag' fields
are strings of space-separated segment attribute bundles (i.e. probably not interesting unless you are
trying to debug a WASTE tokenizer model).
See L<mootfiles> for details on moot file formats.
"

#-----------------------------------------------------------------------------
# Arguments
#-----------------------------------------------------------------------------
argument "FILE(s)" "Input files" \
    details="See also the --list option."

#-----------------------------------------------------------------------------
# Options
#-----------------------------------------------------------------------------
#group "Basic Options"

int "verbose" v "Verbosity level." \
    arg="LEVEL" \
    default="3" \
    details=`cat verbose.pod`

flag "no-banner" B "Suppress initial banner message (implied at verbosity levels <= 2)" \
  default="0"

flag "list" l "Arguments are input-file lists." \
    default="0" \
    details="
If this flag is given, the FILE(s) arguments should be lists
of input filenames, one filename per line, which should be
processed.  Otherwise, the FILE(s) arguments are interpreted
as filenames of the input files themselves.
"

flag  "recover"   r  "Attempt to recover from minor errors." \
    details="
Minor errors such as missing files, etc. cause an error message to be
emitted but do not cause the program to abort if this option is specified.
Useful for large automated batch-processing jobs.
"

string	"output" o "Write output to FILE." \
    arg="FILE" \
    default="-" \
    details="
Output files are in 'rare' format: one token per line, a blank line
indicates a sentence boundary.
"

#-----------------------------------------------------------------------------
# scan/lex/decode
group "Mode Options"

#-------------------------------------------------------
flag "full"       f  "Alias for --scan --lex --tag --decode (default)" \
    code="'args_info->full_flag = args_info->scan_flag = args_info->lex_flag = args_info->tag_flag = args_info->decode_flag = 1;'"

#-------------------------------------------------------
flag "scan"	  s  "Enable raw text scanning stage." \
    code="'args_info->scan_flag=1;'"
flag "no-scan"	  S  "Disable raw text scanning stage." \
    code="'args_info->scan_flag=0;'"

#-------------------------------------------------------
flag "lex"	  x  "Enable lexical classification stage." \
    code="'args_info->lex_flag=1;'" \
    details="
If lexer stage is enabled, you should also specify --abbrevs, --conjunctions, and/or --stopwords
as appropriate for your HMM.
"
flag "no-lex"	  X  "Disable lexical classification stage." \
    code="'args_info->lex_flag=0;'"


#-------------------------------------------------------
flag "tag"        t   "Enable HMM Viterbi tagging stage." \
    code="'args_info->tag_flag=1;'" \
    details="
Requires --model option.
"
flag "no-tag"     T   "Disable HMM Viterbi tagging stage." \
    code="'args_info->tag_flag=0;'"

#-------------------------------------------------------
flag "decode"	  d  "Enable post-Viterbi decoding stage." \
    code="'args_info->decode_flag=1;'"
flag "no-decode"  D  "Disable post-Viterbi decoding stage." \
    code="'args_info->decode_flag=0;'"


#-----------------------------------------------------------------------------
# lexer options
group "Lexer-Only Options"

string "abbrevs" a  "Load abbreviation lexicon from FILE (1 word/line)" \
    arg="FILE" \
    details="
Only meaningful if --lex is enabled.
"

string "conjunctions" j  "Load conjunction lexicon from FILE (1 word/line)" \
    arg="FILE" \
    details="
Only meaningful if --lex is enabled.
"

string "stopwords" w  "Load stopword lexicon from FILE (1 word/line)" \
    arg="FILE" \
    details="
Only meaningful if --lex is enabled.
"

flag "dehyphenate" y  "Enable automatic dehyphenation in lexer (default)" \
    default="1" \
    code="args_info->dehyphenate_flag=1;'" \
    details="
Only meaningful if --lex is enabled.
"
flag "no-dehyphenate" Y  "Disable automatic dehyphenation in lexer" \
    code="args_info->dehyphenate_flag=0;'" \
    details="
Only meaningful if --lex is enabled.
"

#-----------------------------------------------------------------------------
# HMM options
group "HMM Options"

string "model" M "Use HMM tokenizer model MODEL." \
  arg="MODEL" \
  default="waste.hmm" \
  details="
See 'HMM MODEL FILE FORMATS' in L<mootfiles> for details on model file formats.
This option is intended to be used with a pre-compiled binary model.  If you
need to set addtitional runtime options, you should call C<moot> directly
in a pipeline, e.g.

  waste --scan -Or,loc INFILE.txt \\
  | waste --lex -aabbr.lex -jconj.lex -wstop.lex -Ir,loc -Omr,loc - \\
  | moot  --stream --model=MODEL --beam-width=100 -Imr,loc -Owd,loc - \\
  | waste --decode -Iwd,loc -Om,loc -o OUTFILE.wd

"

#-----------------------------------------------------------------------------
# I/O
group "Format Options"

string "input-format" I "Specify input file format for -no-scan mode" \
  arg="FORMAT" \
  details="
Value should be a comma-separated list of format flag names,
optionally prefixed with an exclamation point (!) to indicate
negation.  Only meaningful if the scanner stage has been
disabled with the -no-scan (-S) option.

Default='Text,Location'

See 'I/O Format Flags' in L<mootfiles> for details.
"

string "output-format" O "Specify output file format." \
  arg="FORMAT" \
  details="
Value should be a comma-separated list of format flag names,
optionally prefixed with an exclamation point (!) to indicate
negation.

Default='MediumRare,Location'

See 'I/O Format Flags' in L<mootfiles> for details.
"

#-----------------------------------------------------------------------------
# Addenda
#-----------------------------------------------------------------------------
addenda "

=head2 Caveats

When writing in XML format, you should first ensure that your input data
is properly encoded in UTF-8.

"

#-----------------------------------------------------------------------------
# Footer
#-----------------------------------------------------------------------------
acknowledge `cat acknowledge.pod`

seealso "
moot(1),
mootrain(1),
mootcompile(1),
L<mootfiles>,
L<moot>,
L<mootchurn>
"
