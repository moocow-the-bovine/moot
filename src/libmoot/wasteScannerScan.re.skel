/* -*- Mode: C++ -*-; coding: utf-8; c-basic-offset: 2; */
#include "wasteScanner.h"
#include "wasteTypes.h"

int moot::wasteScanner::yylex ( )
{
	yytoken = yycursor;
    /*!re2c
        re2c:define:YYCTYPE = "unsigned char";
        re2c:define:YYCURSOR = yycursor;
        re2c:define:YYMARKER = yymarker;
        re2c:define:YYLIMIT = yylimit;
        re2c:define:YYFILL:naked = 1;
        re2c:define:YYFILL@len = #;
        re2c:define:YYFILL = "if (!fill(#)) { return wScanTypeEOF; }";
        re2c:yyfill:enable = 1;
        re2c:indent:top = 8;
        re2c:indent:string="	";
    */

    //-- Unicode character classes (auto-generated)
    /*!re2c
%%UCL%%
    */


	//-- Numbers
	/*!re2c
	DIGIT		      = [0-9];
	ROMAN                 = [IXVLMDC]+;
	NUMBER                = (DIGIT | No | Nd | Nl)+;
	*/

	//-- Special characters, punctuation
	/*!re2c 
	QUOTE_L                = ([`\"])|([\xE2][\x80][\x98\x9A\x9B\x9C\x9E\x9F]);
	QUOTE_R                = (['\"])|([\xE2][\x80][\x99\x9D]);
	QUOTE_G1               = ([\xC2][\xAB])|([\xE2][\x80][\xB9]);
	QUOTE_G2               = ([\xC2][\xBB])|([\xE2][\x80][\xBA]);
	QUOTE_G                = QUOTE_G1|QUOTE_G2;
        QUOTE                  = QUOTE_L|QUOTE_R|QUOTE_G;
        EOS                    = ([?!]|([\xE2][\x80][\xA6]))+;
        SC                     = Pc|Pd|Pe|Pf|Pi|Po|Ps|Sc|Sk|Sm|So|EOS|([\xC2][\xB5])|QUOTE|Lm;
	HYPH1                   = [-];
	HYPH2                   = ([\xC2][\xAC])|([\xC2][\xAD])|([\xE2][\xB8][\x97]);
	HYPH                    = HYPH1|HYPH2;
	*/

	//-- UTF-8Catch-all
	/*!re2c
	UTF8_ASCII		= [\x01-\x7F];
	UTF8_REST		= [\x80-\xBF];
	UTF8_L2			= [\xC0-\xDF] UTF8_REST;
	UTF8_L3			= [\xE0-\xEF] UTF8_REST{2};
	UTF8_L4			= [\xF0-\xF7] UTF8_REST{3};
	UTF8_L5			= [\xF8-\xFB] UTF8_REST{4};
	UTF8_L6			= [\xFC-\xFD] UTF8_REST{5};
	NON_UTF8_BYTE		= [\x01-\xFF];
	 */

	//-- Additional helpers
	/*!re2c
        WS_ASCII               = [ \r\n\t\f] ;
	WS_EXTRA	       = ([\xC2][\xA0]) ;
	WS		       = WS_ASCII | WS_EXTRA ;
        ANY_CHARACTER          = UTF8_ASCII | UTF8_L2 | UTF8_L3 | UTF8_L4 | UTF8_L5 | UTF8_L6 | NON_UTF8_BYTE ;
	*/


	//-- Combine alphabet and modifiers
	/*!re2c
	LATIN                  = Latin (Lm|Mn)*;
	ALPHA                  = (Lu | Ll | Lt | Lo) ( Lm | Mn )*;
	*/

	//-- LINKS / URIs; cf http://tools.ietf.org/html/rfc3986
	/*!re2c
	XDIGIT			= [0-9A-Fa-f];
	DBYTE                   = ([2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[1-9]?[0-9]);

        IPv6                    = (((XDIGIT{1,4}":"){7}(XDIGIT{1,4}|":"))|((XDIGIT{1,4}":"){6}(":"XDIGIT{1,4}|(DBYTE([\.]DBYTE){3})|":"))|((XDIGIT{1,4}":"){5}(((":"XDIGIT{1,4}){1,2})|":"(DBYTE([\.]DBYTE){3})|":"))|((XDIGIT{1,4}":"){4}(((":"XDIGIT{1,4}){1,3})|((":"XDIGIT{1,4})?":"(DBYTE([\.]DBYTE){3}))|":"))|((XDIGIT{1,4}":"){3}(((":"XDIGIT{1,4}){1,4})|((":"XDIGIT{1,4}){0,2}":"(DBYTE([\.]DBYTE){3}))|":"))|((XDIGIT{1,4}":"){2}(((":"XDIGIT{1,4}){1,5})|((":"XDIGIT{1,4}){0,3}":"(DBYTE([\.]DBYTE){3}))|":"))|((XDIGIT{1,4}":"){1}(((":"XDIGIT{1,4}){1,6})|((":"XDIGIT{1,4}){0,4}":"(DBYTE([\.]DBYTE){3}))|":"))|(":"(((":"XDIGIT{1,4}){1,7})|((":"XDIGIT{1,4}){0,5}":"(DBYTE([\.]DBYTE){3}))|":")))([%][.]+)?;

        IPv4                    = ((([0]?[1-9]|"00")?[0-9]|"1"[0-9][0-9]|"2"[0-4][0-9]|"25"[0-5])"."){3}(([0]?[1-9]|"00")?[0-9]|"1"[0-9][0-9]|"2"[0-4][0-9]|"25"[0-5]);

	URI_IP_FUTURE		= "v" (XDIGIT)+ "." [A-Za-z0-9_\-\.~!&'\(\)\*\+,;=\$:]+ ;
	URI_IP_LITERAL		= "[" (IPv6 | URI_IP_FUTURE) "]" ;

        IP                      = IPv4 | IPv6 | URI_IP_LITERAL;
	*/

/*!re2c
	URI_ESCAPE 		= "%" XDIGIT{2} ;

	URI_GEN_DELIMS		= [:/?#\[\]@] ;
	URI_SUB_DELIMS		= [!&'\(\)\*\+,;=\$] ;
	URI_RESERVED		= URI_GEN_DELIMS | URI_SUB_DELIMS ;
	URI_FREE		= [A-Za-z0-9_\-\.~] ;
	URI_SUBFREE		= [A-Za-z0-9_\-\.~!&'\(\)\*\+,;=\$%] ;
	URI_USERCHAR		= [A-Za-z0-9_\-\.~!&'\(\)\*\+,;=\$%:] ;
	URI_HOSTCHAR__ext	= [A-Za-z0-9_\-\.~!&'\(\)\*\+,;=\$%@:]  ;
	URI_HOSTCHAR		= [A-Za-z0-9_\-~!&'\(\)\*\+,;=\$%@]  ;
	URI_PATHCHAR__rfc3986	= ( URI_SUBFREE | [:@] );
	URI_PATHCHAR		= [A-Za-z0-9_\-\.~!&'\(\)\*\+,;=\$%:@<>{}\[\]`];
	URI_PATHCHAR__ext	= [A-Za-z0-9_\-\.~!&'\(\)\*\+,;=\$%:@<>{}\[\]`/];
	URI_QUERYCHAR		= [A-Za-z0-9_\-\.~!&'\(\)\*\+,;=\$%:@<>{}\[\]`/?];
	URI_FRAGMENTCHAR	= [A-Za-z0-9_\-\.~!&'\(\)\*\+,;=\$%:@<>{}\[\]`/?#];
	URI_FINALCHAR		= URI_FRAGMENTCHAR \ [\.\,\:\;\!\?%];

	URI_SCHEME		= [A-Za-z][A-Za-z0-9\+\-\.]* ;

	URI_HOSTNAME            = ( URI_SUBFREE )+ ;
	URI_PORT		= [0-9]* ;
	URI_HOST_ADDR		= URI_IP_LITERAL | IPv4;
	URI_HOST        	= URI_HOST_ADDR | URI_HOSTNAME       ;
	URI_USERINFO		= URI_USERCHAR* ;
	URI_USERINFO__nz	= URI_USERCHAR+ ;
	URI_AUTHORITY           = (URI_USERINFO "@")? URI_HOST (":" URI_PORT)? ;

	URI_SEGMENT		= URI_PATHCHAR* ;
	URI_PATH_NONEMPTY	= URI_PATHCHAR__ext+ ;
	URI_PATH 		= ("/" URI_SEGMENT)* ;

	URI_QUERY		= URI_QUERYCHAR* ;
	URI_FRAGMENT		= URI_FRAGMENTCHAR* ;

	URI__rfc3986	        = URI_SCHEME "://" URI_AUTHORITY URI_PATH ("?" URI_QUERY)? ("#" URI_FRAGMENT)? ;
	URI__schemed	        = URI_SCHEME ":" "/"{1,3}    URI_FRAGMENTCHAR+ URI_FINALCHAR ;
	URI__link_user		= URI_USERINFO__nz "@"       URI_FRAGMENTCHAR+ URI_FINALCHAR ;
				  
	LINK			= URI__schemed | URI__link_user ;
	*/

/*!re2c
        CMTCHAR_SAFE		= [^%\r\n\x00];
        CMTCHAR                 = CMTCHAR_SAFE | ("%" CMTCHAR_SAFE);
*/

	//-- XML (DISABLED)
	/*NOT_re2c
	XML                     = "<"[/]?[a-zA-Z_\.?][^<>\n]*">";

	"%%"[^%\r\n\x00]*"%%"    { add_columns( yyleng() ); return wScanTypeComment; }
	*/

	/*!re2c
	[\x00]     		 { return wScanTypeEOF; /*-- EOF simulation with NUL-byte --*/}
	"%%" CMTCHAR* "%%"       { add_columns( yyleng() ); return wScanTypeComment; }
	"$WB$"                   { add_columns( yyleng() ); return wScanTypeWB; }
	"$SB$"                   { add_columns( yyleng() ); return wScanTypeSB; }

	LINK			 { add_columns( yyleng() ); return wScanTypeLink; }

	ROMAN                    { add_columns( yyleng() ); return wScanTypeRoman; }

        LATIN+	                 { add_columns( yyleng() ); return wScanTypeLatin; }
        Greek+                   { add_columns( yyleng() ); return wScanTypeGreek; }

	NUMBER                   { add_columns( yyleng() ); return wScanTypeNumber; }
	HYPH                     { add_columns( yyleng() ); return wScanTypeHyphen; }
	SC                       { add_columns( yyleng() ); return wScanTypePunct; }

	WS*[\n]WS*               { add_columns( yyleng() ); return wScanTypeNewline; }
        WS+                      { add_columns( yyleng() ); return wScanTypeSpace; }

	ALPHA+                   { add_columns( yyleng() ); return wScanTypeAlpha; }

        ANY_CHARACTER            { add_columns( yyleng() ); return wScanTypeOther; }
	*/
}
