#ifndef FLEX_HEADER_mootPPLexer_h
#define FLEX_HEADER_mootPPLexer_h
#define YY_mootPPLexer_CHAR unsigned char
#line 1 "/usr/local/share/flex++bison++/flexskel.h"
/* A lexical scanner header generated by flex */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */


/*********************************************/
/* SYSTEM dependent declaration, includes... */
/*********************************************/
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
#ifdef __cplusplus
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#else	/* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#else
#endif	/* __GNUC__ */
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#endif	/* __STDC__ */
#endif	/* ! __cplusplus */
/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif
#include <stdio.h>




/* % here is the declaration from section1 %header{  */ 
#line 34 "mootPPLexer.ll"
/*============================================================================
 * Doxygen docs
 *============================================================================*/
/*!
 * \class mootPPLexer
 * \brief Flex++ lexer for 'dwdspp' raw-text preprocessor:
 * Does rudimentary end-of-sentence and abbreviation recognition,
 * and filters out XML markup.
 */

//#include <string>
#include <mootTypes.h>
#line 53 "mootPPLexer.ll"
#define YY_mootPPLexer_CLASS  mootPPLexer
#line 54 "mootPPLexer.ll"
#define YY_mootPPLexer_MEMBERS  \
  public: \
  /* -- public typedefs */\
  /** typedef for token-types */\
  typedef enum { \
    PPEOF, \
    UNKNOWN, \
    EOS, \
    START_XML_TAG, \
    END_XML_TAG, \
    WORD, \
    ABBREV, \
    HYPHWORD, \
    INTEGER, \
    FLOAT, \
    PUNCT, \
    DATE \
  } TokenType; \
  \
  public: \
    /* -- public local data */ \
    /** enable verbose reporting (track ntokens)?  */\
    bool verbose; \
    /** number of tokens processed (for verbose mode) */\
    unsigned int ntokens; \
    /** output sentence separator */ \
    moot::mootTagString output_sentence_separator; \
    /** output token separator */ \
    moot::mootTagString output_token_separator; \
    \
    /* -- local methods */ \
    /** preprocess a C-stream */\
    bool tokenize_stream(FILE *in=stdin, FILE *out=stdout); \
    /** hack for non-global yywrap() */\
    void step_streams(FILE *in, FILE *out);\
    /** make g++ happy */\
    virtual ~mootPPLexer(void) {};
#line 92 "mootPPLexer.ll"
#define YY_mootPPLexer_CONSTRUCTOR_CODE  \
  ntokens = 0; \
  output_sentence_separator = "\n\n"; \
  output_token_separator = "\n";
#line 130 "mootPPLexer.ll"
#line 52 "/usr/local/share/flex++bison++/flexskel.h"



#ifndef YY_mootPPLexer_TEXT
#define YY_mootPPLexer_TEXT yytext
#endif
#ifndef YY_mootPPLexer_LENG
#define YY_mootPPLexer_LENG yyleng
#endif
#ifndef YY_mootPPLexer_IN
#define YY_mootPPLexer_IN yyin
#endif
#ifndef YY_mootPPLexer_OUT
#define YY_mootPPLexer_OUT yyout
#endif
#ifndef YY_mootPPLexer_LEX_RETURN
#define YY_mootPPLexer_LEX_RETURN int
#else
#ifndef YY_mootPPLexer_LEX_DEFINED
#define YY_mootPPLexer_LEX_DEFINED 
#endif
#endif

#ifndef YY_mootPPLexer_LEX
#define YY_mootPPLexer_LEX yylex
#else
#ifndef YY_mootPPLexer_LEX_DEFINED
#define YY_mootPPLexer_LEX_DEFINED 
#endif
#endif

#ifndef YY_mootPPLexer_LEX_PARAM
#ifndef YY_USE_PROTOS
#define YY_mootPPLexer_LEX_PARAM 
#else
#define YY_mootPPLexer_LEX_PARAM void
#endif
#else
#ifndef YY_mootPPLexer_LEX_DEFINED
#define YY_mootPPLexer_LEX_DEFINED 
#endif
#endif

#ifndef YY_mootPPLexer_LEX_PARAM_DEF
#define YY_mootPPLexer_LEX_PARAM_DEF
#else
#ifndef YY_mootPPLexer_LEX_DEFINED
#define YY_mootPPLexer_LEX_DEFINED 
#endif
#endif

#ifndef YY_mootPPLexer_RESTART
#define YY_mootPPLexer_RESTART yyrestart
#endif
#ifndef YY_mootPPLexer_SWITCH_TO_BUFFER
#define YY_mootPPLexer_SWITCH_TO_BUFFER yy_switch_to_buffer
#endif
#ifndef YY_mootPPLexer_LOAD_BUFFER_STATE
#define YY_mootPPLexer_LOAD_BUFFER_STATE yy_load_buffer_state
#endif

#ifndef YY_mootPPLexer_CREATE_BUFFER
#define YY_mootPPLexer_CREATE_BUFFER yy_create_buffer
#ifndef YY_USE_CLASS
#ifndef yy_new_buffer
#define yy_new_buffer yy_create_buffer
#endif
#endif
#endif
#ifndef YY_mootPPLexer_DELETE_BUFFER
#define YY_mootPPLexer_DELETE_BUFFER yy_delete_buffer
#endif
#ifndef YY_mootPPLexer_INIT_BUFFER
#define YY_mootPPLexer_INIT_BUFFER yy_init_buffer
#endif
#ifdef YY_mootPPLexer_FLEX_DEBUG
#ifndef YY_mootPPLexer_DEBUG
#define YY_mootPPLexer_DEBUG 1
#endif
#else
#ifndef YY_mootPPLexer_DEBUG
#define YY_mootPPLexer_DEBUG 0
#endif
#endif

#if YY_mootPPLexer_DEBUG != 0
#ifndef YY_mootPPLexer_DEBUG_FLAG
#define YY_mootPPLexer_DEBUG_FLAG yy_flex_debug
#endif
#ifndef YY_mootPPLexer_DEBUG_INIT
#define YY_mootPPLexer_DEBUG_INIT 1
#endif
#endif




#ifndef YY_USE_CLASS
typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern void YY_mootPPLexer_RESTART YY_PROTO(( FILE *input_file ));
extern void YY_mootPPLexer_SWITCH_TO_BUFFER YY_PROTO(( YY_BUFFER_STATE new_buffer ));
extern void YY_mootPPLexer_LOAD_BUFFER_STATE YY_PROTO(( void ));
extern YY_BUFFER_STATE YY_mootPPLexer_CREATE_BUFFER YY_PROTO(( FILE *file, int size ));
extern void YY_mootPPLexer_DELETE_BUFFER YY_PROTO(( YY_BUFFER_STATE b ));
extern void YY_mootPPLexer_INIT_BUFFER YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#if YY_mootPPLexer_DEBUG != 0
extern int YY_mootPPLexer_DEBUG_FLAG ;
#endif
extern YY_mootPPLexer_CHAR  *YY_mootPPLexer_TEXT;
extern int YY_mootPPLexer_LENG;
extern FILE *YY_mootPPLexer_IN, *YY_mootPPLexer_OUT;
#ifdef YY_mootPPLexer_LEX_DEFINED
extern YY_mootPPLexer_LEX_RETURN YY_mootPPLexer_LEX ( YY_mootPPLexer_LEX_PARAM )
YY_mootPPLexer_LEX_PARAM_DEF
#else
#ifndef YY_DECL
extern YY_mootPPLexer_LEX_RETURN YY_mootPPLexer_LEX ( YY_mootPPLexer_LEX_PARAM )
YY_mootPPLexer_LEX_PARAM_DEF
#else
/* no declaration if oldstyle flex */
#endif
#endif
#else

#ifndef YY_mootPPLexer_CLASS
#define YY_mootPPLexer_CLASS mootPPLexer
#endif
#ifndef YY_mootPPLexer_ECHO
#define YY_mootPPLexer_ECHO yy_echo
#endif
#ifdef YY_mootPPLexer_ECHO_PURE
#define YY_mootPPLexer_ECHO_NOCODE
#endif
#ifndef YY_mootPPLexer_ECHO_CODE
#define YY_mootPPLexer_ECHO_CODE fwrite( (char *) YY_mootPPLexer_TEXT, YY_mootPPLexer_LENG, 1, YY_mootPPLexer_OUT );
#endif
#ifndef YY_mootPPLexer_INPUT
#define YY_mootPPLexer_INPUT yy_input
#endif
#ifdef YY_mootPPLexer_INPUT_PURE
#define YY_mootPPLexer_INPUT_NOCODE
#endif
#ifndef YY_mootPPLexer_INPUT_CODE
#define YY_mootPPLexer_INPUT_CODE return result= fread(  buffer, 1,max_size,YY_mootPPLexer_IN );
#endif
#ifdef YY_mootPPLexer_FATAL_ERROR_PURE
#define YY_mootPPLexer_FATAL_ERRO_NOCODE
#endif
#ifndef YY_mootPPLexer_FATAL_ERROR
#define YY_mootPPLexer_FATAL_ERROR yy_fatal_error
#endif
#ifndef YY_mootPPLexer_FATAL_ERROR_CODE
#define YY_mootPPLexer_FATAL_ERROR_CODE fputs( msg, stderr );putc( '\n', stderr );exit( 1 );
#endif
#ifndef YY_mootPPLexer_WRAP
#define YY_mootPPLexer_WRAP yy_wrap
#endif
#ifdef YY_mootPPLexer_WRAP_PURE
#define YY_mootPPLexer_WRAP_NOCODE
#endif
#ifndef YY_mootPPLexer_WRAP_CODE
#define YY_mootPPLexer_WRAP_CODE return 1;
#endif


#ifndef YY_mootPPLexer_INHERIT
#define YY_mootPPLexer_INHERIT
#endif
#ifndef YY_mootPPLexer_MEMBERS
#define YY_mootPPLexer_MEMBERS 
#endif
#ifndef YY_mootPPLexer_CONSTRUCTOR_PARAM
#define YY_mootPPLexer_CONSTRUCTOR_PARAM
#endif
#ifndef YY_mootPPLexer_CONSTRUCTOR_CODE
#define YY_mootPPLexer_CONSTRUCTOR_CODE
#endif
#ifndef YY_mootPPLexer_CONSTRUCTOR_INIT
#define YY_mootPPLexer_CONSTRUCTOR_INIT
#endif
typedef struct yy_buffer_state *YY_BUFFER_STATE;

class YY_mootPPLexer_CLASS YY_mootPPLexer_INHERIT
{
 private:/* data */
 YY_mootPPLexer_CHAR  *yy_c_buf_p;
 YY_mootPPLexer_CHAR  yy_hold_char;
 int yy_n_chars;
 int yy_init;
 int yy_start;
 int yy_did_buffer_switch_on_eof;
 private: /* functions */
 void yy_initialize();
 int input();
 int yyinput() {return input();};
 int yy_get_next_buffer();
 void yyunput( YY_mootPPLexer_CHAR  c, YY_mootPPLexer_CHAR  *buf_ptr );
 /* use long instead of yy_state_type because it is undef */
 long yy_get_previous_state_ ( void );
 long yy_try_NUL_trans_  ( long current_state_ );
 protected:/* non virtual */
 YY_BUFFER_STATE yy_current_buffer;
 void YY_mootPPLexer_RESTART ( FILE *input_file );
 void YY_mootPPLexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer );
 void YY_mootPPLexer_LOAD_BUFFER_STATE( void );
 YY_BUFFER_STATE YY_mootPPLexer_CREATE_BUFFER( FILE *file, int size );
 void YY_mootPPLexer_DELETE_BUFFER( YY_BUFFER_STATE b );
 void YY_mootPPLexer_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file );
 protected: /* virtual */
 virtual void YY_mootPPLexer_ECHO()
#ifdef YY_mootPPLexer_ECHO_PURE
  =0
#endif
  ;
 virtual int  YY_mootPPLexer_INPUT(char  *buf,int &result,int max_size)
#ifdef YY_mootPPLexer_INPUT_PURE
  =0
#endif
  ;
 virtual void  YY_mootPPLexer_FATAL_ERROR(char *msg)
#ifdef YY_mootPPLexer_FATAL_ERROR_PURE
  =0
#endif
  ;
 virtual int  YY_mootPPLexer_WRAP()
#ifdef YY_mootPPLexer_WRAP_PURE
  =0
#endif
  ;
 public:
 YY_mootPPLexer_CHAR  *YY_mootPPLexer_TEXT;
 int YY_mootPPLexer_LENG;
 FILE *YY_mootPPLexer_IN, *YY_mootPPLexer_OUT;
 YY_mootPPLexer_LEX_RETURN YY_mootPPLexer_LEX ( YY_mootPPLexer_LEX_PARAM);
 YY_mootPPLexer_CLASS(YY_mootPPLexer_CONSTRUCTOR_PARAM) ;
#if YY_mootPPLexer_DEBUG != 0
 int YY_mootPPLexer_DEBUG_FLAG;
#endif
 public: /* added members */
 YY_mootPPLexer_MEMBERS 
};
#endif



/* declaration of externs for public use of yylex scanner */

/* % here is the declaration from section2 %header{ */ 
#line 206 "mootPPLexer.ll"
#endif
#line 302 "/usr/local/share/flex++bison++/flexskel.h"

/* end of generated header */
