.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MOOTTUT 1"
.TH MOOTTUT 1 "2012-02-28" "moot v2.0.10-3" "moot PoS Tagger"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "moot TUTORIAL"
.IX Header "moot TUTORIAL"
This document provides a rudimentary introduction to the
moot PoS tagging utilities.  It should under no circumstances
be considered a substitute for the individual program
documentation.
.SH "The Big Idea"
.IX Header "The Big Idea"
The moot utilities are designed for Part-of-Speech Tagging:
assigning a single univocal \fItag\fR to each input token.
The runtime tagger (moot) determines which tags to assign
by (sequence) maximization of uni\-, bi\-, and trigram probabilities,
as well as lexical probabilties and optional lexical-class
probabilities.  Probability data is passed to the runtime tagger
in a \fImodel\fR.  Runtime data to the tagger must be tokenized
(\*(L"cooked\*(R"), and may optionally include for each input token a set
of possible analyses (a \fIlexical class\fR) for that token.
.SH "Training"
.IX Header "Training"
Before an input file can be tagged, statistical data in the
form of a \fBmodel\fR must first be provided.
The easiest way to produce such a model is by using the
mootrain utility to gather frequency
data from a pre-tagged corpus, thus inducing a maximum-likelihood
model.
.SS "Training from a Tagged Corpus"
.IX Subsection "Training from a Tagged Corpus"
If you have a text-format corpus in the file
\&\*(L"corpus.ttt\*(R" which is pre-tagged with the \*(L"correct\*(R"
part-of-speech tags, then the incantation:
.PP
.Vb 1
\& mootrain \-\-lex \-\-ngrams corpus.ttt
.Ve
.PP
will produce the model files \*(L"corpus.lex\*(R" and \*(L"corpus.123\*(R"
required for runtime tagging of tokens cooked \*(L"rare\*(R".
.SS "Training from a Tagged and Analyzed Corpus"
.IX Subsection "Training from a Tagged and Analyzed Corpus"
If you have a text-format corpus in the file
\&\*(L"corpus.wdt\*(R" which is pre-tagged with the \*(L"correct\*(R"
part-of-speech tags as well as lexical classes,
then the incantation:
.PP
.Vb 1
\& mootrain \-\-lex \-\-ngrams \-\-classes corpus.wdt
.Ve
.PP
will produce the model files \*(L"corpus.lex\*(R", \*(L"corpus.123\*(R",
and \*(L"corpus.clx\*(R" required for runtime tagging of
tokens cooked \*(L"medium rare\*(R".
.PP
If you are using \fImootm\fR\|(1) to analyze incoming tokens,
but your training corpus \*(L"corpus.ttt\*(R" contains only
tags (and not analyses), you may generate an appropriate
\&\*(L"well done\*(R" corpus file \*(L"corpus.wdt\*(R" from \*(L"corpus.ttt\*(R"
by calling:
.PP
.Vb 1
\& mootm \-12 \-m morph.gfst \-s morph.lab \-a \-o corpus.wdt corpus.ttt
.Ve
.PP
before calling \*(L"mootrain\*(R".  See the \fImootm\fR\|(1) manpage for details.
.PP
\fICaveat Praeceptor\fR
.IX Subsection "Caveat Praeceptor"
.PP
Note that training a model from a \*(L"well-done\*(R" corpus in the manner
described above
\&\fBonly\fR makes sense if you plan to pass \*(L"medium-rare\*(R" files
produced by \fBexactly the same analyzer\fR to \*(L"moot\*(R"
when tagging new texts.
In particular, if not all of the analyses to be passed in \*(L"medium-rare\*(R" files
to the runtime tagger \*(L"moot\*(R" are encoded in the analysis fst \*(L"morph.gfst\*(R"
(e.g. if some analyses are produced by a preprocessing stage), then such
\&\*(L"extra\*(R" analyses should also be included in the \*(L"well-done\*(R" training corpus.
Such an incompatibility between training and runtime analysis formats may
seriously degrade tagger performance.
Optionally, you can disregard the analysis information
present in the model (if any) at tagger runtime by specifying the \f(CW\*(C`\-\-use\-classes=0\*(C'\fR
option to \*(L"moot\*(R".
.SH "Tokenization"
.IX Header "Tokenization"
Assume you have some raw (unformatted) text to be tagged in the file
\&\*(L"test.txt\*(R".  Before the text can be tagged, it must first be
split into indivdual tokens.  The moot utilities contain a
rudimentary preprocessor, mootpp, to perform
this task.  The incantation:
.PP
.Vb 1
\& mootpp \-o test.t test.txt
.Ve
.PP
will produce a \*(L"rare\*(R" cooked file \*(L"test.t\*(R" suitable for passing
to the tagger or to an external analysis program.
.SH "Analysis (Optional)"
.IX Header "Analysis (Optional)"
If you have an external analysis program such as \fImootm\fR\|(1)
which assigns (possibly empty) lexical classes to input tokens,
and if your model contains lexical class information (i.e. if
you trained from a \*(L"well done\*(R" corpus analyzed by the same program,
and if the file \*(L"corpus.clx\*(R"
contains entries for more than one lexical class), then you
may at this point wish to filter \*(L"test.t\*(R" through your analysis
program, yielding a 'medium\-rare' file \*(L"test.mr\*(R".
.PP
For analyzing incoming tokens with the \*(L"mootm\*(R" program built
with libgfsm support, using an analysis
transducer \*(L"morph.gfst\*(R" and analysis labels \*(L"morph.lab\*(R",
the appropriate incantation is:
.PP
.Vb 1
\& mootm \-m morph.gfst \-s morph.lab \-a \-o test.mr test.t
.Ve
.PP
See the \fImootm\fR\|(1) manpage for details.
.SH "Tagging"
.IX Header "Tagging"
Having trained a model, as well as tokenized (and optionally analyzed)
your input file, you are now ready to call the runtime tagger,
moot.
.SS "Tagging: Rare Cooked Input"
.IX Subsection "Tagging: Rare Cooked Input"
If you are not using an external analysis program,
and if you have a trained model in the files \*(L"corpus.lex\*(R"
and \*(L"corpus.123\*(R", as well as a rare cooked file \*(L"test.t\*(R"
to be tagged, then:
.PP
.Vb 1
\& moot \-\-model=corpus \-\-use\-classes=0 \-o test.tt test.t
.Ve
.PP
will produce a \*(L"medium cooked\*(R" (tagged) output file
\&\*(L"test.tt\*(R".
.SS "Tagging: Medium Rare Cooked Input"
.IX Subsection "Tagging: Medium Rare Cooked Input"
If you are using an external analysis program such as \fImootm\fR\|(1),
and if you have a trained model in the files \*(L"corpus.lex\*(R",
\&\*(L"corpus.123\*(R", and \*(L"corpus.clx\*(R", as well as a medium-rare cooked file \*(L"test.mr\*(R"
to be tagged, then:
.PP
.Vb 1
\& moot \-\-model=corpus \-\-use\-classes=1 \-o test.wd test.mr
.Ve
.PP
will produce a \*(L"well done\*(R" (+tagged,+analyzed) output file
\&\*(L"test.wd\*(R".
.SH "Evaluation"
.IX Header "Evaluation"
In the course of model development, it is customary to
reserve a small portion of the hand-tagged training
corpus for testing.  If you have such a medium cooked
file \*(L"test.ttt\*(R" tagged with the \*(L"truth\*(R", as well as
a moot output file \*(L"test.tt\*(R" for the same tokens, you
can check the accuracy of the tagger
with the program mooteval.
.PP
.Vb 1
\& mooteval \-2 test.ttt test.tt
.Ve
.SH "Example Files"
.IX Header "Example Files"
.SS "corpus.ttt : medium cooked file"
.IX Subsection "corpus.ttt : medium cooked file"
.Vb 2
\& %% File       : corpus.ttt
\& %% Description: demonstration corpus for moot tutorial: +tagged,\-analyzed
\& 
\& %% Sentence 1
\& This           DD
\& is             VBZ
\& a              AT
\& sentence       NN
\& .              $.
\& 
\& %% Sentence 2
\& This           DD
\& is             VBZ
\& another        DD
\& sentence       NN
\& .              $.
\& 
\& %% Sentence 3
\& Here           RL
\& is             VBZ
\& a              AT
\& 3rd            MD
\& sentence       NN
\& also           RR
\& .              $.
.Ve
.SS "corpus.wdt : well done cooked file"
.IX Subsection "corpus.wdt : well done cooked file"
.Vb 2
\& %% File       : corpus.mttt
\& %% Description: demonstration corpus for moot tutorial: +tagged,+analyzed
\& 
\& %% Sentence 1
\& This           DD      [AT]    [DD]
\& is             VBZ     [VBZ]
\& a              AT      [AT]
\& sentence       NN      [NN]    [VBZ]
\& .              $.      [$.]
\& 
\& %% Sentence 2
\& This           DD      [DD]    [AT]
\& is             VBZ     [VBZ]
\& another        DD      [PP]    [NN]
\& sentence       NN      [NN]    [VBZ]
\& .              $.      [$.]
\& 
\& %% Sentence 3
\& Here           RL      [RL]    [ADV]
\& is             VBZ     [VBZ]
\& a              AT      [AT]
\& 3rd            MD
\& sentence       NN      [NN]    [VBZ]
\& also           RR      [RR]
\& .              $.      [$.]
.Ve
.SS "test.txt : raw text file"
.IX Subsection "test.txt : raw text file"
.Vb 1
\& This is a test.  This is ONLY a test.
.Ve
.SS "test.t : rare cooked file"
.IX Subsection "test.t : rare cooked file"
.Vb 5
\& This
\& is
\& a
\& test
\& .
\& 
\& This
\& is
\& ONLY
\& a
\& test
\& .
.Ve
.SS "test.mr : medium-rare cooked file"
.IX Subsection "test.mr : medium-rare cooked file"
.Vb 5
\& This   [AT]    [DD]
\& is     [VBZ]
\& a      [AT]
\& test   [NN]    [VBZ]
\& .      [$.]
\& 
\& This   [AT]    [DD]
\& is     [VBZ]
\& ONLY
\& a      [AT]
\& test   [NN]    [VBZ]
\& .      [$.]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Bryan Jurish <jurish@uni\-potsdam.de>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImootutils\fR\|(1)
