
=pod

=head1 NAME

mootdump - moocow's HMM part-of-speech tagger/disambiguator: model dumper.



=head1 SYNOPSIS

mootdump [OPTIONS] MODEL

 Arguments:
    MODEL  Input model.

 Options
    -h       --help              Print help and exit.
    -V       --version           Print version and exit.
    -cFILE   --rcfile=FILE       Read an alternate configuration file.
    -vLEVEL  --verbose=LEVEL     Verbosity level.
    -gBOOL   --hash-ngrams=BOOL  Whether to hash stored n-grams (default=yes)
    -k       --const             Enable dump of scalar model constants
    -l       --lex               Enable lexical probability dump
    -C       --class             Enable lexical-class probability dump
    -s       --suffix            Enable suffix-trie dump
    -n       --ngrams            Enable tag n-gram probability dump
    -oFILE   --output=FILE       Specify output file (default=stdout).

=cut

###############################################################
# Description
###############################################################
=pod

=head1 DESCRIPTION

moocow's HMM part-of-speech tagger/disambiguator: model dumper.


'mootdump' creates text-dumps of compile HMM models for debugging.

See L<mootfiles> for details on moot model file formats.


=cut

###############################################################
# Arguments
###############################################################
=pod

=head1 ARGUMENTS

=over 4

=item C<MODEL>

Input model.


MODEL may be either a binary or a text model.

For details on moot file formats, see L<mootfiles>.


=back



=cut


###############################################################
# Options
###############################################################
=pod

=head1 OPTIONS

=over 4

=item C<--help> , C<-h>

Print help and exit.

Default: '0'




=item C<--version> , C<-V>

Print version and exit.

Default: '0'




=item C<--rcfile=FILE> , C<-cFILE>

Read an alternate configuration file.

Default: 'NULL'

See also: L<CONFIGURATION FILES>.




=item C<--verbose=LEVEL> , C<-vLEVEL>

Verbosity level.

Default: '3'

Be more or less verbose.  Recognized values are in the range 0..3.




=item C<--hash-ngrams=BOOL> , C<-gBOOL>

Whether to hash stored n-grams (default=yes)

Default: '1'


If specified and true, tag n-grams will be stored in a slow but memory-friendly
hash.  Otherwise, a fast but large array will be used (only useful for implicit compilation).





=item C<--const> , C<-k>

Enable dump of scalar model constants

Default: '0'


If none of the --(const|lex|class|suffix|ngrams) options are specified, a full dump is
produced (as if all of the above options had been specified).  If any of these
options B<are> specified, only the model properties indicated by the specified
flag(s) are dumped.





=item C<--lex> , C<-l>

Enable lexical probability dump

Default: '0'

See L<--const , -k>




=item C<--class> , C<-C>

Enable lexical-class probability dump

Default: '0'

See L<--const , -k>




=item C<--suffix> , C<-s>

Enable suffix-trie dump

Default: '0'

See L<--const , -k>




=item C<--ngrams> , C<-n>

Enable tag n-gram probability dump

Default: '0'

See L<--const , -k>




=item C<--output=FILE> , C<-oFILE>

Specify output file (default=stdout).

Default: '-'


Text dump will be written to FILE.





=back




=cut

###############################################################
# configuration files
###############################################################
=pod

=head1 CONFIGURATION FILES

Configuration files are expected to contain lines of the form:

    LONG_OPTION_NAME    OPTION_VALUE

where LONG_OPTION_NAME is the long name of some option,
without the leading '--', and OPTION_VALUE is the value for
that option, if any.  Fields are whitespace-separated.
Blank lines and comments (lines beginning with '#')
are ignored.

The following configuration files are read by default:

=over 4

=item * /etc/mootdumprc

=item * ~/.mootdumprc

=back

=cut



###############################################################
# Addenda
###############################################################
=pod

=head1 ADDENDA



=head2 About this Document

Documentation file auto-generated by optgen.perl version 0.06
using Getopt::Gen version 0.13.
Translation was initiated
as:

   optgen.perl -l --nocfile --nohfile --notimestamp -F mootdump mootdump.gog

=cut


###############################################################
# Bugs
###############################################################
=pod

=head1 BUGS AND LIMITATIONS



None known.



=cut

###############################################################
# Footer
###############################################################
=pod

=head1 ACKNOWLEDGEMENTS


Development of this package was supported by the project
'Kollokationen im WE<ouml>rterbuch'
( "collocations in the dictionary", http://www.bbaw.de/forschung/kollokationen )
in association with the project
'Digitales WE<ouml>rterbuch der deutschen Sprache des 20. Jahrhunderts (DWDS)'
( "digital dictionary of the German language of the 20th century", http://www.dwds.de )
at the Berlin-Brandenburgische Akademie der Wissenschaften ( http://www.bbaw.de )
with funding from
the Alexander von Humboldt Stiftung ( http://www.avh.de )
and from the Zukunftsinvestitionsprogramm of the
German federal government.

I am grateful to Christiane Fellbaum, Alexander Geyken,
Gerald Neumann, Edmund Pohl, Alexey Sokirko, and others
for offering useful insights in the course of development
of this package.

Thomas Hanneforth wrote and maintains the libFSM C++ library
for finite-state device operations used by the
class-based HMM tagger / disambiguator, without which
this package could not have been built.

Alexander Geyken and Thomas Hanneforth developed the
rule-based morphological analysis system for German
which was used in the development and testing of the
class-based HMM tagger / disambiguator.


=head1 AUTHOR

Bryan Jurish E<lt>jurish@uni-potsdam.deE<gt>

=head1 SEE ALSO


L<mootfiles>,
L<mootrain>,
L<mootcompile>,
L<moot>


=cut


