#define YY_CHAR unsigned char
#line 1 "./flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header$
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */
//-- moo: changed to 'const char *'

#define YY_FATAL_ERROR(msg) \
        do { \
		  (void) fputs( msg, stderr ); \
		  (void) putc( '\n', stderr ); \
		  exit( 1 ); \
		} \
	while ( 0 )


/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "mootTokenLexer.ll"
#define INITIAL 0
/*-*- Mode: Flex++; c-basic-offset: 2; -*-*/
/*
   libmoot : moocow's part-of-speech tagging library
   Copyright (C) 2003-2013 by Bryan Jurish <moocow@cpan.org>

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 3 of the License, or (at your option) any later version.
   
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.
   
   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*/
/*----------------------------------------------------------------------
 * Name: mootTokenLexer.ll
 * Author: Bryan Jurish
 * Description:
 *   + lexer for moocow's tagger
 *   + assumes pre-tokenized input
 *     - one token per line
 *     - n>=0 (possible) tags per token
 *     - blank lines mark end-of-sentence
 *     - supports line-comments introduced by '%%'
 *     - supports word- and sentence-break hints "%%$WB$", "%%$SB$"
 *     - raw text (no markup!)
 *     - token-line format (TAB-separated)
 *        TOKEN_TEXT  ANALYSIS_1 ... ANALYSIS_N
 *     - analysis format(s):
 *        ...(COST?)... "[" TAG ["]"|" "] ...(COST?)...
 *     - COST format(s):
 *       "<" COST_FLOAT ">"
 *
 *   + process with Coetmeur's flex++ to produce 'mootTokenLexer.cc'
 *----------------------------------------------------------------------*/
/* --- Lexer name --- */
#define YY_mootTokenLexer_FLEX_SCANNER
/*%define FLEX_DEBUG*/
/*----------------------------------------------------------------------
 * Start States
 *----------------------------------------------------------------------*/
#define LOC_OFFSET 1
#define LOC_LENGTH 2
#define TAG 3
#define DETAILS 4
#define SEPARATORS 5
#define TOKEN 6
/*----------------------------------------------------------------------
 * Definitions
 *----------------------------------------------------------------------*/
/*detchar    [^ \t\n\r\<\>\[]*/
/*bestchar   [\/]*/
/*----------------------------------------------------------------------
 * Rules
 *----------------------------------------------------------------------*/
#include "mootTokenLexer.h"
#line 223 "mootTokenLexer.ll"
#line 197 "./flexskel.cc"

#define yy___text YY_mootTokenLexer_TEXT
#define yy___leng YY_mootTokenLexer_LENG
#define yy___in YY_mootTokenLexer_IN
#define yy___out YY_mootTokenLexer_OUT
#define yy___newfile \
	do \
		{ \
		YY_mootTokenLexer_INIT_BUFFER( yy_current_buffer, yy___in ); \
		YY_mootTokenLexer_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_mootTokenLexer_DEBUG != 0
#define yy___flex_debug YY_mootTokenLexer_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_mootTokenLexer_ECHO
#define yy___input YY_mootTokenLexer_INPUT
#define yy___fatal_error YY_mootTokenLexer_FATAL_ERROR
#define yy___wrap YY_mootTokenLexer_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_mootTokenLexer_CHAR *yy_ch_buf;               /* input buffer */
    YY_mootTokenLexer_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_mootTokenLexer_DEBUG != 0
int YY_mootTokenLexer_DEBUG_FLAG=YY_mootTokenLexer_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER yy_current_buffer
static YY_BUFFER_STATE yy_current_buffer;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_mootTokenLexer_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_mootTokenLexer_CHAR *yy___text;
int yy___leng;

FILE *yy___in = (FILE *) 0, *yy___out = (FILE *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_mootTokenLexer_CHAR *yy_c_buf_p = (YY_mootTokenLexer_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_mootTokenLexer_CHAR c, YY_mootTokenLexer_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_mootTokenLexer_ECHO_NOCODE
void YY_mootTokenLexer_CLASS::yy___echo()
{YY_mootTokenLexer_ECHO_CODE
}
#endif
#ifndef YY_mootTokenLexer_INPUT_NOCODE
int  YY_mootTokenLexer_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_mootTokenLexer_INPUT_CODE
}
#endif
#ifndef YY_mootTokenLexer_FATAL_ERROR_NOCODE
void YY_mootTokenLexer_CLASS::yy___fatal_error(const char *msg)
{YY_mootTokenLexer_FATAL_ERROR_CODE
}
#endif
#ifndef YY_mootTokenLexer_WRAP_NOCODE
int  YY_mootTokenLexer_CLASS::yy___wrap()
{YY_mootTokenLexer_WRAP_CODE
}
#endif
void YY_mootTokenLexer_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 yy_current_buffer=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_mootTokenLexer_DEBUG != 0
 YY_mootTokenLexer_DEBUG_FLAG=YY_mootTokenLexer_DEBUG_INIT;
#endif
}

YY_mootTokenLexer_CLASS::YY_mootTokenLexer_CLASS(YY_mootTokenLexer_CONSTRUCTOR_PARAM) YY_mootTokenLexer_CONSTRUCTOR_INIT
{yy_initialize();
 YY_mootTokenLexer_CONSTRUCTOR_CODE;
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 29
typedef int yy_state_type;
static const short int yy_acclist[123] =
    {   0,
       29,   25,   28,   28,   24,   25,   28,   23,   28,   21,
       23,   28,   22,   28,   20,   22,   23,   28,   20,   23,
       28,   18,   23,   28,   19,   23,   28,   17,   27,   28,
       27,   28,   14,   26,   28,   16,   26,   28,   16,   28,
       16,   26,   28,16395,   26,   28,16395,   13,   26,   28,
       13,   14,   26,   28,   13,   26,   28,    8,   28,    7,
       28,    9,   28,    6,   25,   28,    5,    6,   28,    6,
       24,   25,   28,    4,   25,   28,    6,   25,   28,    2,
        5,    6,   28,    6,   24,   25,   28,    4,   24,   25,
       28,    4,   25,   28,   24,   20,   18,   19,   17,   14,

       15,   16,   16,16395,16395,   15,   10,   10,    7,    5,
        4,    2,    2,    5,   24,    4,   24,    4,   12,    4,
        3, 8203
    } ;

static const short int yy_accept[93] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    4,    5,    8,   10,
       13,   15,   19,   22,   25,   28,   31,   33,   36,   39,
       41,   45,   48,   51,   55,   58,   60,   62,   64,   67,
       70,   74,   77,   80,   84,   88,   92,   95,   96,   97,
       98,   99,  100,  101,  102,  103,  105,  106,  107,  107,
      107,  107,  108,  109,  110,  111,  112,  112,  113,  113,
      115,  116,  118,  119,  119,  119,  119,  119,  120,  120,
      121,  121,  122,  122,  122,  123,  123,  123,  123,  123,
      123,  123

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    1,    1,    6,    1,    1,    1,
        1,    1,    7,    1,    7,    8,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,   10,
        1,   11,    1,    1,    1,    1,    1,    1,   12,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       13,    1,   14,    1,   15,    1,    1,    1,    1,    1,

       12,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[16] =
    {   0,
        1,    2,    3,    3,    4,    1,    1,    1,    1,    5,
        1,    1,    5,    6,    1
    } ;

static const short int yy_base[105] =
    {   0,
        0,    3,    7,   15,  185,  184,   23,   36,   50,    0,
       64,   68,   72,   75,  188,  210,  210,    9,  210,  210,
      210,   17,   25,  178,  177,    0,  210,    0,  210,  210,
       80,   89,   93,    0,  162,  210,   27,  210,  210,  210,
      173,    0,  101,  210,  172,  105,  168,   29,   31,  162,
      161,    0,    0,  210,  210,    0,    0,  104,   34,  160,
      106,  210,    0,   40,  210,    0,    0,  210,  132,  210,
      125,    0,  117,   38,  115,  114,  118,  210,   79,  129,
       45,  210,  113,  125,  210,   80,   14,   86,    6,   87,
      210,  137,  143,  149,  155,  161,  167,  172,  178,  184,

      187,  191,  197,  203
    } ;

static const short int yy_def[105] =
    {   0,
       92,   92,   93,   93,    4,    4,   94,   94,   91,    9,
       95,   95,    2,   96,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   97,   91,   98,   91,   91,
       99,   99,   91,   98,  100,   91,   91,   91,   91,   91,
      101,  102,   91,   91,  101,  102,  102,   91,   91,   91,
       91,   97,   98,   91,   91,   32,   32,   91,   91,   91,
       91,   91,  100,   91,   91,  102,   43,   91,   91,   91,
      101,   46,  103,   91,   91,   91,   91,   91,   91,  103,
      104,   91,   91,   91,   91,   91,   91,   91,   91,   91,
        0,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91
    } ;

static const short int yy_nxt[226] =
    {   0,
       91,   91,   17,   18,   18,   17,   18,   18,   20,   21,
       22,   23,   48,   48,   90,   24,   20,   21,   22,   23,
       49,   49,   88,   24,   27,   17,   27,   27,   49,   49,
       64,   64,   48,   48,   49,   49,   27,   27,   17,   27,
       27,   60,   61,   64,   64,   75,   76,   82,   83,   27,
       28,   29,   30,   31,   32,   28,   28,   28,   28,   33,
       34,   28,   35,   28,   28,   37,   38,   38,   17,   37,
       38,   38,   17,   39,   40,   41,   43,   44,   45,   46,
       47,   55,   55,   56,   57,   87,   89,   88,   90,   58,
       55,   55,   56,   57,   88,   90,   78,   85,   58,   59,

       60,   61,   67,   68,   69,   67,   67,   68,   71,   72,
       74,   75,   76,   60,   61,   82,   78,   79,   81,   82,
       83,   75,   76,   84,   85,   86,   77,   68,   78,   79,
       81,   82,   83,   84,   68,   85,   86,   16,   16,   16,
       16,   16,   16,   19,   19,   19,   19,   19,   19,   26,
       26,   26,   26,   26,   26,   36,   36,   36,   36,   36,
       36,   42,   42,   42,   42,   42,   42,   52,   77,   51,
       50,   52,   53,   73,   70,   65,   63,   53,   54,   54,
       54,   54,   54,   54,   62,   51,   50,   91,   62,   48,
       48,   66,   25,   25,   66,   66,   66,   80,   80,   80,

       80,   80,   80,   81,   81,   81,   81,   81,   81,   15,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91
    } ;

static const short int yy_chk[226] =
    {   0,
        0,    0,    1,    1,    1,    2,    2,    2,    3,    3,
        3,    3,   18,   18,   89,    3,    4,    4,    4,    4,
       22,   22,   87,    4,    7,    7,    7,    7,   23,   23,
       37,   37,   48,   48,   49,   49,    7,    8,    8,    8,
        8,   59,   59,   64,   64,   74,   74,   81,   81,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   12,
       12,   12,   12,   13,   13,   13,   14,   14,   14,   14,
       14,   31,   31,   31,   31,   79,   86,   79,   86,   31,
       32,   32,   32,   32,   88,   90,   88,   90,   32,   33,

       33,   33,   43,   43,   43,   43,   46,   46,   46,   46,
       58,   58,   58,   61,   61,   83,   61,   61,   73,   73,
       73,   76,   76,   75,   76,   76,   77,   71,   77,   77,
       80,   80,   80,   84,   69,   84,   84,   92,   92,   92,
       92,   92,   92,   93,   93,   93,   93,   93,   93,   94,
       94,   94,   94,   94,   94,   95,   95,   95,   95,   95,
       95,   96,   96,   96,   96,   96,   96,   97,   60,   51,
       50,   97,   98,   47,   45,   41,   35,   98,   99,   99,
       99,   99,   99,   99,  100,   25,   24,   15,  100,  101,
      101,  102,    6,    5,  102,  102,  102,  103,  103,  103,

      103,  103,  103,  104,  104,  104,  104,  104,  104,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_mootTokenLexer_DEBUG != 0
static const short int yy_rule_linenum[28] =
    {   0,
      223,  272,  283,  303,  313,  322,  343,  350,  365,  381,
      390,  400,  413,  421,  429,  437,  451,  467,  474,  480,
      481,  482,  483,  493,  500,  506,  512
    } ;

#endif
static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static YY_CHAR *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 370 "./flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_mootTokenLexer_LEX_DEFINED
YY_mootTokenLexer_LEX_RETURN YY_mootTokenLexer_LEX ( YY_mootTokenLexer_LEX_PARAM )
YY_mootTokenLexer_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_mootTokenLexer_LEX_RETURN YY_mootTokenLexer_CLASS::YY_mootTokenLexer_LEX ( YY_mootTokenLexer_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_mootTokenLexer_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 

/* % end of prolog */ 
#line 395 "./flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = stdin;

	if ( ! yy___out )
	    yy___out = stdout;

	if ( yy_current_buffer )
	    YY_mootTokenLexer_INIT_BUFFER( yy_current_buffer, yy___in );
	else
	    yy_current_buffer = YY_mootTokenLexer_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_mootTokenLexer_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 423 "./flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 92 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    *yy_state_ptr++ = yy_current_state;
	    ++yy_cp;
	    }
	while ( yy_current_state != 91 );
#line 434 "./flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_current_state = *--yy_state_ptr;
	yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backtracking */
	for ( ; ; ) /* until we find what rule we matched */
	    {
	    if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
		{
		yy_act = yy_acclist[yy_lp];
		if ( yy_act & YY_TRAILING_HEAD_MASK ||
		     yy_looking_for_trail_begin )
		    {
		    if ( yy_act == yy_looking_for_trail_begin )
			{
			yy_looking_for_trail_begin = 0;
			yy_act &= ~YY_TRAILING_HEAD_MASK;
			break;
			}
		    }
		else if ( yy_act & YY_TRAILING_MASK )
		    {
		    yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
		    yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
		    }
		else
		    {
		    yy_full_match = yy_cp;
		    yy_full_state = yy_state_ptr;
		    yy_full_lp = yy_lp;
		    break;
		    }
		++yy_lp;
		goto find_rule;
		}
	    --yy_cp;
	    yy_current_state = *--yy_state_ptr;
	    yy_lp = yy_accept[yy_current_state];
	    }
#line 437 "./flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_mootTokenLexer_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
			fprintf( stderr, "--scanner backtracking\n" );
		else if ( yy_act < YY_END_OF_BUFFER -1 )
			fprintf( stderr, 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
		else if ( yy_act == YY_END_OF_BUFFER -1 )
			fprintf( stderr, 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
		else if ( yy_act == YY_END_OF_BUFFER )
			fprintf( stderr, "--(end of buffer or a NUL)\n" );
		else
			fprintf( stderr, "--EOF\n" );
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 

  BEGIN(TOKEN);
  using namespace std;
  using namespace moot;


/*--------------------------------------------------------------------
 * TOKEN
 */

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LOC_OFFSET):
case YY_STATE_EOF(LOC_LENGTH):
case YY_STATE_EOF(TAG):
case YY_STATE_EOF(DETAILS):
case YY_STATE_EOF(SEPARATORS):
case YY_STATE_EOF(TOKEN):
#line 236 "mootTokenLexer.ll"
{
  //-- EOF: should only happen in TOKEN mode
  mtoken->tok_text="";
  switch (lasttyp) {
   case LexTypeText:
   case LexTypeTag:
   case LexTypeDetails:
   case LexTypeEOA:
     on_EOA();
     lasttyp = TokTypeVanilla;
     break;

   case TokTypeUnknown:
   case TokTypeVanilla:
   case TokTypeComment:
   case TokTypeSB:
   case TokTypeWB:
   case TokTypeUser:
     lasttyp = TokTypeEOS;
     break;

   case TokTypeEOS:
     lasttyp = TokTypeEOF;
     break;

   case TokTypeEOF:
     break;

   default:
     lasttyp = TokTypeEOS;
     break;
  }
  mtoken->toktype(static_cast<mootTokenType>(lasttyp));
  return lasttyp;
}
	YY_BREAK
case 2:
#line 272 "mootTokenLexer.ll"
{
  //-- EOS: blank line: maybe return eos (ignore empty sentences)
  theLine++; theColumn=0; theByte += yyleng;
  if (mtoken->tok_type != TokTypeEOS) {
    mtoken->tok_type=TokTypeEOS;
    mtoken->tok_text="\n";
    if (!parse_location) loc_set(theByte-yyleng, yyleng);
    return TokTypeEOS;
  }
}
	YY_BREAK
case 3:
#line 283 "mootTokenLexer.ll"
{
  //-- COMMENT: return comments as special tokens
  theLine++; theColumn = 0; theByte += yyleng;
  lasttyp = TokTypeComment;
  if (!ignore_comments) {
    mtoken->clear();
    mtoken->toktype(TokTypeComment);
    if (yyleng==7 && yytext[2]=='$' && yytext[4]=='B' &&  yytext[5]=='$') {
      switch (yytext[3]) {
      case 'W': mtoken->toktype(TokTypeWB); break;
      case 'S': mtoken->toktype(TokTypeSB); break;
      default:  break;
      } 
    }
    mtoken->textAppend(reinterpret_cast<const char *>(yytext)+2, yyleng-3);
    if (!parse_location) loc_set(theByte-yyleng, yyleng);
    return lasttyp=mtoken->toktype();
  }
}
	YY_BREAK
case 4:
#line 303 "mootTokenLexer.ll"
{
  //-- TOKEN-TEXT: allow internal whitespace (for WASTE standlone lexer/classifier - moocow Mon, 04 Nov 2013 10:59:59 +0100)
  add_columns(yyleng);
  mtoken->clear();
  mtoken->toktype(TokTypeVanilla);
  mtoken->text(reinterpret_cast<const char *>(yytext), yyleng);
  if (!parse_location) loc_set(theByte-yyleng, yyleng);
  lasttyp = LexTypeText;
}
	YY_BREAK
case 5:
#line 313 "mootTokenLexer.ll"
{
  //-- TOKEN: end-of-token
  add_lines(1);
  mtoken->toktype(TokTypeVanilla);
  loc_add(yyleng); //-- include terminating newline as part of token location
  lasttyp = TokTypeVanilla;
  return TokTypeVanilla;
}
	YY_BREAK
case 6:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 322 "mootTokenLexer.ll"
{
  //-- TOKEN: end-of-text (don't trim whitespace for WASTE standlone lexer/classifier - moocow Mon, 04 Nov 2013 10:59:59 +0100)
  if (first_analysis_is_best) {
    current_analysis_is_best = true;
  } else if (parse_location) {
    nextstate = LOC_OFFSET;
  }

  if (ignore_first_analysis) ignore_current_analysis = true;

  lasttyp = LexTypeText;
  BEGIN(SEPARATORS);
}
	YY_BREAK

/*--------------------------------------------------------------------
 * SEPARATORS
 */

case 7:
#line 343 "mootTokenLexer.ll"
{
  //-- SEPARATORS: Separator character(s): increment column nicely
  theColumn = (static_cast<int>(theColumn/8)+1)*8;
  theByte += yyleng;
  loc_add(yyleng);
  lasttyp = LexTypeEOA;
}
	YY_BREAK
case 8:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 350 "mootTokenLexer.ll"
{
  //-- SEPARATORS: end of separators
  theColumn += yyleng;
  theByte += yyleng;
  //-- maybe switch to new start-state
  if (nextstate >= 0) {
    BEGIN(nextstate); //-- be sure to re-set nextstate=-1 in nextstate!
  } 
  else {
    //-- allocate new analysis
    mtoken->insert(mootToken::Analysis());
    manalysis = &(mtoken->tok_analyses.back());
    BEGIN(DETAILS); 
  }
}
	YY_BREAK
case 9:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 365 "mootTokenLexer.ll"
{
  //-- SEPARATORS/EOT: reset to initial state
  //theLine++;
  //theColumn = 0;
  //theByte += yyleng;
  nextstate = -1;
  BEGIN(TOKEN);
}
	YY_BREAK

/*--------------------------------------------------------------------
 * DETAILS
 */

case 10:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 381 "mootTokenLexer.ll"
{
  //-- DETAILS: looks like a tag
  add_columns(yyleng);
  loc_add(yyleng);
  manalysis->details.append(reinterpret_cast<const char *>(yytext), yyleng);
  lasttyp = LexTypeDetails;
  BEGIN(TAG);
}
	YY_BREAK
case 11:
#line 390 "mootTokenLexer.ll"
{
  //-- DETAILS: pre-cost space
  add_columns(yyleng);
  loc_add(yyleng);
  if (analysis_cost_details) {
    manalysis->details.append(reinterpret_cast<const char *>(yytext), yyleng);
  }
  lasttyp = LexTypeDetails;
}
	YY_BREAK
case 12:
#line 400 "mootTokenLexer.ll"
{
  //-- DETAILS: cost (clobber manalysis->prob)
  add_columns(yyleng);
  loc_add(yyleng);
  if (parse_analysis_cost) {
    manalysis->prob = strtof (reinterpret_cast<const char *>(yytext)+1, NULL);
  }
  if (analysis_cost_details) {
    manalysis->details.append(reinterpret_cast<const char *>(yytext), yyleng);
  }
  lasttyp = LexTypeDetails;
}
	YY_BREAK
case 13:
#line 413 "mootTokenLexer.ll"
{
  //-- allow <,>,[ in details strings even without valid cost or tag
  add_columns(yyleng);
  loc_add(yyleng);
  manalysis->details.append(reinterpret_cast<const char *>(yytext), yyleng);
  lasttyp = LexTypeDetails;
}
	YY_BREAK
case 14:
#line 421 "mootTokenLexer.ll"
{
  //-- DETAILS: detail text
  add_columns(yyleng);
  loc_add(yyleng);
  manalysis->details.append(reinterpret_cast<const char *>(yytext), yyleng);
  lasttyp = LexTypeDetails;
}
	YY_BREAK
case 15:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 429 "mootTokenLexer.ll"
{
  //-- DETAILS: internal whitespace: keep it
  add_columns(yyleng);
  loc_add(yyleng);
  manalysis->details.append(reinterpret_cast<const char *>(yytext), yyleng);
  lasttyp = LexTypeDetails;
}
	YY_BREAK
case 16:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 437 "mootTokenLexer.ll"
{
  //-- DETAILS/EOA: add & clear current analysis, if any
  add_columns(yyleng);
  loc_add(yyleng);
  on_EOA();
  BEGIN(SEPARATORS);
}
	YY_BREAK

/*--------------------------------------------------------------------
 * TAG
 */

case 17:
#line 451 "mootTokenLexer.ll"
{
  //-- TAG: tag text
  add_columns(yyleng);
  loc_add(yyleng);
  manalysis->details.append(reinterpret_cast<const char *>(yytext), yyleng);
  if (manalysis->tag.empty()) manalysis->tag.assign(reinterpret_cast<const char *>(yytext), yyleng);
  lasttyp = LexTypeTag;
  BEGIN(DETAILS);
}
	YY_BREAK

/*--------------------------------------------------------------------
 * LOCATION
 */

case 18:
#line 467 "mootTokenLexer.ll"
{
  //-- LOCATION: offset
  add_columns(yyleng);
  mtoken->loc_offset(strtoul(reinterpret_cast<const char *>(yytext),NULL,0));
  BEGIN(LOC_LENGTH);
}
	YY_BREAK
case 19:
#line 474 "mootTokenLexer.ll"
{
  //-- LOCATION: length
  add_columns(yyleng);
  mtoken->loc_length(strtoul(reinterpret_cast<const char *>(yytext),NULL,0));
}
	YY_BREAK
case 20:
#line 480 "mootTokenLexer.ll"
{ add_columns(yyleng); }
	YY_BREAK
case 21:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 481 "mootTokenLexer.ll"
{ nextstate=-1; BEGIN(SEPARATORS); }
	YY_BREAK
case 22:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 482 "mootTokenLexer.ll"
{ nextstate=-1; BEGIN(TOKEN); }
	YY_BREAK
case 23:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 483 "mootTokenLexer.ll"
{ nextstate=-1; BEGIN(SEPARATORS); }
	YY_BREAK

/*--------------------------------------------------------------------
 * UNKNOWN
 */

case 24:
#line 493 "mootTokenLexer.ll"
{
  /* mostly ignore spaces */
  add_columns(yyleng);
  loc_add(yyleng);
  //lasttyp = LexTypeIgnore;
}
	YY_BREAK
case 25:
#line 500 "mootTokenLexer.ll"
{
  add_columns(yyleng);
  loc_add(yyleng);
  yycarp("Unrecognized TOKEN character '%c'", *yytext);
}
	YY_BREAK
case 26:
#line 506 "mootTokenLexer.ll"
{
  add_columns(yyleng);
  loc_add(yyleng);
  yycarp("Unrecognized DETAIL character '%c'", *yytext);
}
	YY_BREAK
case 27:
#line 512 "mootTokenLexer.ll"
{
  add_columns(yyleng);
  loc_add(yyleng);
  yycarp("Unrecognized TAG character '%c'", *yytext);
}
	YY_BREAK
case 28:
#line 518 "mootTokenLexer.ll"
ECHO;
	YY_BREAK
#line 464 "./flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
#line 512 "./flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_mootTokenLexer_DEBUG != 0
		fprintf(stderr, "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_mootTokenLexer_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_mootTokenLexer_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_mootTokenLexer_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_mootTokenLexer_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_mootTokenLexer_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    register YY_CHAR *yy_bp = yy___text;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;
#line 684 "./flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 92 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	*yy_state_ptr++ = yy_current_state;
#line 688 "./flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_mootTokenLexer_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 92 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    *yy_state_ptr++ = yy_current_state;
    yy_is_jam = (yy_current_state == 91);
#line 722 "./flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_mootTokenLexer_CHAR c, register YY_mootTokenLexer_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_mootTokenLexer_CHAR c;
register YY_mootTokenLexer_CHAR *yy_bp;
#endif
#else
void YY_mootTokenLexer_CLASS::yyunput( YY_mootTokenLexer_CHAR c, YY_mootTokenLexer_CHAR *yy_bp )
#endif

    {
    register YY_mootTokenLexer_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_mootTokenLexer_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_mootTokenLexer_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_mootTokenLexer_CLASS::input()
#endif
    {
    int c;
    YY_mootTokenLexer_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_mootTokenLexer_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootTokenLexer_RESTART( FILE *input_file )
#else
void YY_mootTokenLexer_RESTART( input_file )
FILE *input_file;
#endif
#else
void YY_mootTokenLexer_CLASS::YY_mootTokenLexer_RESTART ( FILE *input_file )
#endif

    {
    YY_mootTokenLexer_INIT_BUFFER( yy_current_buffer, input_file );
    YY_mootTokenLexer_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootTokenLexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_mootTokenLexer_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_mootTokenLexer_CLASS::YY_mootTokenLexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    YY_mootTokenLexer_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootTokenLexer_LOAD_BUFFER_STATE( void )
#else
void YY_mootTokenLexer_LOAD_BUFFER_STATE()
#endif
#else
void YY_mootTokenLexer_CLASS::YY_mootTokenLexer_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yy___text = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yy___in = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_mootTokenLexer_CREATE_BUFFER( FILE *file, int size )
#else
YY_BUFFER_STATE YY_mootTokenLexer_CREATE_BUFFER( file, size )
FILE *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_mootTokenLexer_CLASS::YY_mootTokenLexer_CREATE_BUFFER( FILE *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_mootTokenLexer_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_mootTokenLexer_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_mootTokenLexer_CREATE_BUFFER()" );

    YY_mootTokenLexer_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootTokenLexer_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_mootTokenLexer_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_mootTokenLexer_CLASS::YY_mootTokenLexer_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootTokenLexer_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file )
#else
void YY_mootTokenLexer_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
#else
void YY_mootTokenLexer_CLASS::YY_mootTokenLexer_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 518 "mootTokenLexer.ll"


/*----------------------------------------------------------------------
 * mootTokenLexer helpers
 */
void mootTokenLexer::mgl_begin(int stateno) {BEGIN(stateno);}

/*----------------------------------------------------------------------
 * Local Methods for mootTokenLexer
 *----------------------------------------------------------------------*/
void mootTokenLexer::reset(void)
{
  theLine = 0;
  theColumn = 0;
  theByte = 0;
  current_analysis_is_best = false;
  manalysis = NULL;
  mtoken_default.clear();
  lasttyp = moot::TokTypeEOS;
  BEGIN(TOKEN);
}

void mootTokenLexer::on_EOA(void)
{
  /*-- EOA: add & clear current analysis, if any */ 
  /*-- add & clear current analysis, if any */ 
  if (manalysis && lasttyp != LexTypeEOA) { 
    /*-- set default tag */
    if (manalysis->tag.empty()) { 
      size_t tag_begin = manalysis->details.find_first_not_of(" []<>\n\r",0);
      size_t tag_end   = manalysis->details.find_first_of(" []<>\n\r",tag_begin);
      if (tag_begin != std::string::npos && tag_end != std::string::npos) {
	manalysis->tag.assign(manalysis->details,tag_begin,tag_end);
      } else {
	manalysis->tag.assign(manalysis->details);
      }
    }  
    /* set best tag if applicable */
    if (current_analysis_is_best) { 
      mtoken->besttag(manalysis->tag); 
      current_analysis_is_best = false; 
      if (parse_location) { nextstate=LOC_OFFSET; }
    }
    /* maybe ignore this analysis */ 
    if (ignore_current_analysis) { 
      ignore_current_analysis=false; 
      mtoken->tok_analyses.pop_back(); 
    } 
  } 
}; 
