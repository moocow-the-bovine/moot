ChangeLog for package moot

Todo:
   + write perl-XS interface & utilities

v2.0.4-pre2 Sun, 08 Aug 2004 15:59:56 +0200
	+ set default trie length to zero pending debugging
	+ changed license clause to LGPL in library files
	+ added COPYING.LIB (LGP-2.1) in distribution root dir
	+ added --no-header flag to 'moot'
	  - suppresses leading comments in output files,
	    hack to allow strict XML well-formedness
	+ added doc/tutorial/ with moottut(1)

v2.0.4-pre1 Sat, 31 Jul 2004 13:56:22 +0200
	+ added mootTrieVector
	  - template class for longest-match string tries
	+ added mootAssocVector
	  - template class for short LISP-style associative arrays
	    (i.e. map<> alternative)
	  - small memory footprint
	  - fast iteration
	  - linear time search, but faster than map<> for small arrays
	+ added mootSuffixTrie
	  - TnT-style suffix trie using mootTrieVector and mootAssocVector
	+ added suffix-trie use to mootHMM : works (kinda),
	  but not TnT-compatible:
	  - moot_theta(~=0.03) != tnt_theta(~=0.107)
	  - best smoothing method: sqrt(N) a la Brants&Samuelsson(1995)
	  - even without case (data/*-tolower*) or class-restrictions,
	    TnT gets only 1120 vs. moot's 1265 errors
	    (tnt=96.83 vs. moot=96.42% correct)
	  - TnT suffix trie has different size, with same nominal
	    maximum depth: tnt=125958 vs. moot=124435

v2.0.3 Tue, 20 Jul 2004 19:49:58 +0200
	+ added shell-script 'mootconfig' to report compile-time
	  options for installed systems (pkg-config variable
	  still workds too, but pkg-config might not be present
	  for static builds...)
	+ fixed a nasty icky stinky ugly bug in mootHMM causing
	  zero-probabilities on transitions to EOS
	  - problem was forcing tokid=0 (with TagID=start_tagid)
            in call to viterbi_step(TokID,TagID) from viterbi_finish()
	  - of course this winds up goofy, since EOS is never associated
	    with any real token
	  - hack: force all calls of viterbi_step(TokID,TagID) to
	    use MOOT_PROB_ONE as lexical-probability: this is probably
	    OK, since the method only gets called on last-resort
            ("UNKNOWN" tag) fallbacks and on EOS -- also, if you're
	    only adding a single tag per column, you can safely use
	    a probability of 1.0 without disturbing any maxima.
	
v2.0.2 Mon, 19 Jul 2004 15:51:53 +0200
	+ fixed a bug in mootBufferIO.h causing bad read/write buffers
	  (force cb_rdata==cb_wdata)
	+ changed n-gram lambda-estimation algorithm for bigrams-only mode
	  - actually appears to work better
	+ added build option '--enable-trigrams'
	  - use trigram probabilities in addition to uni- and bigram probabilities
	  - helps with rare (*.tt) and -classfreq medium-rare (*.dmt) tagging
	  - hurts +classfreq medium-rare (*.cmt) tagging
	  - hurts tagging speed in a major way:
	    * rare                   :  7165.76 vs. 120071.95 tok/sec (ca. 17x slower) [-relax]
	    * -classfreq medium-rare : 25648.62 vs.  48529.92 tok/sec (ca.  2x slower) [-relax]
	    * +classfreq medium-rare : 14237.84 vs.  40900.69 tok/sec (ca.  3x slower) [-relax]
	  --> beam-search helps a bit (see below)
	+ added build option '--enable-relax'
	  - 'relaxed' interpretation of pre-analyses:
	     * raises accuracy and speed at the cost of internal coverage
	       (lose "strict" interpretation of pre-analyses)
	     * makes no difference to rare (*.tt) tagging
	     * reduces -classfreq medium-rare (*.dmt) tagging to 'rare' case (hurts)
	     * helps with +classfreq medium-rare (*.cmt) tagging
	+ added build option '--enable-trigram-hash'
	  - use slow but memory-friendly hash for sparse trigram table
	  - only meaningful if '--enable-trigrams=yes'
	+ added beam-pruning a la TnT to mootHMM
	  - speeds things up a bit, with no accuracy loss for default beam-width=1000
	  - now all cookedness flavors uniformly ca. 2x slower with trigrams
	    * this at least sounds theoretically realistic
	+ added pkg-config variable 'build_options'
	  - for easy access to compile-time options for an installed distribution
	+ pre-compute log-probabilities
	  - avoid underflow, and a snippet faster at runtime
	+ reduce storage requirements by storing unigrams as [0][tagid]
	  - i.e. the 'unknown' tag is never valid
	+ renamed '(w|c)lambda(1|2)' to '(w|c)lambda(0|1)'
	  - a bit more intuitive
	
v2.0.1 Fri, 16 Jul 2004 14:02:07 +0200
	+ fixed XML parsing bug which somehow snuck into version 2.0.0

v2.0.0 Fri, 09 Jul 2004 00:18:26 +0200
	+ Documentation and general cleanup
	+ added 'static' binary distribution build target
	  - linker complains about getpwuid() [used by
	    command-line parsers] requiring native glibc...
	+ added famous "no warranty" banner

v2.0.0pre11 Fri, 09 Jul 2004 00:18:21 +0200
	+ Added abstract 'mootio' layer:
	  - replaces old mootBinStream
	  - abstract I/O source/sink wrapper supporting:
	    * C FILE*         : mootCIO.h
	    * C char*         : mootBufferIO.h
	    * zlib gzFile     : mootZIO.h
	    * C++ (i|o)stream : mootCxxIO.h
	  - main justification for not just using C++ streams
	    * we want to keep "real" printf() for C FILE*s and buffers
	  - Upshot:
	    * inheritable from_*() / to_*() methods in lexers, formatters, etc.
	    * just need to wrap calls to mootio::m*stream objects
	+ Added detail-saving for XML input: for best XML->native conversion,
	  use '--output-format=Native,Pretty'
	  - fixes bug:
  	    * Analysis details get lost in default XML output
	      ~ so that after the following:
	          bash$ mootchurn -Inative,wd t.mtt     -Oxml,wd -o t.mtt.xml
	          bash$ mootchurn -Ixml,wd    t.mtt.xml -Oxml,wd -o t.mtt.xml.2
	        't.mtt.xml' is NOT equivalent to 't.mtt.xml.2'
	        (details are missing from the latter)
	+ Added 'tiofConserve' format flag for pseudo-lossless XML
	  - it does NOT work well with 'pretty' mode, but I for one
	    can live with that.
        + Added auto-recognition of filetypes based on filename extensions
	  - Totally overridable by user requests
	+ Added format parsing + guessing to remaining command-line utilities
	+ Added abstract 'moot::GenericLexer' base class for flex++ lexers
	  - should fix a few buffer allocation leaks
	  - see mootGenericLexer.h for details on usage
	
v2.0.0pre10 Mon, 28 Jun 2004 19:36:32 +0200
	+ moved format flag documentation to 'mootfiles(5)'
	  - inaccurate at the moment, since only
	    'mootchurn' supports format flags, but see 
	+ extended XML librecode recoding support
	  - new class 'mootXMLRecoder' in 'mootRecode.h'
	  - fixes bad encoding of XML specials
	    ('&', '<', '>', etc.) by use of two chained
	    mootRecode objects
	    * librecode ought to handle this more elegantly,
	      but since the 'diacritics_only' flag lives
	      in 'RECODE_REQUEST', I just don't grok how
	      to make this happen: maybe it ought to be
	      a surface?
	  - librecode functions are inexplicably
	    always returning false -- return codes
	    are currently passed through but basically
	    ignored, pending further investigation.

v2.0.0pre9 Sun, 27 Jun 2004 22:44:53 +0200
	+ added basic support for xml recoding using librecode
	  - new class 'mootRecoder' in 'mootRecode.h'
	  - added corresponding '--enable-librecode' argument to
	    'configure.in'
	
v2.0.0pre8 Sun, 27 Jun 2004 22:44:53 +0200
	+ wrote and re-wrote XML implementations for libxml2 and expat / fprintf()
	  - currently best-tested: expat
	+ reworked entire I/O layer in the process (aribtrarily
	  ordered events with a single C buffer are way fast,
	  but prickly to handle)
	+ wrote 'mootchurn' utility for format conversion
	  & consistency checking
	+ changed 'mootToken::AnalysisSet' to '...::Analyses' = 'list<Analysis>':
	  much much much faster for pre-analyzed input, and
	  not noticeably slower for text-only input.
	  - fixes bug #n:
	    * find out where all the process time is going in
	      class-based disambig 
  	      ~ it ain't in the find(), as I had thought
	      ~ looks we're ca. 6 times slower just churning
	        a pre-analyzed file with 'sentchurn'
	        + maybe use lists/vectors instead of sets for analyses? --> helps enormously!
	        + break out ID-mappers (i.e. virtual tokens)?
	
v2.0.0pre7 Thu, 17 Jun 2004 16:58:37 +0200
	+ added mootXmlParser.(h|cc) : abstract expat wrapper class
	+ renamed misleading 'mootTokFlavor' to 'mootTokenType',
	+ renamed old 'TokenType' to 'mootTokenFlavor' -- this
	  is more accurate, and The Way Things Should Be.
	+ re-worked mootTokenIO
	  - now with 10% MORE Object Orientation than Ever Before!
	  - i.e. many virtual methods and a biggish hierarchy,
	    hopefully abstract enough to incorporate XML I/O
	  - adding virtuals doesn't seem to have noticeably
	    degraded performance at all (whew)
	+ fixed a bug in mootTokenLexer which was preventing us
	  from actually reading tokens containing spaces
	
v2.0.0pre6 Thu, 10 Jun 2004 01:37:09 +0200
	+ got comment pass-through working: added type
	  'mootTokFlavor' in 'mootToken.h' and instance datum
	  'tok_flavor' to 'mootToken' -- may be 'TF_COMMENT'
	  for comment-tokens: these must be caught and
	  handled by the application when using the
	  mootSentence interface (mootHMM and mootHMMTrainer
	  appear to work properly).
	  - comments also passed through by 'mooteval': this
	    is a serious Pain In The Wazoo, but it might
	    be particularly helpful here.
	+ added '--dots' option to 'moot' : slows things down
	  considerably, but it's a nice bell and/or whistle
	  (nifty tty stuff is prettier in xterm, but emacs
	  don't like it, so i ain't coding it in...)
	
v2.0.0pre5 Sun,  6 Jun 2004 12:07:11 +0200
	+ re-added & tested binary model I/O
	+ added new 'mootcompile' and 'mootdump' programs
	  to clean up 'moot' itself a bit
	+ moved old 'programs/cmdutil.*' and 'programs/hmmutil.*'
	  structs and functions into library: 'mootUtils.h';
	  redefined in terms of 'string'
	+ added high-level mootHMM::load_model() method for
	  single-model load, compilation, and smoothing estimation.
	+ fixed bug causing all fallbacks without 'use_lex_classes'
	+ reworked mootHMM::viterbi_step(tokid,classid,lclass)
	  to use only a single iterator -- tiny bit faster,
	  but relies on 'typedef LexProbSubtable LexClassProbSubtable';
	  not a problem now or in the foreseeable future.
	+ (former todo): optimize class-based tagging: pre-prune classfreqs
	  and merge viterbi_step()s into one iterator-based
	  method ?
	  - nope, we lose either efficiency or strictness
	    with our current data structs: problem are
	    known tokens with known classes -- these would
	    have to be restricted at training time, since
	    after that, we lose the relation between
	    tokens and their classes (in principle, this
	    relation can be dynamic, which is a Feature...)
	  - experimented with this technique in mootHMM:
	    gains us a smidgeon of speed (2K tok/s) and
	    some accuracy, at the cost of internal coverage
	    (read "consistency"), so #ifdef'd it out.
	    * leads to the question where the REAL speed-brake
	      is coming from... class lookup / conversion?
	
v2.0.0pre4 Sun,  6 Jun 2004 02:52:24 +0200
	+ gaspode bughunt
	  - re-added 'uclass' item and threshhold-sensitive
	    uclass compiling (need a populated class for iteration);
	    gained a smidgeon of accuracy:
	    * 94.91% (-classfreqs,-analyses)
	    * 96.30% (-classfreqs,+analyses)
	    * 96.52% (+classfreqs,+analyses)
	  - best results (read: "the above") come (intuitively)
	    when using class-probabilities for totally unknown
	    tokens (i.e. the probabilities associated with
	    the empty class)
	+ added mootHMM flag 'use_lex_classes' : things go way
	  wrong tagging classless inputs if we try and use
	  class probabilities (well, duh...)
	+ removed some debugging code in mootHMM.(h|cc)
	
v2.0.0pre3 Sat, 05 Jun 2004 18:33:07 +0200
	+ renamed 'moothmm' -> 'moot'
	+ added perl script 'morphhack.perl' to make
	  (old) morph output more negra-compatible
	  - raises accuracy on test corpus to
	    * 94.91% (-classfreqs,-analyses)
	    * 96.12% (-classfreqs,+analyses)
	    * 96.51% (+classfreqs,+analyses)
	
v2.0.0pre2 Fri, 04 June 2004 15:49:23 +0200
	+ added class 'mootEval'
	+ added evaluator program 'mooteval' - better than tnt-diff
	+ added verbose information tracking to HMM

	
v2.0.0pre1 Sat, 29 May 2004 01:59:14 +0200
	+ added mootToken.h: mootToken, mootSentence interface classes
  	  - old string-based methods now deprecated
	+ added mootTokenLexer - replaces old 'mootTaggerLexer'
	  - parses new MorphConsole output (with TAB separators, at least)
	+ added mootTokenIO.h : classes mootToken(Reader|Writer)
	  - for file and/or string I/O in native format(s)
	+ (re-)added 'best-only' output as option to moothmm
	+ added best-tag marking with prefix '/' (and removed it again)
	+ fixed some smallish bugs in 'mootrain' causing
	  segfaults when:
	  - "--ngrams-only" or "--lex-only" were given
	  - training corpus filename contained no dot
	+ re-wrote mootNgrams, mootLexfreqs
	  - use nested maps for data: faster
	+ re-wrote mootHMMTrainer
	  - (kmax=3) now hard-coded in (use uni-, bi-, and trigrams)
	  - training from ambiguous data no longer possible
	+ fixed token-typification code (now in mootToken.h)
	  - should now be ca. 99.998% TnT-compatible with moot_TNT_COMPAT
	    macro defined (can't find the last bugger)
	  - Today's Most Annoying Undocumented Feature Award goes to
	    Thorsten Brants for failing to document TnT's (length<=3)
	    restriction for @CARDSUFFIX types
	+ reduced old mootCHMM to mootHMM (still untested)
	+ added class mootClassfreqs : raw class frequency counter (untested)
	+ added mootClassfreqs(Lexer|Parser|Compiler) for
	  lexical-class parameter text I/O
	+ added section 5 manpage 'mootfiles' documenting various
	  file formats
	+ added class-counting to mootHMMTrainer (tests ok)
	+ added class compilation to mootHMM (tests ok)
	  - old mootHMM behavior can be emulated by achieved
	    by removing .clx (class-frequency) file
	+ CHMM behavior reduced to HMM tests OK (good ol' 95.67% correct)
	  - weirdness: gaspode class fixes bungled... must investigate
	
v1.0.5 Fri, 21 May 2004 14:14:31 +0200
  + extracting FSM dependencies to 'mootm' package
	
moot-v1.0.4 Fri, 12 Dec 2003 02:06:59 +0100
  + renamed from 'dwdst' to 'moot'
  + added additional detection routines for libFSM >= v0.1.1.1
  + added --disable-fsm flag to ./configure
  + added placebo classes methods in src/libmoot/mootFSM.h
	- now compiles without libFSM: nothing much interesting works,
	  but at least it compiles...
	
v1.0.3 Tue,  2 Dec 2003 02:13:52 +0100
  + changes for compilation with g++-3.2
    - removed many redundant param-default specifications in non-prototype declarations
    - liberally sprinkled 'typename' keywords where g++ requested them
    - removed 'dopen()' method from [io]ccBinStream -- looks like
      there's no good way to make c++ streams jive with fds: ugly but true.
  + NOTE:
    - problems compiling on helios (RedHat) with a newer version
	of bison++ (i.e. not my 'flex++bison++' package) -- g++ eventually
	pukes with a complaint about 'YY_BUFFER_STATE' not being a defined
	type.  SOLUTION: dropping in 'flexskel.*', 'bison.*' from the native
	flex++ / bison++ distribution(s) seems to have fixed things.
	
v1.0.2 Mon, 25 Aug 2003 04:04:44 +0200
  + added mootHMMTrainer class and executable 'mootrain'
	- names may change to speed things up for fully supervised training
	  with kmax=3
	- Even this API still needs some way to handle unknown tokens for
	  n-gram generation...
  + added namespace 'moot', shoved everything I could into it
	- still global: flex++/bison++ lexers/parsers
	  * couldn't get namespaces to work with these - got
	    alleged conflicts with stdio.h
  + wrote many docs
  + STILL todo:
	- missing a decent string API for mootCHMM ...
	- get GenGetopt::cmdline_[ch] to stop complaining about
	  command-lines overriding config-files...


v1.0.1 Sun, 24 Aug 2003 00:37:25 +0200
  + (mootCHMM::TagMorphMap)s now handled as pointers, analysis-sets
    are stored with corresponding tags in the state-table
  + Added top-level interface structure (mootHMM::ViterbiPathNode*)
  + Still missing:
	- string-set interface to mootCHMM::viterbi_step()
	- *HMM::can_flush() , *HMM::viterbi_flush()
	  ~ ought to be easy to implement
	
v1.0.0 Thu, 21 Aug 2003 13:37:21 +0200
  + new class for morphological analysis: 'mootMorph'
  + new user program for morphology only: 'dwdsm' (replaces old 'moot')
  + new class for morphologically-aware disambiguation: 'mootCHMM'
  + re-wrote 'moot': now uses 'mootCHMM' as base class
  + wrote binary load/save routines for 'mootHMM', 'mootCHMM'
  + added tag-extraction hook-FST to 'mootMorph'
	- just using an identity-FST slows us down ca. 50%
	- maybe fixing a libFSM bug preventing FSA->compose(FST)
	  would help here...
  + tried new morphology, with abominable (accuracy=70%) results
  + TODO:
	- fix new morphology (argh)
	- enable pre-computed tagsets in input files in mootCHMM
	  as for mootHMM (parse dwdsm "TAG:ANALYSIS" format?!)
	  * looks like a job for POSIX regexes...
	
v1.0.0_pre4 Thu, 14 Aug 2003 17:55:48 +0200
  + corrected '-q' syntax for moot, optimized 
    mootTagger::symbol_vector_to_string_dq() method.
  + added class 'mootHMM' for HMM-style tagging/disambiguation
	
Wed Nov 13 16:02:33 CET 2002
  + updated for FSMlib v0.1.0
