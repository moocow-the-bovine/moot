
=pod

=head1 NAME

moottype - moocow's HMM part-of-speech tagger: token type classifier.



=head1 SYNOPSIS

moottype [OPTIONS] INPUT(s)

 Arguments:
    INPUT(s)  Input files / file-lists.

 Options
    -h          --help                      Print help and exit.
    -V          --version                   Print version and exit.
    -cFILE      --rcfile=FILE               Read an alternate configuration file.
    -vLEVEL     --verbose=LEVEL             Verbosity level.
    -l          --list                      INPUTs are file-lists, not filenames.
    -oFILE      --output=FILE               Specify output file (default=stdout).

 Format Options
    -IFORMAT    --input-format=FORMAT       Specify input file(s) format(s).
    -OFORMAT    --output-format=FORMAT      Specify output file format.
                --input-encoding=ENCODING   Override XML document input encoding.
                --output-encoding=ENCODING  Set default XML output encoding.

=cut

###############################################################
# Description
###############################################################
=pod

=head1 DESCRIPTION

moocow's HMM part-of-speech tagger: token type classifier.


'moottype' shows the types of its input tokens, as determined
by compiled-in rules.  Mainly useful for debugging.

It takes as its input one or more 'rare' (-tagged,-analyzed)
or 'medium rare' (-tagged,+analyzed) files and produces a
'medium' (+tagged,-analyzed) or 'well done' (+tagged,+analyzed)
file, respectively.  See L<mootfiles> for details on moot file
formats.


=cut

###############################################################
# Arguments
###############################################################
=pod

=head1 ARGUMENTS

=over 4

=item C<INPUT(s)>

Input files / file-lists.


Input files should be 'cooked' text files
of either the 'rare' (-tagged,-analyzed) or
'medium rare' (-tagged,+analyzed) variety.

See also the '--list' option.

For details on moot file formats, see L<mootfiles>.


=back



=cut


###############################################################
# Options
###############################################################
=pod

=head1 OPTIONS

=over 4

=item C<--help> , C<-h>

Print help and exit.

Default: '0'




=item C<--version> , C<-V>

Print version and exit.

Default: '0'




=item C<--rcfile=FILE> , C<-cFILE>

Read an alternate configuration file.

Default: 'NULL'

See also: L<CONFIGURATION FILES>.




=item C<--verbose=LEVEL> , C<-vLEVEL>

Verbosity level.

Default: '3'


Be more or less verbose.  Recognized values are in the range 0..5:

=over 4

=item 0

Be silent.

=item 1

Print error messages to stderr.

=item 2

Print warnings to stderr.

=item 3

Print summary information to stderr.

=item 4

Print progress information to stderr.

=item 5

Print everything.

=back





=item C<--list> , C<-l>

INPUTs are file-lists, not filenames.

Default: '0'

Useful for large batch-processing jobs.




=item C<--output=FILE> , C<-oFILE>

Specify output file (default=stdout).

Default: '-'




=back

=cut

#--------------------------------------------------------------
# Option-Group Format Options
#--------------------------------------------------------------
=pod

=head2 Format Options

=over 4

=item C<--input-format=FORMAT> , C<-IFORMAT>

Specify input file(s) format(s).

Default: 'NULL'


Value should be a comma-separated list of format flag names,
optionally prefixed with an exclamation point (!) to indicate
negation.

Default='MediumRare'

See 'I/O Format Flags' in L<mootfiles> for details.





=item C<--output-format=FORMAT> , C<-OFORMAT>

Specify output file format.

Default: 'NULL'


Value should be a comma-separated list of format flag names,
optionally prefixed with an exclamation point (!) to indicate
negation.

Default='WellDone'

See 'I/O Format Flags' in L<mootfiles> for details.





=item C<--input-encoding=ENCODING>

Override XML document input encoding.

Default: 'NULL'


Potentially useful for XML documents without encoding declarations.





=item C<--output-encoding=ENCODING>

Set default XML output encoding.

Default: 'NULL'


Slower, but potentially useful for human-readable XML output.





=back




=cut

###############################################################
# configuration files
###############################################################
=pod

=head1 CONFIGURATION FILES

Configuration files are expected to contain lines of the form:

    LONG_OPTION_NAME    OPTION_VALUE

where LONG_OPTION_NAME is the long name of some option,
without the leading '--', and OPTION_VALUE is the value for
that option, if any.  Fields are whitespace-separated.
Blank lines and comments (lines beginning with '#')
are ignored.

The following configuration files are read by default:

=over 4

=item * /etc/moottyperc

=item * ~/.moottyperc

=back

=cut



###############################################################
# Addenda
###############################################################
=pod

=head1 ADDENDA



=head2 About this Document

Documentation file auto-generated by optgen.perl version 0.06
using Getopt::Gen version 0.13.
Translation was initiated
as:

   optgen.perl -l --nocfile --nohfile --notimestamp -F moottype moottype.gog

=cut


###############################################################
# Bugs
###############################################################
=pod

=head1 BUGS AND LIMITATIONS



None known.



=cut

###############################################################
# Footer
###############################################################
=pod

=head1 ACKNOWLEDGEMENTS


Development of this package was supported by the project
'Kollokationen im WE<ouml>rterbuch'
( "collocations in the dictionary", http://www.bbaw.de/forschung/kollokationen )
in association with the project
'Digitales WE<ouml>rterbuch der deutschen Sprache des 20. Jahrhunderts (DWDS)'
( "digital dictionary of the German language of the 20th century", http://www.dwds.de )
at the Berlin-Brandenburgische Akademie der Wissenschaften ( http://www.bbaw.de )
with funding from
the Alexander von Humboldt Stiftung ( http://www.avh.de )
and from the Zukunftsinvestitionsprogramm of the
German federal government.

I am grateful to Christiane Fellbaum, Alexander Geyken,
Gerald Neumann, Edmund Pohl, Alexey Sokirko, and others
for offering useful insights in the course of development
of this package.

Thomas Hanneforth wrote and maintains the libFSM C++ library
for finite-state device operations used by the
class-based HMM tagger / disambiguator, without which
this package could not have been built.

Alexander Geyken and Thomas Hanneforth developed the
rule-based morphological analysis system for German
which was used in the development and testing of the
class-based HMM tagger / disambiguator.


=head1 AUTHOR

Bryan Jurish E<lt>moocow@ling.uni-potsdam.deE<gt>

=head1 SEE ALSO


L<moot>
L<mootfiles>
L<mootpp>,
mootm(1),
L<mootrain>,
L<mootcompile>,
L<mootdump>,
L<mooteval>,


=cut


