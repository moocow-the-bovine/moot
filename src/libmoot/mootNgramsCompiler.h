/* -*- Mode: C++ -*- */

/*
   libmoot : moocow's part-of-speech tagging library
   Copyright (C) 2003-2009 by Bryan Jurish <moocow@ling.uni-potsdam.de>

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.
   
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.
   
   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*/

/*============================================================================
 * File: mootNgramsCompiler.h
 * Author:  Bryan Jurish <moocow@ling.uni-potsdam.de>
 * Description:
 *    Compiler for TnT parameter files for moot PoS tagger
 *============================================================================*/

/**
\file mootNgramsCompiler.h
\brief Compiler for n-gram frequency parameter files 
*/

#ifndef _moot_NGRAMS_COMPILER_H
#define _moot_NGRAMS_COMPILER_H

#include "mootNgramsLexer.h"
//#include "mootNgramsParser.h" //-- used by mootNgramsLexer.h

moot_BEGIN_NAMESPACE

/**
 * mootNgramsCompiler compiles n-gram parameter files into
 * internal frequency tables, using a lexer/parser pair generated by
 * Alain Coetmeur's flex++ and bison++ programs.
 *
 * \brief N-gram parameter-file compiler.
 */
class mootNgramsCompiler : public mootNgramsParser {
 public:
  // -- public data
  /** flex++ lexer object */
  mootNgramsLexer theLexer;

  /**
   * objname: name to use for object when reporting errors -- default: "mootNgramsCompiler"
   * \b Warning: no copying is performed on this string; you must alloc&free it yourself!
   */
  const char *objname;

  /**
   * srcname: name to use for current file when reporting errors -- default: "(unknown)"
   * \b Warning: no copying is performed on this string; you must alloc&free it yourself!
   */
  const char *srcname;

 public:
  // -- public methods: CONSTRUCTORS / DESTRUCTORS
  /** Default constructor */
  mootNgramsCompiler() : objname(NULL), srcname(NULL) {};
  /** Default destructor */
  virtual ~mootNgramsCompiler() {};

  // -- high-level parsing methods

  /** parse n-gram parameters from a C-stream.  Returns NULL on error. */
  inline mootNgrams *parse_from_file(FILE *file, const char *filename=NULL) {
      select_streams(file,stdout);
      return parse_ngrams();
  };

  /** parse one regular expression from a C-string.  Returns NULL on error. */
  inline mootNgrams *parse_from_string(const char *string, const char *srcname=NULL) {
    select_string(string,srcname);
    return parse_ngrams();
  };

  // -- low-level public methods: INPUT SELECTION
  /** low-level input selection: input from a C-stream. */
  void select_streams(FILE *in, FILE *out, const char *my_srcname=NULL) {
    theLexer.select_streams(in,out);
    srcname = my_srcname;
  };

  /**
   * low-level input selection: input from a C-string.
   * \b WARNING: do NOT free the string 'in' until parsing has finished!
   */
  void select_string(const char *in, const char *my_srcname=NULL) {
    theLexer.select_string(in);
    srcname = my_srcname;
  };

  // -- low-level public methods: PARSING
  virtual int yylex();

  /**
   * low-level parsing method: parse all remaining n-grams
   * from the currently selected input source.
   */
  mootNgrams *parse_ngrams();

  // -- low-level public methods: ERRORS & WARNINGS
  /** yyerror: report parse errors. */
  virtual void yyerror(const char *msg);

  /** yywarn: report parse warnings. */
  virtual void yywarn(const char *msg);
};


moot_END_NAMESPACE

#endif /* _moot_NGRAMS_COMPILER_H */
