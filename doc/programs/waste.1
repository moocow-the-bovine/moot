.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WASTE 1"
.TH WASTE 1 "2017-03-21" "moot v2.0.15-1" "moot PoS Tagger"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
waste \- Word\- and Sentence\-Token Extractor using a Hidden Markov Model
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
waste [\s-1OPTIONS\s0] \s-1FILE\s0(s)
.PP
.Vb 2
\& Arguments:
\&    FILE(s)  Input files
\&
\& Options
\&    \-h        \-\-help                  Print help and exit.
\&    \-V        \-\-version               Print version and exit.
\&    \-cFILE    \-\-rcfile=FILE           Read an alternate configuration file.
\&    \-vLEVEL   \-\-verbose=LEVEL         Verbosity level.
\&    \-B        \-\-no\-banner             Suppress initial banner message (implied at verbosity levels <= 2)
\&    \-l        \-\-list                  Arguments are input\-file lists.
\&    \-r        \-\-recover               Attempt to recover from minor errors.
\&    \-oFILE    \-\-output=FILE           Write output to FILE.
\&
\& Mode Options
\&    \-f        \-\-full                  Alias for \-\-scan \-\-lex \-\-tag \-\-decode \-\-annotate (default)
\&    \-R        \-\-train                 Training mode (similar to \-\-lex)
\&    \-s        \-\-scan                  Enable raw text scanning stage.
\&    \-S        \-\-no\-scan               Disable raw text scanning stage.
\&    \-x        \-\-lex                   Enable lexical classification stage.
\&    \-X        \-\-no\-lex                Disable lexical classification stage.
\&    \-t        \-\-tag                   Enable HMM Viterbi tagging stage.
\&    \-T        \-\-no\-tag                Disable HMM Viterbi tagging stage.
\&    \-d        \-\-decode                Enable post\-Viterbi decoding stage.
\&    \-D        \-\-no\-decode             Disable post\-Viterbi decoding stage.
\&    \-n        \-\-annotate              Enable text\-based annotation stage.
\&    \-N        \-\-no\-annotate           Disable text\-based annotation stage.
\&
\& Lexer Options
\&    \-aFILE    \-\-abbrevs=FILE          Load abbreviation lexicon from FILE (1 word/line)
\&    \-jFILE    \-\-conjunctions=FILE     Load conjunction lexicon from FILE (1 word/line)
\&    \-wFILE    \-\-stopwords=FILE        Load stopword lexicon from FILE (1 word/line)
\&    \-y        \-\-dehyphenate           Enable automatic dehyphenation in lexer (default)
\&    \-Y        \-\-no\-dehyphenate        Disable automatic dehyphenation in lexer.
\&
\& HMM Options
\&    \-MMODEL   \-\-model=MODEL           Use HMM tokenizer model MODEL.
\&
\& Format Options
\&    \-IFORMAT  \-\-input\-format=FORMAT   Specify input or \-\-scan mode format
\&    \-OFORMAT  \-\-output\-format=FORMAT  Specify output file format.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Word\- and Sentence-Token Extractor using a Hidden Markov Model
.PP
waste is the top-level command-line interface to the moot/WASTE \s-1HMM\s0 tokenizer system.
It can be used as a complete tokenization pipeline (\-\-full, the default),
as an annotator for pre-tokenized training corpora (\-\-train),
or as a standalone scanner (\-\-scan),
lexical encoder (\-\-lex),
\&\s-1HMM\s0 disambiguator (\-\-tag),
lexical decoder (\-\-decode),
lexical annotator (\-\-annotate),
or as (almost) any coherent combination  of the above components.
Input and output formats depend on the chosen mode of operation; in the default (\-\-full) mode,
it takes as input one or more 'raw' files, and produces a 'medium\-rare' output file whose analyses
correspond to those returned by the dwds_tomasotath v0.4.x series of tokenizers.
See mootfiles for details on moot file formats.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.ie n .IP "FILE(s)" 4
.el .IP "\f(CWFILE(s)\fR" 4
.IX Item "FILE(s)"
Input files
.Sp
See also the \-\-list option.
.SH "OPTIONS"
.IX Header "OPTIONS"
.ie n .IP """\-\-help"" , ""\-h""" 4
.el .IP "\f(CW\-\-help\fR , \f(CW\-h\fR" 4
.IX Item "--help , -h"
Print help and exit.
.Sp
Default: '0'
.ie n .IP """\-\-version"" , ""\-V""" 4
.el .IP "\f(CW\-\-version\fR , \f(CW\-V\fR" 4
.IX Item "--version , -V"
Print version and exit.
.Sp
Default: '0'
.ie n .IP """\-\-rcfile=FILE"" , ""\-cFILE""" 4
.el .IP "\f(CW\-\-rcfile=FILE\fR , \f(CW\-cFILE\fR" 4
.IX Item "--rcfile=FILE , -cFILE"
Read an alternate configuration file.
.Sp
Default: '\s-1NULL\s0'
.Sp
See also: \*(L"\s-1CONFIGURATION FILES\*(R"\s0.
.ie n .IP """\-\-verbose=LEVEL"" , ""\-vLEVEL""" 4
.el .IP "\f(CW\-\-verbose=LEVEL\fR , \f(CW\-vLEVEL\fR" 4
.IX Item "--verbose=LEVEL , -vLEVEL"
Verbosity level.
.Sp
Default: '3'
.Sp
Be more or less verbose.  Recognized values are in the range 0..6:
.RS 4
.IP "0 (silent)" 4
.IX Item "0 (silent)"
Disable all diagnostic messages.
.IP "1 (errors)" 4
.IX Item "1 (errors)"
Print error messages to stderr.
.IP "2 (warnings)" 4
.IX Item "2 (warnings)"
Print warnings to stderr.
.IP "3 (info)" 4
.IX Item "3 (info)"
Print general diagnostic information to stderr.
.IP "4 (progress)" 4
.IX Item "4 (progress)"
Print progress information to stderr.
.IP "5 (debug)" 4
.IX Item "5 (debug)"
Print debugging information to stderr (if applicable).
.IP "6 (trace)" 4
.IX Item "6 (trace)"
Print execution trace information to stderr (if applicable).
.RE
.RS 4
.RE
.ie n .IP """\-\-no\-banner"" , ""\-B""" 4
.el .IP "\f(CW\-\-no\-banner\fR , \f(CW\-B\fR" 4
.IX Item "--no-banner , -B"
Suppress initial banner message (implied at verbosity levels <= 2)
.Sp
Default: '0'
.ie n .IP """\-\-list"" , ""\-l""" 4
.el .IP "\f(CW\-\-list\fR , \f(CW\-l\fR" 4
.IX Item "--list , -l"
Arguments are input-file lists.
.Sp
Default: '0'
.Sp
If this flag is given, the \s-1FILE\s0(s) arguments should be lists
of input filenames, one filename per line, which should be
processed.  Otherwise, the \s-1FILE\s0(s) arguments are interpreted
as filenames of the input files themselves.
.ie n .IP """\-\-recover"" , ""\-r""" 4
.el .IP "\f(CW\-\-recover\fR , \f(CW\-r\fR" 4
.IX Item "--recover , -r"
Attempt to recover from minor errors.
.Sp
Default: '0'
.Sp
Minor errors such as missing files, etc. cause an error message to be
emitted but do not cause the program to abort if this option is specified.
Useful for large automated batch-processing jobs.
.ie n .IP """\-\-output=FILE"" , ""\-oFILE""" 4
.el .IP "\f(CW\-\-output=FILE\fR , \f(CW\-oFILE\fR" 4
.IX Item "--output=FILE , -oFILE"
Write output to \s-1FILE.\s0
.Sp
Default: '\-'
.Sp
Output files are in 'rare' format: one token per line, a blank line
indicates a sentence boundary.
.SS "Mode Options"
.IX Subsection "Mode Options"
.ie n .IP """\-\-full"" , ""\-f""" 4
.el .IP "\f(CW\-\-full\fR , \f(CW\-f\fR" 4
.IX Item "--full , -f"
Alias for \-\-scan \-\-lex \-\-tag \-\-decode \-\-annotate (default)
.Sp
Default: '0'
.ie n .IP """\-\-train"" , ""\-R""" 4
.el .IP "\f(CW\-\-train\fR , \f(CW\-R\fR" 4
.IX Item "--train , -R"
Training mode (similar to \-\-lex)
.Sp
Default: '0'
.Sp
Runs the \s-1WASTE\s0 scanner and lexer item-wise on pre-tokenized input,
which must contain token text with leading whitespace where appropriate.
Embedded special characters can be escaped with backslashes
(e.g. \f(CW\*(C`\en\*(C'\fR, \f(CW\*(C`\er\*(C'\fR, \f(CW\*(C`\et\*(C'\fR, \f(CW\*(C`\ef\*(C'\fR, \f(CW\*(C`\ev\*(C'\fR, \f(CW\*(C`\e\e\*(C'\fR, and \f(CW\*(C`\e\e \*(C'\fR),
and any input tokens are truncated at a \f(CW $= \fR substring if present.
Output is in 'well\-done' format suitable for passing to mootrain.
Overrides any other other runtime mode options.
.ie n .IP """\-\-scan"" , ""\-s""" 4
.el .IP "\f(CW\-\-scan\fR , \f(CW\-s\fR" 4
.IX Item "--scan , -s"
Enable raw text scanning stage.
.Sp
Default: '0'
.ie n .IP """\-\-no\-scan"" , ""\-S""" 4
.el .IP "\f(CW\-\-no\-scan\fR , \f(CW\-S\fR" 4
.IX Item "--no-scan , -S"
Disable raw text scanning stage.
.Sp
Default: '0'
.ie n .IP """\-\-lex"" , ""\-x""" 4
.el .IP "\f(CW\-\-lex\fR , \f(CW\-x\fR" 4
.IX Item "--lex , -x"
Enable lexical classification stage.
.Sp
Default: '0'
.Sp
If lexer stage is enabled, you should also specify \-\-abbrevs, \-\-conjunctions, and/or \-\-stopwords
as appropriate for your model.
.ie n .IP """\-\-no\-lex"" , ""\-X""" 4
.el .IP "\f(CW\-\-no\-lex\fR , \f(CW\-X\fR" 4
.IX Item "--no-lex , -X"
Disable lexical classification stage.
.Sp
Default: '0'
.ie n .IP """\-\-tag"" , ""\-t""" 4
.el .IP "\f(CW\-\-tag\fR , \f(CW\-t\fR" 4
.IX Item "--tag , -t"
Enable \s-1HMM\s0 Viterbi tagging stage.
.Sp
Default: '0'
.Sp
Requires \-\-model option.
.ie n .IP """\-\-no\-tag"" , ""\-T""" 4
.el .IP "\f(CW\-\-no\-tag\fR , \f(CW\-T\fR" 4
.IX Item "--no-tag , -T"
Disable \s-1HMM\s0 Viterbi tagging stage.
.Sp
Default: '0'
.ie n .IP """\-\-decode"" , ""\-d""" 4
.el .IP "\f(CW\-\-decode\fR , \f(CW\-d\fR" 4
.IX Item "--decode , -d"
Enable post-Viterbi decoding stage.
.Sp
Default: '0'
.ie n .IP """\-\-no\-decode"" , ""\-D""" 4
.el .IP "\f(CW\-\-no\-decode\fR , \f(CW\-D\fR" 4
.IX Item "--no-decode , -D"
Disable post-Viterbi decoding stage.
.Sp
Default: '0'
.ie n .IP """\-\-annotate"" , ""\-n""" 4
.el .IP "\f(CW\-\-annotate\fR , \f(CW\-n\fR" 4
.IX Item "--annotate , -n"
Enable text-based annotation stage.
.Sp
Default: '0'
.ie n .IP """\-\-no\-annotate"" , ""\-N""" 4
.el .IP "\f(CW\-\-no\-annotate\fR , \f(CW\-N\fR" 4
.IX Item "--no-annotate , -N"
Disable text-based annotation stage.
.Sp
Default: '0'
.SS "Lexer Options"
.IX Subsection "Lexer Options"
.ie n .IP """\-\-abbrevs=FILE"" , ""\-aFILE""" 4
.el .IP "\f(CW\-\-abbrevs=FILE\fR , \f(CW\-aFILE\fR" 4
.IX Item "--abbrevs=FILE , -aFILE"
Load abbreviation lexicon from \s-1FILE \s0(1 word/line)
.Sp
Default: '\s-1NULL\s0'
.Sp
Only meaningful if \-\-lex is enabled.
.ie n .IP """\-\-conjunctions=FILE"" , ""\-jFILE""" 4
.el .IP "\f(CW\-\-conjunctions=FILE\fR , \f(CW\-jFILE\fR" 4
.IX Item "--conjunctions=FILE , -jFILE"
Load conjunction lexicon from \s-1FILE \s0(1 word/line)
.Sp
Default: '\s-1NULL\s0'
.Sp
Only meaningful if \-\-lex is enabled.
.ie n .IP """\-\-stopwords=FILE"" , ""\-wFILE""" 4
.el .IP "\f(CW\-\-stopwords=FILE\fR , \f(CW\-wFILE\fR" 4
.IX Item "--stopwords=FILE , -wFILE"
Load stopword lexicon from \s-1FILE \s0(1 word/line)
.Sp
Default: '\s-1NULL\s0'
.Sp
Only meaningful if \-\-lex is enabled.
.ie n .IP """\-\-dehyphenate"" , ""\-y""" 4
.el .IP "\f(CW\-\-dehyphenate\fR , \f(CW\-y\fR" 4
.IX Item "--dehyphenate , -y"
Enable automatic dehyphenation in lexer (default)
.Sp
Default: '1'
.Sp
Only meaningful if \-\-lex is enabled.
.ie n .IP """\-\-no\-dehyphenate"" , ""\-Y""" 4
.el .IP "\f(CW\-\-no\-dehyphenate\fR , \f(CW\-Y\fR" 4
.IX Item "--no-dehyphenate , -Y"
Disable automatic dehyphenation in lexer.
.Sp
Default: '0'
.Sp
Only meaningful if \-\-lex is enabled.
.SS "\s-1HMM\s0 Options"
.IX Subsection "HMM Options"
.ie n .IP """\-\-model=MODEL"" , ""\-MMODEL""" 4
.el .IP "\f(CW\-\-model=MODEL\fR , \f(CW\-MMODEL\fR" 4
.IX Item "--model=MODEL , -MMODEL"
Use \s-1HMM\s0 tokenizer model \s-1MODEL.\s0
.Sp
Default: 'waste.hmm'
.Sp
See '\s-1HMM MODEL FILE FORMATS\s0' in mootfiles for details on model file formats.
This option is intended to be used with a pre-compiled binary model.  If you
need to set addtitional runtime options, you should call \f(CW\*(C`moot\*(C'\fR directly
in a pipeline, e.g.
.Sp
.Vb 5
\&  waste \-\-scan \-Or,loc INFILE.txt \e\e
\&  | waste \-\-lex \-aabbr.lex \-jconj.lex \-wstop.lex \-Ir,loc \-Omr,loc \- \e\e
\&  | moot  \-\-stream \-\-model=MODEL \-\-beam\-width=100 \-Imr,loc \-Owd,loc \- \e\e
\&  | waste \-\-decode \-Iwd,loc \-Om,loc \e\e
\&  | waste \-\-annotate \-Im,loc \-Omr,loc \-o OUTFILE.mr
.Ve
.SS "Format Options"
.IX Subsection "Format Options"
.ie n .IP """\-\-input\-format=FORMAT"" , ""\-IFORMAT""" 4
.el .IP "\f(CW\-\-input\-format=FORMAT\fR , \f(CW\-IFORMAT\fR" 4
.IX Item "--input-format=FORMAT , -IFORMAT"
Specify input or \-\-scan mode format
.Sp
Default: '\s-1NULL\s0'
.Sp
Value should be a comma-separated list of format flag names,
optionally prefixed with an exclamation point (!) to indicate
negation.  Only meaningful if the scanner stage has been
disabled with the \-no\-scan (\-S) option.
.Sp
Default value depends on the \fBfirst\fR enabled processing module:
.Sp
.Vb 6
\& \-\-scan     : \*(AqNone\*(Aq
\& \-\-lex      : \*(AqText\*(Aq
\& \-\-tag      : \*(AqText,Analyzed\*(Aq
\& \-\-decode   : \*(AqText,Analyzed,Tagged\*(Aq
\& \-\-annotate : \*(AqText\*(Aq
\& \-\-train    : \*(AqText\*(Aq
.Ve
.Sp
See 'I/O Format Flags' in mootfiles for details.
.ie n .IP """\-\-output\-format=FORMAT"" , ""\-OFORMAT""" 4
.el .IP "\f(CW\-\-output\-format=FORMAT\fR , \f(CW\-OFORMAT\fR" 4
.IX Item "--output-format=FORMAT , -OFORMAT"
Specify output file format.
.Sp
Default: '\s-1NULL\s0'
.Sp
Value should be a comma-separated list of format flag names,
optionally prefixed with an exclamation point (!) to indicate
negation.
.Sp
Default value depends on the \fBlast\fR enabled processing module:
.Sp
.Vb 6
\& \-\-scan     : \*(AqText\*(Aq
\& \-\-lex      : \*(AqText,Analyzed\*(Aq
\& \-\-tag      : \*(AqText,Tagged\*(Aq
\& \-\-decode   : \*(AqText\*(Aq
\& \-\-annotate : \*(AqText,Analyzed\*(Aq
\& \-\-train    : \*(AqText,Analyzed,Tagged\*(Aq
.Ve
.Sp
See 'I/O Format Flags' in mootfiles for details.
.SH "CONFIGURATION FILES"
.IX Header "CONFIGURATION FILES"
Configuration files are expected to contain lines of the form:
.PP
.Vb 1
\&    LONG_OPTION_NAME    OPTION_VALUE
.Ve
.PP
where \s-1LONG_OPTION_NAME\s0 is the long name of some option,
without the leading '\-\-', and \s-1OPTION_VALUE\s0 is the value for
that option, if any.  Fields are whitespace-separated.
Blank lines and comments (lines beginning with '#')
are ignored.
.PP
No configuration files are read by default.
.SH "ADDENDA"
.IX Header "ADDENDA"
.SS "Caveats"
.IX Subsection "Caveats"
The \-\-scan and \-\-lex modules require that text data is encoded in \s-1UTF\-8.\s0
.SS "About this Document"
.IX Subsection "About this Document"
Documentation file auto-generated by optgen.perl version 0.07
using Getopt::Gen version 0.14.
Translation was initiated
as:
.PP
.Vb 1
\&   optgen.perl \-l \-\-nocfile \-\-nohfile \-\-notimestamp \-F waste waste.gog
.Ve
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Unknown.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Initial development of the this was supported by the project
\&'Kollokationen im Wo\*:rterbuch'
( \*(L"collocations in the dictionary\*(R", http://www.bbaw.de/forschung/kollokationen )
in association with the project
\&'Digitales Wo\*:rterbuch der deutschen Sprache des 20. Jahrhunderts (\s-1DWDS\s0)'
( \*(L"digital dictionary of the German language of the 20th century\*(R", http://www.dwds.de )
at the Berlin-Brandenburgische Akademie der Wissenschaften ( http://www.bbaw.de )
with funding from
the Alexander von Humboldt Stiftung ( http://www.avh.de )
and from the Zukunftsinvestitionsprogramm of the
German federal government.
Development of the DynHMM and \s-1WASTE\s0 extensions was
supported by the DFG-funded projects
\&'Deutsches Textarchiv' ( \*(L"German text archive\*(R", http://www.deutschestextarchiv.de )
and '\s-1DLEX\s0'
at the Berlin-Brandenburgische Akademie der Wissenschaften.
.PP
The authors are grateful to Christiane Fellbaum, Alexander Geyken,
Gerald Neumann, Edmund Pohl, Alexey Sokirko, and others
for offering useful insights in the course of development
of this package.
Thomas Hanneforth wrote and maintains the libFSM \*(C+ library
for finite-state device operations used by the
class-based \s-1HMM\s0 tagger / disambiguator, without which
moot could not have been built.
Alexander Geyken and Thomas Hanneforth developed the
rule-based morphological analysis system for German
which was used in the development and testing of the
class-based \s-1HMM\s0 tagger / disambiguator.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bryan Jurish <moocow@cpan.org> and Kay-Michael Wu\*:rzner <wuerzner@bbaw.de>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImoot\fR\|(1),
\&\fImootrain\fR\|(1),
\&\fImootcompile\fR\|(1),
mootfiles,
moot,
mootchurn
