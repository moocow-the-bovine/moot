#define YY_CHAR unsigned char
#line 1 "/usr/local/share/flex++bison++/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header$
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, stderr ); \
		(void) putc( '\n', stderr ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "mootPPLexer.ll"
#define INITIAL 0
/*-*- Mode: Flex++ -*-*/
/*
   libmoot : moocow's part-of-speech tagging library
   Copyright (C) 2003-2004 by Bryan Jurish <moocow@ling.uni-potsdam.de>

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
/*----------------------------------------------------------------------
 * Name: mootPPLexer.ll
 * Author: Bryan Jurish <moocow@ling.uni-potsdam.de>
 * Description:
 *   + preprocessor for the KDWDS tagger
 *   + based on 'Bbaw.l' by Thomas Hanneforth
 *   + process with Coetmeur's flex++ to produce 'moot_lexer.cc'
 *----------------------------------------------------------------------*/
/* --- Lexer name --- */
#define YY_mootPPLexer_FLEX_SCANNER
#line 49 "mootPPLexer.ll"
//#include <string>
#include <mootTypes.h>
/*----------------------------------------------------------------------
 * Definitions
 *----------------------------------------------------------------------*/
/*----------------------------------------------------------------------
 * Rules
 *----------------------------------------------------------------------*/
#include "mootPPLexer.h"
#line 130 "mootPPLexer.ll"
#line 196 "/usr/local/share/flex++bison++/flexskel.cc"

#define yy___text YY_mootPPLexer_TEXT
#define yy___leng YY_mootPPLexer_LENG
#define yy___in YY_mootPPLexer_IN
#define yy___out YY_mootPPLexer_OUT
#define yy___newfile \
	do \
		{ \
		YY_mootPPLexer_INIT_BUFFER( yy_current_buffer, yy___in ); \
		YY_mootPPLexer_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_mootPPLexer_DEBUG != 0
#define yy___flex_debug YY_mootPPLexer_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_mootPPLexer_ECHO
#define yy___input YY_mootPPLexer_INPUT
#define yy___fatal_error YY_mootPPLexer_FATAL_ERROR
#define yy___wrap YY_mootPPLexer_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_mootPPLexer_CHAR *yy_ch_buf;               /* input buffer */
    YY_mootPPLexer_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_mootPPLexer_DEBUG != 0
int YY_mootPPLexer_DEBUG_FLAG=YY_mootPPLexer_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER yy_current_buffer
static YY_BUFFER_STATE yy_current_buffer;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_mootPPLexer_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_mootPPLexer_CHAR *yy___text;
int yy___leng;

FILE *yy___in = (FILE *) 0, *yy___out = (FILE *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_mootPPLexer_CHAR *yy_c_buf_p = (YY_mootPPLexer_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_mootPPLexer_CHAR c, YY_mootPPLexer_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_mootPPLexer_ECHO_NOCODE
void YY_mootPPLexer_CLASS::yy___echo()
{YY_mootPPLexer_ECHO_CODE
}
#endif
#ifndef YY_mootPPLexer_INPUT_NOCODE
int  YY_mootPPLexer_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_mootPPLexer_INPUT_CODE
}
#endif
#ifndef YY_mootPPLexer_FATAL_ERROR_NOCODE
void YY_mootPPLexer_CLASS::yy___fatal_error(char *msg)
{YY_mootPPLexer_FATAL_ERROR_CODE
}
#endif
#ifndef YY_mootPPLexer_WRAP_NOCODE
int  YY_mootPPLexer_CLASS::yy___wrap()
{YY_mootPPLexer_WRAP_CODE
}
#endif
void YY_mootPPLexer_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 yy_current_buffer=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_mootPPLexer_DEBUG != 0
 YY_mootPPLexer_DEBUG_FLAG=YY_mootPPLexer_DEBUG_INIT;
#endif
}

YY_mootPPLexer_CLASS::YY_mootPPLexer_CLASS(YY_mootPPLexer_CONSTRUCTOR_PARAM) YY_mootPPLexer_CONSTRUCTOR_INIT
{yy_initialize();
 YY_mootPPLexer_CONSTRUCTOR_CODE;
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 64
typedef int yy_state_type;
static const short int yy_accept[279] =
    {   0,
        0,    0,   64,   61,   59,   60,   60,   56,   61,   61,
       58,   53,    7,    7,    7,    7,   57,   54,   61,   55,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    0,    0,    0,    7,    8,    7,    0,    7,    7,
        0,    0,    0,    0,    0,    0,    0,   12,   12,   12,
       12,   12,    0,   12,   12,   12,   12,   12,    0,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   49,   12,
        0,   48,   12,   12,    0,    0,    0,    0,    8,    8,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    2,    0,    0,    1,    0,   11,
       12,   12,   12,   12,    0,   24,   12,   33,   12,   12,
        0,   12,   39,   12,   12,   43,   45,   12,   12,   12,
       12,   36,    0,    0,   44,    0,    0,   12,   12,   12,
        0,    0,    4,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        3,    1,    9,    0,   19,   21,   20,   23,   22,    0,
        0,    0,    0,    0,   35,    0,   37,    0,   12,   40,
       12,   13,   16,   31,   32,   46,   17,   47,   18,   15,
       14,   52,   50,   51,    0,    0,    6,    6,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
        0,    0,    0,    0,    0,    0,    0,   42,   12,    5,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   38,   41,    6,    0,    0,    0,
        0,    0,    0,    0,    0,   25,   28,    0,    0,    0,
        0,    0,    0,    0,    0,   26,    0,   30,   34,    0,
        0,    0,    0,    0,    0,   27,   29,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    1,    7,    1,    1,
        1,    1,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   17,   17,   17,   17,   17,   18,   19,   20,
        1,   21,   22,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       30,   39,   40,   41,   42,   43,   30,   30,   30,   44,
        1,    1,    1,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   30,   62,   63,   64,   65,   66,   67,   30,
       30,   68,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   69,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   70,    1,    1,    1,    1,    1,   71,
        1,    1,   72,   73,   74,    1,    1,   75,    1,    1,
        1,   76,   77,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   78,    1,    1,    1,    1,
        1,   79,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[80] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6
    } ;

static const short int yy_base[286] =
    {   0,
        0,    0,  790,  791,  791,  791,  791,  791,   74,   72,
       77,   82,   91,  100,  111,  120,  791,  791,  127,  791,
       91,  779,   93,  108,  100,  111,  102,  131,  130,  120,
      133,  134,  138,  137,  141,  144,  142,  146,  150,  148,
      152,  164,  742,  181,  195,  201,  210,  226,  220,  279,
      160,  187,  296,  735,  753,  146,  770,  757,  173,  164,
      181,  176,  705,  236,  220,  245,  222,  366,  708,  367,
      368,  243,  249,  254,  370,  371,  373,  259,  201,  263,
      691,  706,  372,  375,  360,  373,  688,  380,  389,  396,
      429,  387,  364,  371,  405,  403,  362,  394,  403,  444,

      466,  480,  489,  729,  791,    0,  728,  791,    0,  268,
      269,  406,  423,  425,  737,  454,  452,  791,  456,  458,
      736,  428,  791,  463,  461,  791,  791,  506,  509,  511,
      513,  791,  735,  734,  791,  733,  732,  516,  518,  520,
      681,  680,  791,  632,  521,  528,  673,  531,  436,  503,
      440,  516,  513,  517,  521,  515,  513,  516,  520,  572,
      791,  791,    0,    0,  791,  791,  791,  791,  791,  634,
      649,  593,  582,  578,  791,  620,  791,  604,  549,  791,
      551,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  606,  582,  791,  551,  559,  558,

      551,  580,  562,  581,  583,  561,  595,  596,  597,    0,
      565,  567,  509,  464,  438,  452,  475,  791,  599,  791,
      633,  638,  569,  655,  571,  660,  581,  665,  576,  597,
      681,  686,  691,  586,  707,  612,  712,  636,  404,  407,
      397,  389,  230,  221,  791,  791,  702,  623,  642,  667,
      671,  687,  685,  695,  256,  791,  791,  225,  188,  178,
      704,  693,  709,  698,  714,  146,  107,  791,  791,  700,
      701,  714,  153,   73,  703,  791,  791,  791,  763,  765,
       77,  770,  776,  778,  780
    } ;

static const short int yy_def[286] =
    {   0,
      278,    1,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  279,  278,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      279,  281,  278,   53,   53,   53,  282,  280,  280,  280,
      280,  280,  278,  280,  280,  280,  280,  280,  278,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  278,  280,
      278,  278,  280,  280,  278,  278,  278,   48,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  281,

      281,  281,  281,  283,  278,   53,   53,  278,  284,  282,
      280,  280,  280,  280,  278,  278,  280,  278,  280,  280,
      278,  280,  278,  280,  280,  278,  278,  280,  280,  280,
      280,  278,  278,  278,  278,  278,  278,  280,  280,  280,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  284,  285,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  280,  278,
      280,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  285,
      278,  278,  278,  278,  278,  278,  278,  278,  280,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,    0,  278,  278,
      278,  278,  278,  278,  278
    } ;

static const short int yy_nxt[871] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   10,
       12,    4,   13,   14,   14,   15,   16,   17,   18,   19,
        4,   20,   21,   22,   23,   24,   22,   22,   22,   22,
       25,   22,   26,   27,   28,   29,   22,   30,   22,   22,
       22,   22,   22,   22,    4,   22,   31,   22,   32,   33,
       22,   34,   22,   22,   22,   22,   35,   22,   22,   36,
       37,   22,   38,   22,   39,   40,   22,   41,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   42,
       44,  100,   44,  277,   45,   45,   45,   45,   45,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   44,

       57,   44,   57,   45,   47,   47,   47,   47,   44,   57,
       48,   57,   49,   49,   49,   49,   49,   57,   63,   44,
       57,   48,   43,   50,   50,   45,   45,   45,   44,   57,
       48,   51,   45,   45,   45,   45,   45,   59,   52,   57,
       57,   69,   57,   57,   63,   62,   57,   57,   51,   60,
       57,   57,   61,   57,   79,   57,   81,   57,   65,   57,
       82,   57,   85,  276,  278,   68,  108,   66,  274,   64,
       74,  278,  273,   57,   67,   72,   86,   86,   86,   86,
       86,  278,   57,   54,   70,   57,   77,   55,  269,   56,
       57,   73,   71,   46,   46,   46,   46,   46,  268,   84,

       75,   76,   80,   44,   78,   44,  107,   45,   45,   45,
       45,   45,   83,   46,   46,   46,   46,   46,   44,  111,
       48,  112,   45,   45,   45,   45,   45,   88,   44,   57,
       48,   57,   45,   45,   45,   45,   45,  114,   89,   90,
       91,   91,   91,  101,  113,   57,  116,  102,   92,  103,
      267,   93,   57,   94,   57,  118,  133,   95,   57,  126,
       96,   97,   98,   57,  127,   99,  266,  117,   57,  132,
      278,   92,   57,  135,   93,  134,   94,  164,   57,  165,
       95,  119,  260,   96,   97,   98,  259,   44,   99,   48,
      125,   45,   45,   45,   45,   45,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  105,  104,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      104,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,   57,   57,   57,  123,   57,
       57,   57,   57,  141,   57,   86,   86,   86,   86,   86,
      151,  143,  145,  146,  147,  147,  147,  152,  157,  258,

      142,   46,   91,   91,   91,   91,  148,  257,   91,   91,
       91,   46,   46,  151,  120,   57,  166,  256,  129,  130,
      152,  157,  138,  122,  149,  155,  158,  153,  150,  159,
      124,  140,   57,  167,   57,  168,  128,   57,  139,  148,
      131,   46,   46,   46,   46,   46,  154,  149,  155,  158,
      153,  150,  159,  160,  160,  255,  160,  160,  160,  160,
      160,   57,  175,  170,  161,   57,  176,   57,  177,  154,
       57,  156,   57,  180,  199,  160,  160,  156,  160,  160,
      160,  160,  160,  201,  179,  245,  161,  244,  160,  160,
      160,  243,  160,  160,  160,  160,  160,  199,  160,  160,

      162,  160,  160,  160,  160,  160,  171,  201,  172,  162,
      160,  173,  242,  181,  174,   57,  182,  102,   57,  183,
       57,  184,   57,  185,  160,   57,  190,   57,  191,   57,
      192,  200,  196,  160,  147,  147,  147,  147,  148,  202,
      147,  147,  147,  197,  198,  198,  198,  198,  203,  102,
      204,  148,  205,  206,  200,  207,  208,  209,   57,  218,
       57,  226,  202,  221,  221,  221,  221,  221,  224,  222,
      241,  203,  148,  204,  148,  205,  206,  227,  207,  208,
      209,  160,  160,  196,  160,  160,  160,  160,  160,  223,
      228,  231,  161,  232,  197,  198,  198,  198,  198,  225,

      227,  219,  222,  230,  148,  233,  235,  237,   57,  246,
      248,  231,  223,  232,  240,  249,  160,  250,  229,  251,
      252,  234,  225,  239,  220,  222,  230,  217,  148,  216,
      215,  214,  236,  248,  231,  253,  232,  238,  249,  196,
      250,  229,  251,  252,  234,  247,  247,  247,  247,  247,
      197,  198,  198,  198,  198,  236,  196,  213,  253,  212,
      238,  196,  254,  224,  211,  261,  196,  197,  198,  198,
      198,  198,  197,  198,  198,  198,  198,  197,  198,  198,
      198,  198,  196,  148,  195,  254,  224,  196,  261,  262,
      194,  193,  196,  197,  198,  198,  198,  198,  197,  198,

      198,  198,  198,  197,  198,  198,  198,  198,  196,  148,
      263,  264,  262,  196,  197,  197,  197,  197,  197,  197,
      198,  198,  198,  198,  197,  198,  198,  198,  198,  265,
      270,  228,  148,  263,  264,  271,  235,  272,  226,  233,
      275,  237,  189,  188,  187,  186,  178,  169,  108,  105,
      144,  137,  265,  270,  228,  136,  121,  115,  271,  235,
      272,  226,  233,  275,  237,   53,   57,   53,   58,   58,
       58,  110,  109,  108,  110,  110,  104,  104,  104,  104,
      104,  104,  163,  163,  210,  210,  107,   87,   57,  278,
        3,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278
    } ;

static const short int yy_chk[871] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
       10,  281,   10,  274,   10,   10,   10,   10,   10,   11,
       11,   11,   11,   11,   12,   12,   12,   12,   12,   13,

       21,   13,   23,   13,   13,   13,   13,   13,   14,   25,
       14,   27,   14,   14,   14,   14,   14,   24,   24,   15,
       26,   15,    9,   15,   15,   15,   15,   15,   16,   30,
       16,   19,   16,   16,   16,   16,   16,   21,   19,   29,
       28,   28,   31,   32,   32,   23,   34,   33,   19,   21,
       35,   37,   21,   36,   36,   38,   38,   40,   25,   39,
       39,   41,   41,  273,   51,   27,   56,   26,  267,   24,
       30,   51,  266,   60,   26,   29,   42,   42,   42,   42,
       42,   51,   59,   19,   28,   62,   34,   19,  260,   19,
       61,   29,   28,   44,   44,   44,   44,   44,  259,   40,

       31,   33,   37,   45,   35,   45,   56,   45,   45,   45,
       45,   45,   39,   46,   46,   46,   46,   46,   47,   59,
       47,   60,   47,   47,   47,   47,   47,   48,   49,   65,
       49,   67,   49,   49,   49,   49,   49,   62,   48,   48,
       48,   48,   48,   52,   61,   64,   64,   52,   48,   52,
      258,   48,   72,   48,   66,   66,   79,   48,   73,   73,
       48,   48,   48,   74,   74,   48,  255,   65,   78,   78,
      110,   48,   80,   80,   48,   79,   48,  110,  111,  111,
       48,   67,  244,   48,   48,   48,  243,   50,   48,   50,
       72,   50,   50,   50,   50,   50,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   68,   70,   71,   71,   75,
       76,   83,   77,   85,   84,   86,   86,   86,   86,   86,
       93,   86,   88,   88,   88,   88,   88,   94,   97,  242,

       85,   89,   89,   89,   89,   89,   90,  241,   90,   90,
       90,   90,   90,   93,   68,  112,  112,  240,   76,   77,
       94,   97,   83,   70,   92,   96,   98,   95,   92,   99,
       71,   84,  113,  113,  114,  114,   75,  122,   83,   91,
       77,   91,   91,   91,   91,   91,   95,   92,   96,   98,
       95,   92,   99,  100,  100,  239,  100,  100,  100,  100,
      100,  117,  117,  116,  100,  119,  119,  120,  120,   95,
      125,   96,  124,  124,  149,  101,  101,   96,  101,  101,
      101,  101,  101,  151,  122,  217,  101,  216,  100,  102,
      102,  215,  102,  102,  102,  102,  102,  149,  103,  103,

      102,  103,  103,  103,  103,  103,  116,  151,  116,  103,
      101,  116,  214,  125,  116,  128,  128,  101,  129,  129,
      130,  130,  131,  131,  102,  138,  138,  139,  139,  140,
      140,  150,  148,  103,  145,  145,  145,  145,  146,  152,
      146,  146,  146,  148,  148,  148,  148,  148,  153,  103,
      154,  155,  154,  156,  150,  157,  158,  159,  179,  179,
      181,  201,  152,  198,  198,  198,  198,  198,  200,  199,
      213,  153,  203,  154,  155,  154,  156,  201,  157,  158,
      159,  160,  160,  196,  160,  160,  160,  160,  160,  199,
      202,  204,  160,  205,  196,  196,  196,  196,  196,  200,

      201,  181,  223,  203,  206,  207,  208,  209,  219,  219,
      225,  204,  199,  205,  212,  227,  160,  229,  202,  230,
      234,  207,  200,  211,  195,  223,  203,  178,  206,  176,
      174,  173,  208,  225,  204,  236,  205,  209,  227,  222,
      229,  202,  230,  234,  207,  221,  221,  221,  221,  221,
      222,  222,  222,  222,  222,  208,  224,  172,  236,  171,
      209,  226,  238,  248,  170,  249,  228,  224,  224,  224,
      224,  224,  226,  226,  226,  226,  226,  228,  228,  228,
      228,  228,  231,  147,  144,  238,  248,  232,  249,  250,
      142,  141,  233,  231,  231,  231,  231,  231,  232,  232,

      232,  232,  232,  233,  233,  233,  233,  233,  235,  251,
      252,  253,  250,  237,  247,  247,  247,  247,  247,  235,
      235,  235,  235,  235,  237,  237,  237,  237,  237,  254,
      261,  262,  251,  252,  253,  263,  264,  265,  270,  271,
      272,  275,  137,  136,  134,  133,  121,  115,  107,  104,
       87,   82,  254,  261,  262,   81,   69,   63,  263,  264,
      265,  270,  271,  272,  275,  279,   58,  279,  280,  280,
      280,  282,   57,   55,  282,  282,  283,  283,  283,  283,
      283,  283,  284,  284,  285,  285,   54,   43,   22,    3,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_mootPPLexer_DEBUG != 0
static const short int yy_rule_linenum[63] =
    {   0,
      132,  133,  134,  136,  137,  139,  142,  143,  145,  146,
      147,  148,  151,  152,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  162,  163,  164,  165,  166,  167,  168,
      169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  192,  194,  195,  196,  197,  198,  200,  201,
      202,  202
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 369 "/usr/local/share/flex++bison++/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_mootPPLexer_LEX_DEFINED
YY_mootPPLexer_LEX_RETURN YY_mootPPLexer_LEX ( YY_mootPPLexer_LEX_PARAM )
YY_mootPPLexer_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_mootPPLexer_LEX_RETURN YY_mootPPLexer_CLASS::YY_mootPPLexer_LEX ( YY_mootPPLexer_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_mootPPLexer_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 394 "/usr/local/share/flex++bison++/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = stdin;

	if ( ! yy___out )
	    yy___out = stdout;

	if ( yy_current_buffer )
	    YY_mootPPLexer_INIT_BUFFER( yy_current_buffer, yy___in );
	else
	    yy_current_buffer = YY_mootPPLexer_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_mootPPLexer_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 422 "/usr/local/share/flex++bison++/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 279 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 278 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 433 "/usr/local/share/flex++bison++/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 436 "/usr/local/share/flex++bison++/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_mootPPLexer_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
			fprintf( stderr, "--scanner backtracking\n" );
		else if ( yy_act < YY_END_OF_BUFFER -1 )
			fprintf( stderr, 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
		else if ( yy_act == YY_END_OF_BUFFER -1 )
			fprintf( stderr, 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
		else if ( yy_act == YY_END_OF_BUFFER )
			fprintf( stderr, "--(end of buffer or a NUL)\n" );
		else
			fprintf( stderr, "--EOF\n" );
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 132 "mootPPLexer.ll"
{ return EOS; }
	YY_BREAK
case 2:
#line 133 "mootPPLexer.ll"
{ return START_XML_TAG; }
	YY_BREAK
case 3:
#line 134 "mootPPLexer.ll"
{ return END_XML_TAG; }
	YY_BREAK
case 4:
#line 136 "mootPPLexer.ll"
{ /* ignore XML char-entities */ }
	YY_BREAK
case 5:
#line 137 "mootPPLexer.ll"
{ /* ditto */ }
	YY_BREAK
case 6:
#line 139 "mootPPLexer.ll"
{ return DATE;  }
	YY_BREAK
case 7:
#line 142 "mootPPLexer.ll"
{ return INTEGER; }
	YY_BREAK
case 8:
#line 143 "mootPPLexer.ll"
{ return FLOAT; }
	YY_BREAK
case 9:
#line 145 "mootPPLexer.ll"
{ return HYPHWORD; }
	YY_BREAK
case 10:
#line 146 "mootPPLexer.ll"
{ return WORD; }
	YY_BREAK
case 11:
#line 147 "mootPPLexer.ll"
{ return WORD; }
	YY_BREAK
case 12:
#line 148 "mootPPLexer.ll"
{ return WORD; }
	YY_BREAK
case 13:
#line 151 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 14:
#line 152 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 15:
#line 153 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 16:
#line 154 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 17:
#line 155 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 18:
#line 156 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 19:
#line 157 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 20:
#line 158 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 21:
#line 159 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 22:
#line 160 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 23:
#line 161 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 24:
#line 162 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 25:
#line 163 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 26:
#line 164 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 27:
#line 165 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 28:
#line 166 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 29:
#line 167 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 30:
#line 168 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 31:
#line 169 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 32:
#line 170 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 33:
#line 171 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 34:
#line 172 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 35:
#line 173 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 36:
#line 174 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 37:
#line 175 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 38:
#line 176 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 39:
#line 177 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 40:
#line 178 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 41:
#line 179 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 42:
#line 180 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 43:
#line 181 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 44:
#line 182 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 45:
#line 183 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 46:
#line 184 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 47:
#line 185 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 48:
#line 186 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 49:
#line 187 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 50:
#line 188 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 51:
#line 189 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 52:
#line 190 "mootPPLexer.ll"
{ return ABBREV; }
	YY_BREAK
case 53:
#line 192 "mootPPLexer.ll"
{ return EOS; }
	YY_BREAK
case 54:
#line 194 "mootPPLexer.ll"
{ return PUNCT; }
	YY_BREAK
case 55:
#line 195 "mootPPLexer.ll"
{ return PUNCT; }
	YY_BREAK
case 56:
#line 196 "mootPPLexer.ll"
{ return PUNCT; }
	YY_BREAK
case 57:
#line 197 "mootPPLexer.ll"
{ return PUNCT; }
	YY_BREAK
case 58:
#line 198 "mootPPLexer.ll"
{ return PUNCT; }
	YY_BREAK
case 59:
#line 200 "mootPPLexer.ll"
{ /* do nothing */ }
	YY_BREAK
case 60:
#line 201 "mootPPLexer.ll"
{  }
	YY_BREAK
case 61:
#line 202 "mootPPLexer.ll"
{ return UNKNOWN; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 204 "mootPPLexer.ll"
{ return PPEOF; }
	YY_BREAK
case 63:
#line 206 "mootPPLexer.ll"
ECHO;
	YY_BREAK
#line 463 "/usr/local/share/flex++bison++/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 511 "/usr/local/share/flex++bison++/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_mootPPLexer_DEBUG != 0
		fprintf(stderr, "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_mootPPLexer_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_mootPPLexer_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_mootPPLexer_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_mootPPLexer_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_mootPPLexer_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 683 "/usr/local/share/flex++bison++/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 279 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 687 "/usr/local/share/flex++bison++/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_mootPPLexer_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 279 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 278);
#line 721 "/usr/local/share/flex++bison++/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_mootPPLexer_CHAR c, register YY_mootPPLexer_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_mootPPLexer_CHAR c;
register YY_mootPPLexer_CHAR *yy_bp;
#endif
#else
void YY_mootPPLexer_CLASS::yyunput( YY_mootPPLexer_CHAR c, YY_mootPPLexer_CHAR *yy_bp )
#endif

    {
    register YY_mootPPLexer_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_mootPPLexer_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_mootPPLexer_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_mootPPLexer_CLASS::input()
#endif
    {
    int c;
    YY_mootPPLexer_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_mootPPLexer_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootPPLexer_RESTART( FILE *input_file )
#else
void YY_mootPPLexer_RESTART( input_file )
FILE *input_file;
#endif
#else
void YY_mootPPLexer_CLASS::YY_mootPPLexer_RESTART ( FILE *input_file )
#endif

    {
    YY_mootPPLexer_INIT_BUFFER( yy_current_buffer, input_file );
    YY_mootPPLexer_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootPPLexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_mootPPLexer_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_mootPPLexer_CLASS::YY_mootPPLexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    YY_mootPPLexer_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootPPLexer_LOAD_BUFFER_STATE( void )
#else
void YY_mootPPLexer_LOAD_BUFFER_STATE()
#endif
#else
void YY_mootPPLexer_CLASS::YY_mootPPLexer_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yy___text = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yy___in = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_mootPPLexer_CREATE_BUFFER( FILE *file, int size )
#else
YY_BUFFER_STATE YY_mootPPLexer_CREATE_BUFFER( file, size )
FILE *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_mootPPLexer_CLASS::YY_mootPPLexer_CREATE_BUFFER( FILE *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_mootPPLexer_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_mootPPLexer_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_mootPPLexer_CREATE_BUFFER()" );

    YY_mootPPLexer_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootPPLexer_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_mootPPLexer_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_mootPPLexer_CLASS::YY_mootPPLexer_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_mootPPLexer_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file )
#else
void YY_mootPPLexer_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
#else
void YY_mootPPLexer_CLASS::YY_mootPPLexer_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 206 "mootPPLexer.ll"


/*----------------------------------------------------------------------
 */
void mootPPLexer::step_streams(FILE *in, FILE *out)
{
  yyin = in;
  yyout = out;
  // -- black magic from flex(1) manpage
  if (yy_current_buffer != NULL) { yy_delete_buffer(yy_current_buffer); }
  yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
  BEGIN(INITIAL);
}

/*----------------------------------------------------------------------
 */
bool mootPPLexer::tokenize_stream(FILE *in, FILE *out)
{
  int tok;
  step_streams(in,out);

  while ((tok = yylex()) != PPEOF) {
    if (verbose) ntokens++;
    switch (tok) {
      case EOS:
          if (yytext[0] != '<') {  /* !? */
            yy_echo();
          }
          fputs(output_sentence_separator.c_str(), out);
          break;

      case START_XML_TAG:
      case END_XML_TAG:
	  /* ignore XML tags */
	  break;

      default:
	  /* write it as its own token */
          yy_echo();
          fputs(output_token_separator.c_str(), out);
      }
  }
  fputc('\n', out);   /* always add terminating newline */
  yyterminate();
  return true;
}
