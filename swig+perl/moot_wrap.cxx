/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIG_CASTRANK_MODE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Add in functionality missing in older versions of Perl. Much of this is based on Devel-PPPort on cpan. */

/* Add PERL_REVISION, PERL_VERSION, PERL_SUBVERSION if missing */
#ifndef PERL_REVISION
#  if !defined(__PATCHLEVEL_H_INCLUDED__) && !(defined(PATCHLEVEL) && defined(SUBVERSION))
#    define PERL_PATCHLEVEL_H_IMPLICIT
#    include <patchlevel.h>
#  endif
#  if !(defined(PERL_VERSION) || (defined(SUBVERSION) && defined(PATCHLEVEL)))
#    include <could_not_find_Perl_patchlevel.h>
#  endif
#  ifndef PERL_REVISION
#    define PERL_REVISION       (5)
#    define PERL_VERSION        PATCHLEVEL
#    define PERL_SUBVERSION     SUBVERSION
#  endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

#ifndef SvIOK_UV
# define SvIOK_UV(sv)       (SvIOK(sv) && (SvUVX(sv) == SvIVX(sv)))
#endif

#ifndef SvUOK
# define SvUOK(sv)           SvIOK_UV(sv)
#endif

#if ((PERL_VERSION < 4) || ((PERL_VERSION == 4) && (PERL_SUBVERSION <= 5)))
#  define PL_sv_undef               sv_undef
#  define PL_na	                    na
#  define PL_errgv                  errgv
#  define PL_sv_no                  sv_no
#  define PL_sv_yes                 sv_yes
#  define PL_markstack_ptr          markstack_ptr
#endif

#ifndef IVSIZE
#  ifdef LONGSIZE
#    define IVSIZE LONGSIZE
#  else
#    define IVSIZE 4 /* A bold guess, but the best we can make. */
#  endif
#endif

#ifndef INT2PTR
#  if (IVSIZE == PTRSIZE) && (UVSIZE == PTRSIZE)
#    define PTRV                  UV
#    define INT2PTR(any,d)        (any)(d)
#  else
#    if PTRSIZE == LONGSIZE
#      define PTRV                unsigned long
#    else
#      define PTRV                unsigned
#    endif
#    define INT2PTR(any,d)        (any)(PTRV)(d)
#  endif

#  define NUM2PTR(any,d)  (any)(PTRV)(d)
#  define PTR2IV(p)       INT2PTR(IV,p)
#  define PTR2UV(p)       INT2PTR(UV,p)
#  define PTR2NV(p)       NUM2PTR(NV,p)

#  if PTRSIZE == LONGSIZE
#    define PTR2ul(p)     (unsigned long)(p)
#  else
#    define PTR2ul(p)     INT2PTR(unsigned long,p)
#  endif
#endif /* !INT2PTR */

#ifndef SvPV_nolen
# define SvPV_nolen(x) SvPV(x,PL_na)
#endif

#ifndef get_sv
#  define get_sv perl_get_sv
#endif

#ifndef ERRSV
#  define ERRSV get_sv("@",FALSE)
#endif

#ifndef pTHX_
#define pTHX_
#endif   

#include <string.h>
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Perl_ErrorType(int code) {
  switch(code) {
  case SWIG_MemoryError:
    return "MemoryError";
  case SWIG_IOError:
    return "IOError";
  case SWIG_RuntimeError:
    return "RuntimeError";
  case SWIG_IndexError:
    return "IndexError";
  case SWIG_TypeError:
    return "TypeError";
  case SWIG_DivisionByZero:
    return "ZeroDivisionError";
  case SWIG_OverflowError:
    return "OverflowError";
  case SWIG_SyntaxError:
    return "SyntaxError";
  case SWIG_ValueError:
    return "ValueError";
  case SWIG_SystemError:
    return "SystemError";
  case SWIG_AttributeError:
    return "AttributeError";
  default:
    return "RuntimeError";
  }
}


/* -----------------------------------------------------------------------------
 * perlrun.swg
 *
 * This file contains the runtime support for Perl modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef PERL_OBJECT
#define SWIG_PERL_OBJECT_DECL CPerlObj *SWIGUNUSEDPARM(pPerl),
#define SWIG_PERL_OBJECT_CALL pPerl,
#else
#define SWIG_PERL_OBJECT_DECL
#define SWIG_PERL_OBJECT_CALL
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pp, type, flags)           SWIG_Perl_ConvertPtr(SWIG_PERL_OBJECT_CALL obj, pp, type, flags)
#define SWIG_ConvertPtrAndOwn(obj, pp, type, flags,own) SWIG_Perl_ConvertPtrAndOwn(SWIG_PERL_OBJECT_CALL obj, pp, type, flags, own)
#define SWIG_NewPointerObj(p, type, flags)              SWIG_Perl_NewPointerObj(SWIG_PERL_OBJECT_CALL p, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, p, s, type)             SWIG_Perl_ConvertPacked(SWIG_PERL_OBJECT_CALL obj, p, s, type)
#define SWIG_NewPackedObj(p, s, type)	                SWIG_Perl_NewPackedObj(SWIG_PERL_OBJECT_CALL p, s, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Perl_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Perl_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Perl_ErrorType(code)               
#define SWIG_Error(code, msg)            		sv_setpvf(get_sv("@", GV_ADD), "%s %s", SWIG_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    

/* Perl-specific SWIG API */

#define SWIG_MakePtr(sv, ptr, type, flags)              SWIG_Perl_MakePtr(SWIG_PERL_OBJECT_CALL sv, ptr, type, flags)
#define SWIG_MakePackedObj(sv, p, s, type)	        SWIG_Perl_MakePackedObj(SWIG_PERL_OBJECT_CALL sv, p, s, type)
#define SWIG_SetError(str)                              SWIG_Error(SWIG_RuntimeError, str)


#define SWIG_PERL_DECL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_DECL arg1)
#define SWIG_PERL_CALL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_CALL arg1)
#define SWIG_PERL_DECL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_DECL arg1, arg2)
#define SWIG_PERL_CALL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_CALL arg1, arg2)

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER   SWIG_POINTER_OWN
#define SWIG_SHADOW  SWIG_OWNER << 1

#define SWIG_MAYBE_PERL_OBJECT SWIG_PERL_OBJECT_DECL

/* SWIG Perl macros */

/* Macro to declare an XS function */
#ifndef XSPROTO
#   define XSPROTO(name) void name(pTHX_ CV* cv)
#endif

/* Macro to call an XS function */
#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC

#else /* PERL_OBJECT */

#define MAGIC_PPERL
#define SWIGCLASS_STATIC static SWIGUNUSED

#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#else /* MULTIPLICITY */

#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif /* MULTIPLICITY */
#endif /* PERL_OBJECT */

#  ifdef PERL_OBJECT
#    define SWIG_croak_null() SWIG_Perl_croak_null(pPerl)
static void SWIG_Perl_croak_null(CPerlObj *pPerl)
#  else
static void SWIG_croak_null()
#  endif
{
  SV *err = get_sv("@", GV_ADD);
#  if (PERL_VERSION < 6)
  croak("%_", err);
#  else
  if (sv_isobject(err))
    croak(0);
  else
    croak("%s", SvPV_nolen(err));
#  endif
}


/* 
   Define how strict is the cast between strings and integers/doubles
   when overloading between these types occurs.
   
   The default is making it as strict as possible by using SWIG_AddCast
   when needed.
   
   You can use -DSWIG_PERL_NO_STRICT_STR2NUM at compilation time to
   disable the SWIG_AddCast, making the casting between string and
   numbers less strict.

   In the end, we try to solve the overloading between strings and
   numerical types in the more natural way, but if you can avoid it,
   well, avoid it using %rename, for example.
*/
#ifndef SWIG_PERL_NO_STRICT_STR2NUM
# ifndef SWIG_PERL_STRICT_STR2NUM
#  define SWIG_PERL_STRICT_STR2NUM
# endif
#endif
#ifdef SWIG_PERL_STRICT_STR2NUM
/* string takes precedence */
#define SWIG_Str2NumCast(x) SWIG_AddCast(x)  
#else
/* number takes precedence */
#define SWIG_Str2NumCast(x) x
#endif



#include <stdlib.h>

SWIGRUNTIME const char *
SWIG_Perl_TypeProxyName(const swig_type_info *type) {
  if (!type) return NULL;
  if (type->clientdata != NULL) {
    return (const char*) type->clientdata;
  } 
  else {
    return type->name;
  }
}

/* Identical to SWIG_TypeCheck, except for strcmp comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeProxyCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(SWIG_Perl_TypeProxyName(iter->type), c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* Function for getting a pointer value */

SWIGRUNTIME int
SWIG_Perl_ConvertPtrAndOwn(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags, int *own) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;
  SV *tsv = 0;

  if (own)
    *own = 0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    IV tmp = 0;
    tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
	    tsv = (SV*)SvRV(sv);
            tmp = SvIV(tsv);
          }
        }
      } else {
        return SWIG_ERROR;
      }
    } else {
      tmp = SvIV(tsv);
    }
    voidptr = INT2PTR(void *,tmp);
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return SWIG_OK;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    if (!SvROK(sv)) {
      /* In Perl 5.12 and later, SVt_RV == SVt_IV, so sv could be a valid integer value.  */
      if (SvIOK(sv)) {
        return SWIG_ERROR;
      } else {
        /* NULL pointer (reference to undef). */
        *(ptr) = (void *) 0;
        return SWIG_OK;
      }
    } else {
      return SWIG_ERROR;
    }
  } else {                            /* Don't know what it is */
    return SWIG_ERROR;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeProxyCheck(_c,_t);
    if (!tc) {
      return SWIG_ERROR;
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,voidptr,&newmemory);
      if (newmemory == SWIG_CAST_NEW_MEMORY) {
        assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
        if (own)
          *own = *own | SWIG_CAST_NEW_MEMORY;
      }
    }
  } else {
    *ptr = voidptr;
  }

  /* 
   *  DISOWN implementation: we need a perl guru to check this one.
   */
  if (tsv && (flags & SWIG_POINTER_DISOWN)) {
    /* 
     *  almost copy paste code from below SWIG_POINTER_OWN setting
     */
    SV *obj = sv;
    HV *stash = SvSTASH(SvRV(obj));
    GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
    if (isGV(gv)) {
      HV *hv = GvHVn(gv);
      /*
       * To set ownership (see below), a newSViv(1) entry is added. 
       * Hence, to remove ownership, we delete the entry.
       */
      if (hv_exists_ent(hv, obj, 0)) {
	hv_delete_ent(hv, obj, 0, 0);
      }
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  return SWIG_Perl_ConvertPtrAndOwn(sv, ptr, _t, flags, 0);
}

SWIGRUNTIME void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & (SWIG_SHADOW | SWIG_POINTER_OWN))) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, SWIG_Perl_TypeProxyName(t), ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_POINTER_OWN) {
      HV *hv;
      GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, SWIG_Perl_TypeProxyName(t), ptr);
  }
}

SWIGRUNTIMEINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME void
SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(SWIG_Perl_TypeProxyName(type))) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,SWIG_Perl_TypeProxyName(type));
  sv_setpv(sv, result);
}

SWIGRUNTIME SV *
SWIG_Perl_NewPackedObj(SWIG_MAYBE_PERL_OBJECT void *ptr, int sz, swig_type_info *type) {
  SV *result = sv_newmortal();
  SWIG_Perl_MakePackedObj(result, ptr, sz, type);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return SWIG_ERROR;
  c = SvPV_nolen(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return SWIG_ERROR;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return SWIG_ERROR;
  }
  return SWIG_OK;
}


/* Macros for low-level exception handling */
#define SWIG_croak(x)    { SWIG_Error(SWIG_RuntimeError, x); SWIG_fail; }


typedef XSPROTO(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;


/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
# ifdef __cplusplus
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,const_cast<char*>(a),b,c)
# else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,(char*)(a),b,c)
# endif
# ifndef MULTIPLICITY
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) 
# else
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) 
# endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
SWIGRUNTIME void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) 
#endif
{
  MAGIC *mg;
  sv_magic(sv,sv,'U',name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFunc) get;
  mg->mg_virtual->svt_set = (SwigMagicFunc) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


SWIGRUNTIME swig_module_info *
SWIG_Perl_GetModule(void) {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE | GV_ADDMULTI);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE | GV_ADDMULTI);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef __cplusplus
}
#endif

/* Workaround perl5 global namespace pollution. Note that undefining library
 * functions like fopen will not solve the problem on all platforms as fopen
 * might be a macro on Windows but not necessarily on other operating systems. */
#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef do_exec
  #undef do_exec
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef bool
  #undef bool
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif
#ifdef free
  #undef free
#endif
#ifdef malloc
  #undef malloc
#endif
#ifdef calloc
  #undef calloc
#endif
#ifdef Stat
  #undef Stat
#endif
#ifdef check
  #undef check
#endif
#ifdef seekdir
  #undef seekdir
#endif
#ifdef open
  #undef open
#endif
#ifdef readdir
  #undef readdir
#endif
#ifdef bind
  #undef bind
#endif
#ifdef access
  #undef access
#endif
#ifdef stat
  #undef stat
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AssocVectorT_unsigned_int_float_t swig_types[0]
#define SWIGTYPE_p_DynHMM swig_types[1]
#define SWIGTYPE_p_DynLexHMM swig_types[2]
#define SWIGTYPE_p_DynLexHMM_Boltzmann swig_types[3]
#define SWIGTYPE_p_HMM swig_types[4]
#define SWIGTYPE_p_HMMVerbosityLevel swig_types[5]
#define SWIGTYPE_p_Lexfreqs swig_types[6]
#define SWIGTYPE_p_Ngrams swig_types[7]
#define SWIGTYPE_p_Token swig_types[8]
#define SWIGTYPE_p_TokenAnalysis swig_types[9]
#define SWIGTYPE_p_TokenLocation swig_types[10]
#define SWIGTYPE_p_TokenReader swig_types[11]
#define SWIGTYPE_p_TokenWriter swig_types[12]
#define SWIGTYPE_p_Trigram swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_float swig_types[15]
#define SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t swig_types[16]
#define SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t swig_types[17]
#define SWIGTYPE_p_mootSentence swig_types[18]
#define SWIGTYPE_p_mootTokenFlavor swig_types[19]
#define SWIGTYPE_p_mootTokenType swig_types[20]
#define SWIGTYPE_p_std__listT_TokenAnalysis_t swig_types[21]
#define SWIGTYPE_p_std__listT_Token_t swig_types[22]
#define SWIGTYPE_p_std__pairT_unsigned_int_float_t swig_types[23]
#define SWIGTYPE_p_std__string swig_types[24]
#define SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t swig_types[25]
#define SWIGTYPE_p_unsigned_int swig_types[26]
static swig_type_info *swig_types[28];
static swig_module_info swig_module = {swig_types, 27, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_moot

#define SWIG_name   "mootc::boot_moot"
#define SWIG_prefix "mootc::"

#define SWIGVERSION 0x020007 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


#include <string>


#include <stdexcept>


#include <string>

double SwigSvToNumber(SV* sv) {
    return SvIOK(sv) ? double(SvIVX(sv)) : SvNVX(sv);
}
std::string SwigSvToString(SV* sv) {
    STRLEN len;
    char *ptr = SvPV(sv, len);
    return std::string(ptr, len);
}
void SwigSvFromString(SV* sv, const std::string& s) {
    sv_setpvn(sv,s.data(),s.size());
}


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <moot.h>

using namespace moot;
using namespace mootio;


SWIGINTERNINLINE SV *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  SV *obj = sv_newmortal();
  if (carray) {
    sv_setpvn(obj, carray, size);
  } else {
    sv_setsv(obj, &PL_sv_undef);
  }
  return obj;
}


SWIGINTERNINLINE SV * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


using namespace moot;


SWIGINTERNINLINE SV *
SWIG_From_double  SWIG_PERL_DECL_ARGS_1(double value)
{
  return sv_2mortal(newSVnv(value));
}


SWIGINTERNINLINE SV *
SWIG_From_float  SWIG_PERL_DECL_ARGS_1(float value)
{    
  return SWIG_From_double  SWIG_PERL_CALL_ARGS_1(value);
}


  using namespace moot;


  using namespace moot;


SWIGINTERNINLINE SV *
SWIG_From_long  SWIG_PERL_DECL_ARGS_1(long value)
{
  SV *sv;
  if (value >= IV_MIN && value <= IV_MAX)
    sv = newSViv(value);
  else
    sv = newSVpvf("%ld", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_int  SWIG_PERL_DECL_ARGS_1(int value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}


  const char* const TokenTypeName(mootTokenType typ) { return mootTokenTypeNames[typ]; };


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double SWIG_PERL_DECL_ARGS_2(SV *obj, double *val)
{
  if (SvNIOK(obj)) {
    if (val) *val = SvNV(obj);
    return SWIG_OK;
  } else if (SvIOK(obj)) {
    if (val) *val = (double) SvIV(obj);
    return SWIG_AddCast(SWIG_OK);
  } else {
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      double v;
      errno = 0;
      v = strtod(nptr, &endptr);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
  }
  return SWIG_TypeError;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long SWIG_PERL_DECL_ARGS_2(SV *obj, long* val)
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (v <= LONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= LONG_MIN && v <= LONG_MAX) {
      if(val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      long v;
      errno = 0;
      v = strtol(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_PERL_DECL_ARGS_2(SV * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  const char* const TokenFlavorName(mootTokenFlavor flav) { return mootTokenFlavorNames[flav]; };


typedef mootToken::Analysis TokenAnalysis;


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SV *obj, char** cptr, size_t* psize, int *alloc)
{
  if (SvMAGICAL(obj)) {
     SV *tmp = sv_newmortal();
     SvSetSV(tmp, obj);
     obj = tmp;
  }
  if (SvPOK(obj)) {
    STRLEN len = 0;
    char *cstr = SvPV(obj, len); 
    size_t size = len + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      char* vptr = 0; 
      if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = vptr;
	if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string SWIG_PERL_DECL_ARGS_2(SV * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE SV *
SWIG_From_std_string  SWIG_PERL_DECL_ARGS_1(const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_float SWIG_PERL_DECL_ARGS_2(SV * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE SV *
SWIG_From_bool  SWIG_PERL_DECL_ARGS_1(bool value)
{
  return boolSV(value);
}

SWIGINTERN bool TokenAnalysis_equal(TokenAnalysis *self,TokenAnalysis const &a2){ return (*self) == a2; }

SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long value)
{
  SV *sv;
  if (value <= UV_MAX)
    sv = newSVuv(value);
  else
    sv = newSVpvf("%lu", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_size_t  SWIG_PERL_DECL_ARGS_1(size_t value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(value));
}

SWIGINTERN TokenAnalysis &std_list_Sl_TokenAnalysis_Sg__front(std::list< TokenAnalysis > *self){
      if (self->empty()) {
	//SWIG_Error(SWIG_IndexError,"attempt to index non-existent list element"); //--nope
	//SWIG_croak("attempt to access non-existent list element"); //--nope
	croak("attempt to access non-existent list element");
      }
      return self->front();
    }
SWIGINTERN TokenAnalysis &std_list_Sl_TokenAnalysis_Sg__back(std::list< TokenAnalysis > *self){
      if (self->empty()) {
	//SWIG_Error(SWIG_IndexError,"attempt to index non-existent list element"); //--nope
	//SWIG_croak("attempt to access non-existent list element"); //--nope
	croak("attempt to access non-existent list element");
      }
      return self->back();
    }
SWIGINTERN std::list< TokenAnalysis > *std_list_Sl_TokenAnalysis_Sg__rotate__SWIG_0(std::list< TokenAnalysis > *self,int n=1){
      if (self->empty()) return self;
      for (; n>0; n--) {
	self->push_back(self->front());
	self->pop_front();
      }
      for (; n<0; n++) {
	self->push_front(self->back());
	self->pop_back();
      }
      return self;
    }

  //typedef mootToken::Analyses TokenAnalyses;
  typedef std::list<TokenAnalysis> TokenAnalyses;


typedef mootToken::Location TokenLocation;


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long *val) 
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (v <= ULONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= 0 && v <= ULONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long v;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_int  SWIG_PERL_DECL_ARGS_1(unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


typedef mootToken Token;




SWIGINTERN mootTokenFlavor Token_flavor(Token *self){ return tokenFlavor(self->tok_text); }
SWIGINTERN Token &std_list_Sl_Token_Sg__front(std::list< Token > *self){
      if (self->empty()) {
	//SWIG_Error(SWIG_IndexError,"attempt to index non-existent list element"); //--nope
	//SWIG_croak("attempt to access non-existent list element"); //--nope
	croak("attempt to access non-existent list element");
      }
      return self->front();
    }
SWIGINTERN Token &std_list_Sl_Token_Sg__back(std::list< Token > *self){
      if (self->empty()) {
	//SWIG_Error(SWIG_IndexError,"attempt to index non-existent list element"); //--nope
	//SWIG_croak("attempt to access non-existent list element"); //--nope
	croak("attempt to access non-existent list element");
      }
      return self->back();
    }
SWIGINTERN std::list< Token > *std_list_Sl_Token_Sg__rotate__SWIG_0(std::list< Token > *self,int n=1){
      if (self->empty()) return self;
      for (; n>0; n--) {
	self->push_back(self->front());
	self->pop_front();
      }
      for (; n<0; n++) {
	self->push_front(self->back());
	self->pop_back();
      }
      return self;
    }

  //typedef mootSentence Sentence;
  typedef std::list<Token> Sentence;


  using namespace moot;

SWIGINTERN std::string const &mootEnum_Sl_std_string_Sg__unknown_name__SWIG_1(mootEnum< std::string > *self){ return self->id2name(mootEnumNone); }

  using namespace moot;


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_PERL_DECL_ARGS_2(SV * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}

SWIGINTERN int AssocVector_Sl_mootEnumID_Sc_ProbT_Sg__find_index(AssocVector< mootEnumID,ProbT > const *self,unsigned int const &key){
      AssocVector<unsigned int,float >::const_iterator ci = self->find(key);
      return (ci == self->end() ? -1 : (ci-self->begin()));
    }

  using namespace moot;


typedef enum {
  HMMvlSilent = mootHMM::vlSilent,     /**< Be silent */
  HMMvlErrors = mootHMM::vlErrors,     /**< Report errors */
  HMMvlWarnings = mootHMM::vlWarnings,   /**< Report warnings */
  HMMvlProgress = mootHMM::vlProgress,   /**< Report progess */
  HMMvlEverything = mootHMM::vlEverything  /**< Report everything we can */
} HMMVerbosityLevel;

typedef mootEnumID TagID;
typedef mootEnumID TokID;
typedef mootEnumID ClassID;


typedef mootEnum<mootTokString> TokIDEnum;
typedef mootEnum<mootTagString> TagIDEnum;


  //typedef mootHMM::LexProbSubTable HMMLexProbSubTable;
  typedef AssocVector<mootEnumID,ProbT> HMMLexProbSubTableT;

SWIGINTERN AssocVector< unsigned int,float > &std_vector_Sl_HMMLexProbSubTableT_Sg__front(std::vector< HMMLexProbSubTableT > *self){
      if (self->empty()) {
	//SWIG_Error(SWIG_IndexError,"attempt to index non-existent vector element"); //--nope
	//SWIG_croak("attempt to access non-existent vector element"); //--nope
	croak("attempt to access non-existent vector element");
      }
      return self->front();
    }
SWIGINTERN AssocVector< unsigned int,float > &std_vector_Sl_HMMLexProbSubTableT_Sg__back(std::vector< HMMLexProbSubTableT > *self){
      if (self->empty()) {
	//SWIG_Error(SWIG_IndexError,"attempt to index non-existent vector element"); //--nope
	//SWIG_croak("attempt to access non-existent vector element"); //--nope
	croak("attempt to access non-existent vector element");
      }
      return self->back();
    }
SWIGINTERN AssocVector< unsigned int,float > &std_vector_Sl_HMMLexProbSubTableT_Sg__nth(std::vector< HMMLexProbSubTableT > *self,size_t n){
      return (*self)[n];
    }

  //typedef mootHMM::LexProbTable    HMMLexProbTable;
  typedef std::vector<HMMLexProbSubTableT >  HMMLexProbTableT;

 typedef mootHMM::Trigram Trigram; 
SWIGINTERN size_t Trigram_hash(Trigram *self){ return Trigram::HashFcn().operator()(*self); }
SWIGINTERN bool hash_map_Sl_Trigram_Sc_ProbT_Sc_Trigram_HashFcn_Sc_Trigram_EqualFcn_Sg__keyExists(hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *self,Trigram const &k){
      hash_map<Trigram,float,Trigram::HashFcn,Trigram::EqualFcn>::const_iterator ci = self->find(k);
      return (ci != self->end());
    }
SWIGINTERN float &hash_map_Sl_Trigram_Sc_ProbT_Sc_Trigram_HashFcn_Sc_Trigram_EqualFcn_Sg__get(hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *self,Trigram const &k){ return (*self)[k]; }
SWIGINTERN float hash_map_Sl_Trigram_Sc_ProbT_Sc_Trigram_HashFcn_Sc_Trigram_EqualFcn_Sg__getval(hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *self,Trigram const &k){ return (*self)[k]; }
SWIGINTERN void hash_map_Sl_Trigram_Sc_ProbT_Sc_Trigram_HashFcn_Sc_Trigram_EqualFcn_Sg__set(hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *self,Trigram const &k,float const &v){ (*self)[k] = v; }

  //typedef mootHMM::NgramProbHash HMMNgramProbHash;
  typedef hash_map<Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn> HMMNgramProbHash;

 typedef mootHMM HMM; 

SWIGINTERN int
SWIG_AsVal_bool SWIG_PERL_DECL_ARGS_2(SV *obj, bool* val)
{
  if (obj == &PL_sv_yes) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == &PL_sv_no) { 
    if (val) *val = false;
    return SWIG_OK;
  } else {
    if (val) *val = SvTRUE(obj) ? true : false;
    return SWIG_AddCast(SWIG_OK);    
  }
}

SWIGINTERN TokID HMM_flavid(HMM *self,mootTokenFlavor flav){ return self->flavids[flav]; }
SWIGINTERN void HMM_txtdump(HMM *self,char const *filename){
      FILE *f = stdout;
      if (strcmp(filename,"-") != 0) f = fopen(filename,"wb");
      if (f == NULL) croak("HMM::txtdump(): open failed for file '%s'", filename);
      self->txtdump(f);
      if (f != stdout) fclose(f);
    }

  using namespace moot;


  typedef mootTagString TagStr;
  typedef mootTokString TokStr;

 typedef mootDynHMM DynHMM; 
 typedef mootDynLexHMM DynLexHMM; 
 typedef mootDynLexHMM_Boltzmann DynLexHMM_Boltzmann; 

  using namespace moot;


  typedef ProbT NgramCount;

 typedef mootNgrams Ngrams; 
SWIGINTERN void Ngrams_add_counts__SWIG_0(Ngrams *self,mootTagString const &tag1,NgramCount const count){ self->add_counts(mootNgrams::Ngram(tag1),count); }
SWIGINTERN void Ngrams_add_counts__SWIG_1(Ngrams *self,mootTagString const &tag1,mootTagString const &tag2,NgramCount const count){ self->add_counts(mootNgrams::Ngram(tag1,tag2),count); }
SWIGINTERN void Ngrams_add_counts__SWIG_2(Ngrams *self,mootTagString const &tag1,mootTagString const &tag2,mootTagString const &tag3,NgramCount const count){ self->add_counts(mootNgrams::Ngram(tag1,tag2,tag3),count); }

  using namespace moot;


  typedef ProbT LexfreqCount;

 typedef mootLexfreqs Lexfreqs; 
SWIGINTERN LexfreqCount Lexfreqs_tlookup(Lexfreqs *self,mootTagString const &tag){ return self->taglookup(tag); }
SWIGINTERN LexfreqCount Lexfreqs_wlookup(Lexfreqs *self,mootTokString const &tok){
      mootLexfreqs::LexfreqTokTable::const_iterator wti = self->lftable.find(tok);
      if (wti == self->lftable.end()) return 0;
      return wti->second.count;
    }
SWIGINTERN LexfreqCount Lexfreqs_wtlookup(Lexfreqs *self,mootTokString const &tok,mootTagString const &tag){
      mootLexfreqs::LexfreqTokTable::const_iterator wti = self->lftable.find(tok);
      if (wti == self->lftable.end()) return 0;
      mootLexfreqs::LexfreqSubtable::const_iterator ti = wti->second.freqs.find(tag);
      if (ti == wti->second.freqs.end()) return 0;
      return ti->second;
    }
#ifdef __cplusplus
extern "C" {
#endif

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_moot_var::
class _wrap_moot_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *SWIGUNUSEDPARM(sv), MAGIC *SWIGUNUSEDPARM(mg)) {
    MAGIC_PPERL
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_PACKAGE_VERSION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(PACKAGE_VERSION))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_mootProbEpsilon_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(mootProbEpsilon)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_MOOT_PROB_NEG_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(MOOT_PROB_NEG)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_MOOT_PROB_ZERO_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(MOOT_PROB_ZERO)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_MOOT_PROB_ONE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(MOOT_PROB_ONE)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_MOOT_PROB_NONE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(MOOT_PROB_NONE)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_mootEnumNone_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(mootEnumNone)))  ;
  return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_TokenTypeName) {
  {
    mootTokenType arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenTypeName(typ);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TokenTypeName" "', argument " "1"" of type '" "mootTokenType""'");
    } 
    arg1 = static_cast< mootTokenType >(val1);
    result = (char *)TokenTypeName(arg1);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenFlavorName) {
  {
    mootTokenFlavor arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenFlavorName(flav);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TokenFlavorName" "', argument " "1"" of type '" "mootTokenFlavor""'");
    } 
    arg1 = static_cast< mootTokenFlavor >(val1);
    result = (char *)TokenFlavorName(arg1);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalysis_tag_set) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    mootTagString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TokenAnalysis_tag_set(self,tag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalysis_tag_set" "', argument " "1"" of type '" "TokenAnalysis *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TokenAnalysis_tag_set" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TokenAnalysis_tag_set" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->tag = *arg2;
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalysis_tag_get) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    mootTagString *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalysis_tag_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalysis_tag_get" "', argument " "1"" of type '" "TokenAnalysis *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    result = (mootTagString *) & ((arg1)->tag);
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalysis_details_set) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    mootTagString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TokenAnalysis_details_set(self,details);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalysis_details_set" "', argument " "1"" of type '" "TokenAnalysis *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TokenAnalysis_details_set" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TokenAnalysis_details_set" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->details = *arg2;
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalysis_details_get) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    mootTagString *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalysis_details_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalysis_details_get" "', argument " "1"" of type '" "TokenAnalysis *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    result = (mootTagString *) & ((arg1)->details);
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalysis_prob_set) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TokenAnalysis_prob_set(self,prob);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalysis_prob_set" "', argument " "1"" of type '" "TokenAnalysis *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TokenAnalysis_prob_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->prob = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalysis_prob_get) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalysis_prob_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalysis_prob_get" "', argument " "1"" of type '" "TokenAnalysis *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    result = (ProbT) ((arg1)->prob);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenAnalysis__SWIG_0) {
  {
    mootTagString *arg1 = 0 ;
    mootTagString *arg2 = 0 ;
    ProbT arg3 ;
    int res1 = SWIG_OLDOBJ ;
    int res2 = SWIG_OLDOBJ ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    TokenAnalysis *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_TokenAnalysis(my_tag,my_details,my_prob);");
    }
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TokenAnalysis" "', argument " "1"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TokenAnalysis" "', argument " "1"" of type '" "mootTagString const &""'"); 
      }
      arg1 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TokenAnalysis" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TokenAnalysis" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TokenAnalysis" "', argument " "3"" of type '" "ProbT""'");
    } 
    arg3 = static_cast< ProbT >(val3);
    result = (TokenAnalysis *)new TokenAnalysis((mootTagString const &)*arg1,(mootTagString const &)*arg2,arg3);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenAnalysis, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    XSRETURN(argvi);
  fail:
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenAnalysis__SWIG_1) {
  {
    mootTagString *arg1 = 0 ;
    mootTagString *arg2 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    TokenAnalysis *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_TokenAnalysis(my_tag,my_details);");
    }
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TokenAnalysis" "', argument " "1"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TokenAnalysis" "', argument " "1"" of type '" "mootTagString const &""'"); 
      }
      arg1 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TokenAnalysis" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TokenAnalysis" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    result = (TokenAnalysis *)new TokenAnalysis((mootTagString const &)*arg1,(mootTagString const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenAnalysis, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenAnalysis__SWIG_2) {
  {
    mootTagString *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    int argvi = 0;
    TokenAnalysis *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TokenAnalysis(my_tag);");
    }
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TokenAnalysis" "', argument " "1"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TokenAnalysis" "', argument " "1"" of type '" "mootTagString const &""'"); 
      }
      arg1 = ptr;
    }
    result = (TokenAnalysis *)new TokenAnalysis((mootTagString const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenAnalysis, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (SWIG_IsNewObj(res1)) delete arg1;
    XSRETURN(argvi);
  fail:
    if (SWIG_IsNewObj(res1)) delete arg1;
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenAnalysis__SWIG_3) {
  {
    int argvi = 0;
    TokenAnalysis *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TokenAnalysis();");
    }
    result = (TokenAnalysis *)new TokenAnalysis();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenAnalysis, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenAnalysis) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TokenAnalysis__SWIG_3); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TokenAnalysis__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TokenAnalysis__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TokenAnalysis__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_TokenAnalysis'");
  XSRETURN(0);
}


XS(_wrap_delete_TokenAnalysis) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TokenAnalysis(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TokenAnalysis" "', argument " "1"" of type '" "TokenAnalysis *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalysis_clear) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalysis_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalysis_clear" "', argument " "1"" of type '" "TokenAnalysis *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalysis_empty) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalysis_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalysis_empty" "', argument " "1"" of type '" "TokenAnalysis const *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    result = (bool)((TokenAnalysis const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalysis_equal) {
  {
    TokenAnalysis *arg1 = (TokenAnalysis *) 0 ;
    TokenAnalysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TokenAnalysis_equal(self,a2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenAnalysis, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalysis_equal" "', argument " "1"" of type '" "TokenAnalysis *""'"); 
    }
    arg1 = reinterpret_cast< TokenAnalysis * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_TokenAnalysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TokenAnalysis_equal" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TokenAnalysis_equal" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    arg2 = reinterpret_cast< TokenAnalysis * >(argp2);
    result = (bool)TokenAnalysis_equal(arg1,(TokenAnalysis const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenAnalyses) {
  {
    int argvi = 0;
    std::list< TokenAnalysis > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TokenAnalyses();");
    }
    result = (std::list< TokenAnalysis > *)new std::list< TokenAnalysis >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_TokenAnalysis_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_TokenAnalyses) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TokenAnalyses(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TokenAnalyses" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_clear) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalyses_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_clear" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_size) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalyses_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_size" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    result = (arg1)->size();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_empty) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalyses_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_empty" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    result = (bool)(arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_front) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TokenAnalysis *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalyses_front(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_front" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    result = (TokenAnalysis *) &std_list_Sl_TokenAnalysis_Sg__front(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenAnalysis, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_back) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TokenAnalysis *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalyses_back(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_back" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    result = (TokenAnalysis *) &std_list_Sl_TokenAnalysis_Sg__back(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenAnalysis, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_rotate__SWIG_0) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::list< TokenAnalysis > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TokenAnalyses_rotate(self,n);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_rotate" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TokenAnalyses_rotate" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (std::list< TokenAnalysis > *)std_list_Sl_TokenAnalysis_Sg__rotate__SWIG_0(arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_rotate__SWIG_1) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< TokenAnalysis > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalyses_rotate(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_rotate" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    result = (std::list< TokenAnalysis > *)std_list_Sl_TokenAnalysis_Sg__rotate__SWIG_0(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_rotate) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__listT_TokenAnalysis_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__listT_TokenAnalysis_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TokenAnalyses_rotate__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TokenAnalyses_rotate__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'TokenAnalyses_rotate'");
  XSRETURN(0);
}


XS(_wrap_TokenAnalyses_push_front) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    TokenAnalysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TokenAnalyses_push_front(self,elt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_push_front" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_TokenAnalysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TokenAnalyses_push_front" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TokenAnalyses_push_front" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    arg2 = reinterpret_cast< TokenAnalysis * >(argp2);
    (arg1)->push_front((TokenAnalysis const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_push_back) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    TokenAnalysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TokenAnalyses_push_back(self,elt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_push_back" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_TokenAnalysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TokenAnalyses_push_back" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TokenAnalyses_push_back" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    arg2 = reinterpret_cast< TokenAnalysis * >(argp2);
    (arg1)->push_back((TokenAnalysis const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_pop_front) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalyses_pop_front(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_pop_front" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    (arg1)->pop_front();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenAnalyses_pop_back) {
  {
    std::list< TokenAnalysis > *arg1 = (std::list< TokenAnalysis > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenAnalyses_pop_back(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenAnalyses_pop_back" "', argument " "1"" of type '" "std::list< TokenAnalysis > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< TokenAnalysis > * >(argp1);
    (arg1)->pop_back();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenLocation_offset_set) {
  {
    TokenLocation *arg1 = (TokenLocation *) 0 ;
    OffsetT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TokenLocation_offset_set(self,offset);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenLocation, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenLocation_offset_set" "', argument " "1"" of type '" "TokenLocation *""'"); 
    }
    arg1 = reinterpret_cast< TokenLocation * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TokenLocation_offset_set" "', argument " "2"" of type '" "OffsetT""'");
    } 
    arg2 = static_cast< OffsetT >(val2);
    if (arg1) (arg1)->offset = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenLocation_offset_get) {
  {
    TokenLocation *arg1 = (TokenLocation *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    OffsetT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenLocation_offset_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenLocation, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenLocation_offset_get" "', argument " "1"" of type '" "TokenLocation *""'"); 
    }
    arg1 = reinterpret_cast< TokenLocation * >(argp1);
    result = (OffsetT) ((arg1)->offset);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenLocation_length_set) {
  {
    TokenLocation *arg1 = (TokenLocation *) 0 ;
    OffsetT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TokenLocation_length_set(self,length);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenLocation, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenLocation_length_set" "', argument " "1"" of type '" "TokenLocation *""'"); 
    }
    arg1 = reinterpret_cast< TokenLocation * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TokenLocation_length_set" "', argument " "2"" of type '" "OffsetT""'");
    } 
    arg2 = static_cast< OffsetT >(val2);
    if (arg1) (arg1)->length = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenLocation_length_get) {
  {
    TokenLocation *arg1 = (TokenLocation *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    OffsetT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenLocation_length_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenLocation, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenLocation_length_get" "', argument " "1"" of type '" "TokenLocation *""'"); 
    }
    arg1 = reinterpret_cast< TokenLocation * >(argp1);
    result = (OffsetT) ((arg1)->length);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenLocation__SWIG_0) {
  {
    OffsetT arg1 ;
    OffsetT arg2 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TokenLocation *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_TokenLocation(my_offset,my_length);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TokenLocation" "', argument " "1"" of type '" "OffsetT""'");
    } 
    arg1 = static_cast< OffsetT >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TokenLocation" "', argument " "2"" of type '" "OffsetT""'");
    } 
    arg2 = static_cast< OffsetT >(val2);
    result = (TokenLocation *)new TokenLocation(arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenLocation, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenLocation__SWIG_1) {
  {
    OffsetT arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TokenLocation *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_TokenLocation(my_offset);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TokenLocation" "', argument " "1"" of type '" "OffsetT""'");
    } 
    arg1 = static_cast< OffsetT >(val1);
    result = (TokenLocation *)new TokenLocation(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenLocation, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenLocation__SWIG_2) {
  {
    int argvi = 0;
    TokenLocation *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TokenLocation();");
    }
    result = (TokenLocation *)new TokenLocation();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenLocation, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_TokenLocation) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TokenLocation__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TokenLocation__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_TokenLocation__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_TokenLocation'");
  XSRETURN(0);
}


XS(_wrap_delete_TokenLocation) {
  {
    TokenLocation *arg1 = (TokenLocation *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TokenLocation(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenLocation, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TokenLocation" "', argument " "1"" of type '" "TokenLocation *""'"); 
    }
    arg1 = reinterpret_cast< TokenLocation * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TokenLocation_clear) {
  {
    TokenLocation *arg1 = (TokenLocation *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TokenLocation_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TokenLocation, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TokenLocation_clear" "', argument " "1"" of type '" "TokenLocation *""'"); 
    }
    arg1 = reinterpret_cast< TokenLocation * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_type_set) {
  {
    Token *arg1 = (Token *) 0 ;
    mootTokenType arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Token_type_set(self,tok_type);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_type_set" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Token_type_set" "', argument " "2"" of type '" "mootTokenType""'");
    } 
    arg2 = static_cast< mootTokenType >(val2);
    if (arg1) (arg1)->tok_type = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_type_get) {
  {
    Token *arg1 = (Token *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    mootTokenType result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Token_type_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_type_get" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    result = (mootTokenType) ((arg1)->tok_type);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_text_set) {
  {
    Token *arg1 = (Token *) 0 ;
    mootTokString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Token_text_set(self,tok_text);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_text_set" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Token_text_set" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Token_text_set" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->tok_text = *arg2;
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_Token_text_get) {
  {
    Token *arg1 = (Token *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    mootTokString *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Token_text_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_text_get" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    result = (mootTokString *) & ((arg1)->tok_text);
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_tag_set) {
  {
    Token *arg1 = (Token *) 0 ;
    mootTagString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Token_tag_set(self,tok_besttag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_tag_set" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Token_tag_set" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Token_tag_set" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->tok_besttag = *arg2;
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_Token_tag_get) {
  {
    Token *arg1 = (Token *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    mootTagString *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Token_tag_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_tag_get" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    result = (mootTagString *) & ((arg1)->tok_besttag);
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_analyses_set) {
  {
    Token *arg1 = (Token *) 0 ;
    TokenAnalyses *arg2 = (TokenAnalyses *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Token_analyses_set(self,tok_analyses);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_analyses_set" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Token_analyses_set" "', argument " "2"" of type '" "TokenAnalyses *""'"); 
    }
    arg2 = reinterpret_cast< TokenAnalyses * >(argp2);
    if (arg1) (arg1)->tok_analyses = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_analyses_get) {
  {
    Token *arg1 = (Token *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TokenAnalyses *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Token_analyses_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_analyses_get" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    result = (TokenAnalyses *)& ((arg1)->tok_analyses);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_TokenAnalysis_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_location_set) {
  {
    Token *arg1 = (Token *) 0 ;
    TokenLocation *arg2 = (TokenLocation *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Token_location_set(self,tok_location);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_location_set" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_TokenLocation, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Token_location_set" "', argument " "2"" of type '" "TokenLocation *""'"); 
    }
    arg2 = reinterpret_cast< TokenLocation * >(argp2);
    if (arg1) (arg1)->tok_location = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_location_get) {
  {
    Token *arg1 = (Token *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TokenLocation *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Token_location_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_location_get" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    result = (TokenLocation *)& ((arg1)->tok_location);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TokenLocation, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Token__SWIG_0) {
  {
    mootTokenType arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Token *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_Token(type);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Token" "', argument " "1"" of type '" "mootTokenType""'");
    } 
    arg1 = static_cast< mootTokenType >(val1);
    result = (Token *)new Token(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Token, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Token__SWIG_1) {
  {
    int argvi = 0;
    Token *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_Token();");
    }
    result = (Token *)new Token();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Token, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_Token__SWIG_2) {
  {
    mootTokString *arg1 = 0 ;
    mootTokenType arg2 ;
    int res1 = SWIG_OLDOBJ ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Token *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_Token(text,type);");
    }
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Token" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Token" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      arg1 = ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Token" "', argument " "2"" of type '" "mootTokenType""'");
    } 
    arg2 = static_cast< mootTokenType >(val2);
    result = (Token *)new Token((mootTokString const &)*arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Token, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    XSRETURN(argvi);
  fail:
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Token__SWIG_3) {
  {
    mootTokString *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    int argvi = 0;
    Token *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_Token(text);");
    }
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Token" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Token" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      arg1 = ptr;
    }
    result = (Token *)new Token((mootTokString const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Token, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (SWIG_IsNewObj(res1)) delete arg1;
    XSRETURN(argvi);
  fail:
    if (SWIG_IsNewObj(res1)) delete arg1;
    SWIG_croak_null();
  }
}


XS(_wrap_new_Token__SWIG_4) {
  {
    mootTokString *arg1 = 0 ;
    TokenAnalyses *arg2 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    Token *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_Token(text,analyses);");
    }
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Token" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Token" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      arg1 = ptr;
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_TokenAnalysis_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Token" "', argument " "2"" of type '" "TokenAnalyses const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Token" "', argument " "2"" of type '" "TokenAnalyses const &""'"); 
    }
    arg2 = reinterpret_cast< TokenAnalyses * >(argp2);
    result = (Token *)new Token((mootTokString const &)*arg1,(TokenAnalyses const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Token, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    XSRETURN(argvi);
  fail:
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Token__SWIG_5) {
  {
    mootTokString *arg1 = 0 ;
    TokenAnalyses *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    void *argp2 ;
    int res2 = 0 ;
    int res3 = SWIG_OLDOBJ ;
    int argvi = 0;
    Token *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_Token(text,analyses,besttag);");
    }
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Token" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Token" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      arg1 = ptr;
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_TokenAnalysis_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Token" "', argument " "2"" of type '" "TokenAnalyses const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Token" "', argument " "2"" of type '" "TokenAnalyses const &""'"); 
    }
    arg2 = reinterpret_cast< TokenAnalyses * >(argp2);
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Token" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Token" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    result = (Token *)new Token((mootTokString const &)*arg1,(TokenAnalyses const &)*arg2,(mootTagString const &)*arg3);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Token, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    if (SWIG_IsNewObj(res3)) delete arg3;
    XSRETURN(argvi);
  fail:
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    if (SWIG_IsNewObj(res3)) delete arg3;
    SWIG_croak_null();
  }
}


XS(_wrap_new_Token) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__listT_TokenAnalysis_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__listT_TokenAnalysis_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Token__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Token__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Token__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Token__SWIG_4); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Token__SWIG_2); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Token__SWIG_5); return;
    }
  }
  
  croak("No matching function for overloaded 'new_Token'");
  XSRETURN(0);
}


XS(_wrap_delete_Token) {
  {
    Token *arg1 = (Token *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Token(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Token" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_clear) {
  {
    Token *arg1 = (Token *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Token_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_clear" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_insert__SWIG_0) {
  {
    Token *arg1 = (Token *) 0 ;
    TokenAnalysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Token_insert(self,analysis);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_insert" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_TokenAnalysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Token_insert" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Token_insert" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    arg2 = reinterpret_cast< TokenAnalysis * >(argp2);
    (arg1)->insert((TokenAnalysis const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_insert__SWIG_1) {
  {
    Token *arg1 = (Token *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Token_insert(self,tag,details);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_insert" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Token_insert" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Token_insert" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    (arg1)->insert((char const *)arg2,(char const *)arg3);
    ST(argvi) = sv_newmortal();
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_Token_insert) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Token, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_TokenAnalysis, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Token, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Token_insert__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Token_insert__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'Token_insert'");
  XSRETURN(0);
}


XS(_wrap_Token_erase) {
  {
    Token *arg1 = (Token *) 0 ;
    TokenAnalysis *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Token_erase(self,analysis);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_erase" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_TokenAnalysis,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Token_erase" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Token_erase" "', argument " "2"" of type '" "TokenAnalysis const &""'"); 
    }
    arg2 = reinterpret_cast< TokenAnalysis * >(argp2);
    (arg1)->erase((TokenAnalysis const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Token_flavor) {
  {
    Token *arg1 = (Token *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    mootTokenFlavor result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Token_flavor(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Token, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Token_flavor" "', argument " "1"" of type '" "Token *""'"); 
    }
    arg1 = reinterpret_cast< Token * >(argp1);
    result = (mootTokenFlavor)Token_flavor(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_tokenFlavor) {
  {
    mootTokString *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    int argvi = 0;
    mootTokenFlavor result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: tokenFlavor(token_text);");
    }
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tokenFlavor" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenFlavor" "', argument " "1"" of type '" "mootTokString const &""'"); 
      }
      arg1 = ptr;
    }
    result = (mootTokenFlavor)tokenFlavor((std::string const &)*arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (SWIG_IsNewObj(res1)) delete arg1;
    XSRETURN(argvi);
  fail:
    if (SWIG_IsNewObj(res1)) delete arg1;
    SWIG_croak_null();
  }
}


XS(_wrap_new_Sentence) {
  {
    int argvi = 0;
    std::list< Token > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_Sentence();");
    }
    result = (std::list< Token > *)new std::list< Token >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_Token_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Sentence) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Sentence(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sentence" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_clear) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Sentence_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_clear" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_size) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Sentence_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_size" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    result = (arg1)->size();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_empty) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Sentence_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_empty" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    result = (bool)(arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_front) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Token *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Sentence_front(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_front" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    result = (Token *) &std_list_Sl_Token_Sg__front(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Token, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_back) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Token *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Sentence_back(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_back" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    result = (Token *) &std_list_Sl_Token_Sg__back(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Token, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_rotate__SWIG_0) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::list< Token > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Sentence_rotate(self,n);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_rotate" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sentence_rotate" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (std::list< Token > *)std_list_Sl_Token_Sg__rotate__SWIG_0(arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_Token_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_rotate__SWIG_1) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::list< Token > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Sentence_rotate(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_rotate" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    result = (std::list< Token > *)std_list_Sl_Token_Sg__rotate__SWIG_0(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_Token_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_rotate) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__listT_Token_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__listT_Token_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Sentence_rotate__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Sentence_rotate__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'Sentence_rotate'");
  XSRETURN(0);
}


XS(_wrap_Sentence_push_front) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    Token *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Sentence_push_front(self,elt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_push_front" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Token,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sentence_push_front" "', argument " "2"" of type '" "Token const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sentence_push_front" "', argument " "2"" of type '" "Token const &""'"); 
    }
    arg2 = reinterpret_cast< Token * >(argp2);
    (arg1)->push_front((Token const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_push_back) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    Token *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Sentence_push_back(self,elt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_push_back" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Token,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sentence_push_back" "', argument " "2"" of type '" "Token const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sentence_push_back" "', argument " "2"" of type '" "Token const &""'"); 
    }
    arg2 = reinterpret_cast< Token * >(argp2);
    (arg1)->push_back((Token const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_pop_front) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Sentence_pop_front(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_pop_front" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    (arg1)->pop_front();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Sentence_pop_back) {
  {
    std::list< Token > *arg1 = (std::list< Token > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Sentence_pop_back(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__listT_Token_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sentence_pop_back" "', argument " "1"" of type '" "std::list< Token > *""'"); 
    }
    arg1 = reinterpret_cast< std::list< Token > * >(argp1);
    (arg1)->pop_back();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_StringEnum__SWIG_0) {
  {
    int argvi = 0;
    mootEnum< std::string > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_StringEnum();");
    }
    result = (mootEnum< std::string > *)new mootEnum< std::string >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_StringEnum__SWIG_1) {
  {
    std::string *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    int argvi = 0;
    mootEnum< std::string > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_StringEnum(unknownName);");
    }
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringEnum" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringEnum" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      arg1 = ptr;
    }
    result = (mootEnum< std::string > *)new mootEnum< std::string >((std::string const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (SWIG_IsNewObj(res1)) delete arg1;
    XSRETURN(argvi);
  fail:
    if (SWIG_IsNewObj(res1)) delete arg1;
    SWIG_croak_null();
  }
}


XS(_wrap_new_StringEnum) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_StringEnum__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_StringEnum__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_StringEnum'");
  XSRETURN(0);
}


XS(_wrap_delete_StringEnum) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_StringEnum(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringEnum" "', argument " "1"" of type '" "mootEnum< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_clear) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: StringEnum_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_clear" "', argument " "1"" of type '" "mootEnum< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_unknown_name__SWIG_0) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: StringEnum_unknown_name(self,name);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_unknown_name" "', argument " "1"" of type '" "mootEnum< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringEnum_unknown_name" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringEnum_unknown_name" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    (arg1)->unknown_name((std::string const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_nameExists) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: StringEnum_nameExists(self,name);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_nameExists" "', argument " "1"" of type '" "mootEnum< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringEnum_nameExists" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringEnum_nameExists" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    result = (bool)((mootEnum< std::string > const *)arg1)->nameExists((std::string const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_idExists) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    mootEnumID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: StringEnum_idExists(self,id);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_idExists" "', argument " "1"" of type '" "mootEnum< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringEnum_idExists" "', argument " "2"" of type '" "mootEnumID""'");
    } 
    arg2 = static_cast< mootEnumID >(val2);
    result = (bool)((mootEnum< std::string > const *)arg1)->idExists(arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_size) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    mootEnumID result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: StringEnum_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_size" "', argument " "1"" of type '" "mootEnum< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    result = (mootEnumID)((mootEnum< std::string > const *)arg1)->size();
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_name2id) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    mootEnumID result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: StringEnum_name2id(self,name);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_name2id" "', argument " "1"" of type '" "mootEnum< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringEnum_name2id" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringEnum_name2id" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    result = (mootEnumID)((mootEnum< std::string > const *)arg1)->name2id((std::string const &)*arg2);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_id2name) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    mootEnumID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::string *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: StringEnum_id2name(self,id);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_id2name" "', argument " "1"" of type '" "mootEnum< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringEnum_id2name" "', argument " "2"" of type '" "mootEnumID""'");
    } 
    arg2 = static_cast< mootEnumID >(val2);
    result = (std::string *) &((mootEnum< std::string > const *)arg1)->id2name(arg2);
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_insert__SWIG_0) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    std::string *arg2 = 0 ;
    mootEnumID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    mootEnumID result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: StringEnum_insert(self,name,id);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_insert" "', argument " "1"" of type '" "mootEnum< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringEnum_insert" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringEnum_insert" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringEnum_insert" "', argument " "3"" of type '" "mootEnumID""'");
    } 
    arg3 = static_cast< mootEnumID >(val3);
    result = (mootEnumID)(arg1)->insert((std::string const &)*arg2,arg3);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_insert__SWIG_1) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    mootEnumID result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: StringEnum_insert(self,name);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_insert" "', argument " "1"" of type '" "mootEnum< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringEnum_insert" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringEnum_insert" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    result = (mootEnumID)(arg1)->insert((std::string const &)*arg2);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_insert) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_StringEnum_insert__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_StringEnum_insert__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'StringEnum_insert'");
  XSRETURN(0);
}


XS(_wrap_StringEnum_unknown_name__SWIG_1) {
  {
    mootEnum< std::string > *arg1 = (mootEnum< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::string *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: StringEnum_unknown_name(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringEnum_unknown_name" "', argument " "1"" of type '" "mootEnum< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< mootEnum< std::string > * >(argp1);
    result = (std::string *) &mootEnum_Sl_std_string_Sg__unknown_name__SWIG_1(arg1);
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringEnum_unknown_name) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_StringEnum_unknown_name__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_StringEnum_unknown_name__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'StringEnum_unknown_name'");
  XSRETURN(0);
}


XS(_wrap_IdProbAssocVectorNode_first_set) {
  {
    std::pair< mootEnumID,ProbT > *arg1 = (std::pair< mootEnumID,ProbT > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IdProbAssocVectorNode_first_set(self,first);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVectorNode_first_set" "', argument " "1"" of type '" "std::pair< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< mootEnumID,ProbT > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdProbAssocVectorNode_first_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    if (arg1) (arg1)->first = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdProbAssocVectorNode_first_get) {
  {
    std::pair< mootEnumID,ProbT > *arg1 = (std::pair< mootEnumID,ProbT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IdProbAssocVectorNode_first_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVectorNode_first_get" "', argument " "1"" of type '" "std::pair< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< mootEnumID,ProbT > * >(argp1);
    result = (unsigned int) ((arg1)->first);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdProbAssocVectorNode_second_set) {
  {
    std::pair< mootEnumID,ProbT > *arg1 = (std::pair< mootEnumID,ProbT > *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IdProbAssocVectorNode_second_set(self,second);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVectorNode_second_set" "', argument " "1"" of type '" "std::pair< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< mootEnumID,ProbT > * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdProbAssocVectorNode_second_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->second = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdProbAssocVectorNode_second_get) {
  {
    std::pair< mootEnumID,ProbT > *arg1 = (std::pair< mootEnumID,ProbT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IdProbAssocVectorNode_second_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVectorNode_second_get" "', argument " "1"" of type '" "std::pair< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< mootEnumID,ProbT > * >(argp1);
    result = (float) ((arg1)->second);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IdProbAssocVectorNode__SWIG_0) {
  {
    int argvi = 0;
    std::pair< mootEnumID,ProbT > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_IdProbAssocVectorNode();");
    }
    result = (std::pair< mootEnumID,ProbT > *)new std::pair< mootEnumID,ProbT >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_float_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_IdProbAssocVectorNode__SWIG_1) {
  {
    unsigned int arg1 ;
    float arg2 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::pair< mootEnumID,ProbT > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_IdProbAssocVectorNode(x1,x2);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IdProbAssocVectorNode" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IdProbAssocVectorNode" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    result = (std::pair< mootEnumID,ProbT > *)new std::pair< mootEnumID,ProbT >(arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_float_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IdProbAssocVectorNode__SWIG_2) {
  {
    std::pair< unsigned int,float > arg1 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    std::pair< mootEnumID,ProbT > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_IdProbAssocVectorNode(p1);");
    }
    {
      res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_std__pairT_unsigned_int_float_t,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IdProbAssocVectorNode" "', argument " "1"" of type '" "std::pair< unsigned int,float >""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IdProbAssocVectorNode" "', argument " "1"" of type '" "std::pair< unsigned int,float >""'");
      } else {
        arg1 = *(reinterpret_cast< std::pair< unsigned int,float > * >(argp1));
      }
    }
    result = (std::pair< mootEnumID,ProbT > *)new std::pair< mootEnumID,ProbT >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_float_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_IdProbAssocVectorNode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__pairT_unsigned_int_float_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IdProbAssocVectorNode__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IdProbAssocVectorNode__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IdProbAssocVectorNode__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_IdProbAssocVectorNode'");
  XSRETURN(0);
}


XS(_wrap_delete_IdProbAssocVectorNode) {
  {
    std::pair< mootEnumID,ProbT > *arg1 = (std::pair< mootEnumID,ProbT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IdProbAssocVectorNode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_unsigned_int_float_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IdProbAssocVectorNode" "', argument " "1"" of type '" "std::pair< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< mootEnumID,ProbT > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IdProbAssocVector__SWIG_0) {
  {
    int argvi = 0;
    AssocVector< mootEnumID,ProbT > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_IdProbAssocVector();");
    }
    result = (AssocVector< mootEnumID,ProbT > *)new AssocVector< mootEnumID,ProbT >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_IdProbAssocVector__SWIG_1) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    AssocVector< mootEnumID,ProbT > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_IdProbAssocVector(mysize);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IdProbAssocVector" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (AssocVector< mootEnumID,ProbT > *)new AssocVector< mootEnumID,ProbT >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IdProbAssocVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IdProbAssocVector__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IdProbAssocVector__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_IdProbAssocVector'");
  XSRETURN(0);
}


XS(_wrap_delete_IdProbAssocVector) {
  {
    AssocVector< mootEnumID,ProbT > *arg1 = (AssocVector< mootEnumID,ProbT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IdProbAssocVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IdProbAssocVector" "', argument " "1"" of type '" "AssocVector< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< AssocVector< mootEnumID,ProbT > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdProbAssocVector_clear) {
  {
    AssocVector< mootEnumID,ProbT > *arg1 = (AssocVector< mootEnumID,ProbT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IdProbAssocVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVector_clear" "', argument " "1"" of type '" "AssocVector< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< AssocVector< mootEnumID,ProbT > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdProbAssocVector_size) {
  {
    AssocVector< mootEnumID,ProbT > *arg1 = (AssocVector< mootEnumID,ProbT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IdProbAssocVector_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVector_size" "', argument " "1"" of type '" "AssocVector< mootEnumID,ProbT > const *""'"); 
    }
    arg1 = reinterpret_cast< AssocVector< mootEnumID,ProbT > * >(argp1);
    result = ((AssocVector< mootEnumID,ProbT > const *)arg1)->size();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdProbAssocVector_find_index) {
  {
    AssocVector< mootEnumID,ProbT > *arg1 = (AssocVector< mootEnumID,ProbT > *) 0 ;
    unsigned int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int temp2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IdProbAssocVector_find_index(self,key);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVector_find_index" "', argument " "1"" of type '" "AssocVector< mootEnumID,ProbT > const *""'"); 
    }
    arg1 = reinterpret_cast< AssocVector< mootEnumID,ProbT > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdProbAssocVector_find_index" "', argument " "2"" of type '" "unsigned int""'");
    } 
    temp2 = static_cast< unsigned int >(val2);
    arg2 = &temp2;
    result = (int)AssocVector_Sl_mootEnumID_Sc_ProbT_Sg__find_index((AssocVector< unsigned int,float > const *)arg1,(unsigned int const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdProbAssocVector_nth) {
  {
    AssocVector< mootEnumID,ProbT > *arg1 = (AssocVector< mootEnumID,ProbT > *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::pair< unsigned int,float > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IdProbAssocVector_nth(self,n);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVector_nth" "', argument " "1"" of type '" "AssocVector< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< AssocVector< mootEnumID,ProbT > * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdProbAssocVector_nth" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (std::pair< unsigned int,float > *) &(arg1)->nth(arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_float_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdProbAssocVector_get_node) {
  {
    AssocVector< mootEnumID,ProbT > *arg1 = (AssocVector< mootEnumID,ProbT > *) 0 ;
    unsigned int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int temp2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::pair< unsigned int,float > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IdProbAssocVector_get_node(self,key);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVector_get_node" "', argument " "1"" of type '" "AssocVector< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< AssocVector< mootEnumID,ProbT > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdProbAssocVector_get_node" "', argument " "2"" of type '" "unsigned int""'");
    } 
    temp2 = static_cast< unsigned int >(val2);
    arg2 = &temp2;
    result = (std::pair< unsigned int,float > *) &(arg1)->get_node((unsigned int const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_float_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdProbAssocVector_insert) {
  {
    AssocVector< mootEnumID,ProbT > *arg1 = (AssocVector< mootEnumID,ProbT > *) 0 ;
    unsigned int *arg2 = 0 ;
    float *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int temp2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    float temp3 ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IdProbAssocVector_insert(self,key,val);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdProbAssocVector_insert" "', argument " "1"" of type '" "AssocVector< mootEnumID,ProbT > *""'"); 
    }
    arg1 = reinterpret_cast< AssocVector< mootEnumID,ProbT > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdProbAssocVector_insert" "', argument " "2"" of type '" "unsigned int""'");
    } 
    temp2 = static_cast< unsigned int >(val2);
    arg2 = &temp2;
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IdProbAssocVector_insert" "', argument " "3"" of type '" "float""'");
    } 
    temp3 = static_cast< float >(val3);
    arg3 = &temp3;
    (arg1)->insert((unsigned int const &)*arg2,(float const &)*arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HMMLexProbTable__SWIG_0) {
  {
    int argvi = 0;
    std::vector< HMMLexProbSubTableT > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_HMMLexProbTable();");
    }
    result = (std::vector< HMMLexProbSubTableT > *)new std::vector< HMMLexProbSubTableT >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_HMMLexProbTable__SWIG_1) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< HMMLexProbSubTableT > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_HMMLexProbTable(n);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HMMLexProbTable" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (std::vector< HMMLexProbSubTableT > *)new std::vector< HMMLexProbSubTableT >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HMMLexProbTable) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_HMMLexProbTable__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_HMMLexProbTable__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_HMMLexProbTable'");
  XSRETURN(0);
}


XS(_wrap_delete_HMMLexProbTable) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_HMMLexProbTable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HMMLexProbTable" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_clear) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMLexProbTable_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_clear" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_reserve) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMMLexProbTable_reserve(self,n);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_reserve" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMMLexProbTable_reserve" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    (arg1)->reserve(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_resize) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMMLexProbTable_resize(self,n);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_resize" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMMLexProbTable_resize" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    (arg1)->resize(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_size) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMLexProbTable_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_size" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    result = (arg1)->size();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_empty) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMLexProbTable_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_empty" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    result = (bool)(arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_front) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    AssocVector< unsigned int,float > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMLexProbTable_front(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_front" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    result = (AssocVector< unsigned int,float > *) &std_vector_Sl_HMMLexProbSubTableT_Sg__front(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_back) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    AssocVector< unsigned int,float > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMLexProbTable_back(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_back" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    result = (AssocVector< unsigned int,float > *) &std_vector_Sl_HMMLexProbSubTableT_Sg__back(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_nth) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    AssocVector< unsigned int,float > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMMLexProbTable_nth(self,n);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_nth" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMMLexProbTable_nth" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (AssocVector< unsigned int,float > *) &std_vector_Sl_HMMLexProbSubTableT_Sg__nth(arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_push) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    AssocVector< unsigned int,float > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMMLexProbTable_push(self,elt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_push" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_AssocVectorT_unsigned_int_float_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMMLexProbTable_push" "', argument " "2"" of type '" "AssocVector< unsigned int,float > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMMLexProbTable_push" "', argument " "2"" of type '" "AssocVector< unsigned int,float > const &""'"); 
    }
    arg2 = reinterpret_cast< AssocVector< unsigned int,float > * >(argp2);
    (arg1)->push_back((AssocVector< unsigned int,float > const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMLexProbTable_pop_back) {
  {
    std::vector< HMMLexProbSubTableT > *arg1 = (std::vector< HMMLexProbSubTableT > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMLexProbTable_pop_back(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMLexProbTable_pop_back" "', argument " "1"" of type '" "std::vector< HMMLexProbSubTableT > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< HMMLexProbSubTableT > * >(argp1);
    (arg1)->pop_back();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Trigram_tag1_set) {
  {
    Trigram *arg1 = (Trigram *) 0 ;
    TagID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Trigram_tag1_set(self,tag1);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Trigram, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trigram_tag1_set" "', argument " "1"" of type '" "Trigram *""'"); 
    }
    arg1 = reinterpret_cast< Trigram * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Trigram_tag1_set" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    if (arg1) (arg1)->tag1 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Trigram_tag1_get) {
  {
    Trigram *arg1 = (Trigram *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TagID result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Trigram_tag1_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Trigram, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trigram_tag1_get" "', argument " "1"" of type '" "Trigram *""'"); 
    }
    arg1 = reinterpret_cast< Trigram * >(argp1);
    result = (TagID) ((arg1)->tag1);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Trigram_tag2_set) {
  {
    Trigram *arg1 = (Trigram *) 0 ;
    TagID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Trigram_tag2_set(self,tag2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Trigram, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trigram_tag2_set" "', argument " "1"" of type '" "Trigram *""'"); 
    }
    arg1 = reinterpret_cast< Trigram * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Trigram_tag2_set" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    if (arg1) (arg1)->tag2 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Trigram_tag2_get) {
  {
    Trigram *arg1 = (Trigram *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TagID result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Trigram_tag2_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Trigram, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trigram_tag2_get" "', argument " "1"" of type '" "Trigram *""'"); 
    }
    arg1 = reinterpret_cast< Trigram * >(argp1);
    result = (TagID) ((arg1)->tag2);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Trigram_tag3_set) {
  {
    Trigram *arg1 = (Trigram *) 0 ;
    TagID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Trigram_tag3_set(self,tag3);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Trigram, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trigram_tag3_set" "', argument " "1"" of type '" "Trigram *""'"); 
    }
    arg1 = reinterpret_cast< Trigram * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Trigram_tag3_set" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    if (arg1) (arg1)->tag3 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Trigram_tag3_get) {
  {
    Trigram *arg1 = (Trigram *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TagID result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Trigram_tag3_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Trigram, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trigram_tag3_get" "', argument " "1"" of type '" "Trigram *""'"); 
    }
    arg1 = reinterpret_cast< Trigram * >(argp1);
    result = (TagID) ((arg1)->tag3);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Trigram__SWIG_0) {
  {
    TagID arg1 ;
    TagID arg2 ;
    TagID arg3 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    Trigram *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_Trigram(t1,t2,t3);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Trigram" "', argument " "1"" of type '" "TagID""'");
    } 
    arg1 = static_cast< TagID >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Trigram" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Trigram" "', argument " "3"" of type '" "TagID""'");
    } 
    arg3 = static_cast< TagID >(val3);
    result = (Trigram *)new Trigram(arg1,arg2,arg3);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Trigram, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Trigram__SWIG_1) {
  {
    TagID arg1 ;
    TagID arg2 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Trigram *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_Trigram(t1,t2);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Trigram" "', argument " "1"" of type '" "TagID""'");
    } 
    arg1 = static_cast< TagID >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Trigram" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    result = (Trigram *)new Trigram(arg1,arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Trigram, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Trigram__SWIG_2) {
  {
    TagID arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Trigram *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_Trigram(t1);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Trigram" "', argument " "1"" of type '" "TagID""'");
    } 
    arg1 = static_cast< TagID >(val1);
    result = (Trigram *)new Trigram(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Trigram, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Trigram__SWIG_3) {
  {
    int argvi = 0;
    Trigram *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_Trigram();");
    }
    result = (Trigram *)new Trigram();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Trigram, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_Trigram) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Trigram__SWIG_3); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Trigram__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Trigram__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Trigram__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_Trigram'");
  XSRETURN(0);
}


XS(_wrap_delete_Trigram) {
  {
    Trigram *arg1 = (Trigram *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Trigram(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Trigram, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Trigram" "', argument " "1"" of type '" "Trigram *""'"); 
    }
    arg1 = reinterpret_cast< Trigram * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Trigram_hash) {
  {
    Trigram *arg1 = (Trigram *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Trigram_hash(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Trigram, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Trigram_hash" "', argument " "1"" of type '" "Trigram *""'"); 
    }
    arg1 = reinterpret_cast< Trigram * >(argp1);
    result = Trigram_hash(arg1);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HMMNgramProbHash__SWIG_0) {
  {
    int argvi = 0;
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_HMMNgramProbHash();");
    }
    result = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *)new hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_HMMNgramProbHash__SWIG_1) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_HMMNgramProbHash(n);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HMMNgramProbHash" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *)new hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn >(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HMMNgramProbHash) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_HMMNgramProbHash__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_HMMNgramProbHash__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_HMMNgramProbHash'");
  XSRETURN(0);
}


XS(_wrap_delete_HMMNgramProbHash) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_HMMNgramProbHash(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HMMNgramProbHash" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_clear) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMNgramProbHash_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_clear" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_size) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMNgramProbHash_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_size" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > const *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    result = ((hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > const *)arg1)->size();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_bucket_count) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMNgramProbHash_bucket_count(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_bucket_count" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > const *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    result = ((hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > const *)arg1)->bucket_count();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_empty) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMMNgramProbHash_empty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_empty" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > const *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    result = (bool)((hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > const *)arg1)->empty();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_resize) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMMNgramProbHash_resize(self,n);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_resize" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMMNgramProbHash_resize" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    (arg1)->resize(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_erase) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    Trigram *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMMNgramProbHash_erase(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_erase" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Trigram,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMMNgramProbHash_erase" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMMNgramProbHash_erase" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    arg2 = reinterpret_cast< Trigram * >(argp2);
    (arg1)->erase((Trigram const &)*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_keyExists) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    Trigram *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMMNgramProbHash_keyExists(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_keyExists" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Trigram,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMMNgramProbHash_keyExists" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMMNgramProbHash_keyExists" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    arg2 = reinterpret_cast< Trigram * >(argp2);
    result = (bool)hash_map_Sl_Trigram_Sc_ProbT_Sc_Trigram_HashFcn_Sc_Trigram_EqualFcn_Sg__keyExists(arg1,(Trigram const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_get) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    Trigram *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    float *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMMNgramProbHash_get(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_get" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Trigram,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMMNgramProbHash_get" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMMNgramProbHash_get" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    arg2 = reinterpret_cast< Trigram * >(argp2);
    result = (float *) &hash_map_Sl_Trigram_Sc_ProbT_Sc_Trigram_HashFcn_Sc_Trigram_EqualFcn_Sg__get(arg1,(Trigram const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_getval) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    Trigram *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMMNgramProbHash_getval(self,k);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_getval" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Trigram,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMMNgramProbHash_getval" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMMNgramProbHash_getval" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    arg2 = reinterpret_cast< Trigram * >(argp2);
    result = (float)hash_map_Sl_Trigram_Sc_ProbT_Sc_Trigram_HashFcn_Sc_Trigram_EqualFcn_Sg__getval(arg1,(Trigram const &)*arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMMNgramProbHash_set) {
  {
    hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *arg1 = (hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *) 0 ;
    Trigram *arg2 = 0 ;
    float *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    float temp3 ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMMNgramProbHash_set(self,k,v);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMNgramProbHash_set" "', argument " "1"" of type '" "hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *""'"); 
    }
    arg1 = reinterpret_cast< hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Trigram,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMMNgramProbHash_set" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMMNgramProbHash_set" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    arg2 = reinterpret_cast< Trigram * >(argp2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMMNgramProbHash_set" "', argument " "3"" of type '" "float""'");
    } 
    temp3 = static_cast< float >(val3);
    arg3 = &temp3;
    hash_map_Sl_Trigram_Sc_ProbT_Sc_Trigram_HashFcn_Sc_Trigram_EqualFcn_Sg__set(arg1,(Trigram const &)*arg2,(float const &)*arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_verbose_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_verbose_set(self,verbose);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_verbose_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_verbose_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->verbose = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_verbose_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_verbose_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_verbose_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (int) ((arg1)->verbose);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_ndots_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_ndots_set(self,ndots);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_ndots_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_ndots_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->ndots = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_ndots_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_ndots_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_ndots_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->ndots);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_save_ambiguities_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_save_ambiguities_set(self,save_ambiguities);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save_ambiguities_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_save_ambiguities_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->save_ambiguities = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_save_ambiguities_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_save_ambiguities_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save_ambiguities_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (bool) ((arg1)->save_ambiguities);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_save_flavors_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_save_flavors_set(self,save_flavors);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save_flavors_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_save_flavors_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->save_flavors = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_save_flavors_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_save_flavors_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save_flavors_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (bool) ((arg1)->save_flavors);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_save_mark_unknown_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_save_mark_unknown_set(self,save_mark_unknown);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save_mark_unknown_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_save_mark_unknown_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->save_mark_unknown = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_save_mark_unknown_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_save_mark_unknown_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save_mark_unknown_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (bool) ((arg1)->save_mark_unknown);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_hash_ngrams_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_hash_ngrams_set(self,hash_ngrams);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_hash_ngrams_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_hash_ngrams_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->hash_ngrams = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_hash_ngrams_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_hash_ngrams_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_hash_ngrams_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (bool) ((arg1)->hash_ngrams);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_relax_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_relax_set(self,relax);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_relax_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_relax_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->relax = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_relax_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_relax_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_relax_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (bool) ((arg1)->relax);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_use_lex_classes_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_use_lex_classes_set(self,use_lex_classes);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_use_lex_classes_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_use_lex_classes_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->use_lex_classes = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_use_lex_classes_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_use_lex_classes_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_use_lex_classes_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (bool) ((arg1)->use_lex_classes);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_start_tagid_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    TagID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_start_tagid_set(self,start_tagid);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_start_tagid_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_start_tagid_set" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    if (arg1) (arg1)->start_tagid = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_start_tagid_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TagID result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_start_tagid_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_start_tagid_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (TagID) ((arg1)->start_tagid);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_unknown_lex_threshhold_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_unknown_lex_threshhold_set(self,unknown_lex_threshhold);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_unknown_lex_threshhold_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_unknown_lex_threshhold_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->unknown_lex_threshhold = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_unknown_lex_threshhold_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_unknown_lex_threshhold_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_unknown_lex_threshhold_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->unknown_lex_threshhold);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_unknown_class_threshhold_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_unknown_class_threshhold_set(self,unknown_class_threshhold);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_unknown_class_threshhold_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_unknown_class_threshhold_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->unknown_class_threshhold = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_unknown_class_threshhold_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_unknown_class_threshhold_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_unknown_class_threshhold_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->unknown_class_threshhold);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nglambda1_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_nglambda1_set(self,nglambda1);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nglambda1_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_nglambda1_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->nglambda1 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nglambda1_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_nglambda1_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nglambda1_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->nglambda1);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nglambda2_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_nglambda2_set(self,nglambda2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nglambda2_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_nglambda2_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->nglambda2 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nglambda2_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_nglambda2_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nglambda2_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->nglambda2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nglambda3_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_nglambda3_set(self,nglambda3);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nglambda3_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_nglambda3_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->nglambda3 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nglambda3_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_nglambda3_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nglambda3_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->nglambda3);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_wlambda0_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_wlambda0_set(self,wlambda0);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_wlambda0_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_wlambda0_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->wlambda0 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_wlambda0_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_wlambda0_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_wlambda0_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->wlambda0);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_wlambda1_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_wlambda1_set(self,wlambda1);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_wlambda1_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_wlambda1_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->wlambda1 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_wlambda1_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_wlambda1_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_wlambda1_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->wlambda1);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_clambda0_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_clambda0_set(self,clambda0);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_clambda0_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_clambda0_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->clambda0 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_clambda0_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_clambda0_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_clambda0_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->clambda0);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_clambda1_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_clambda1_set(self,clambda1);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_clambda1_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_clambda1_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->clambda1 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_clambda1_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_clambda1_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_clambda1_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->clambda1);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_beamwd_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_beamwd_set(self,beamwd);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_beamwd_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_beamwd_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->beamwd = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_beamwd_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_beamwd_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_beamwd_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (ProbT) ((arg1)->beamwd);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tokids_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    TokIDEnum *arg2 = (TokIDEnum *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_tokids_set(self,tokids);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tokids_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tokids_set" "', argument " "2"" of type '" "TokIDEnum *""'"); 
    }
    arg2 = reinterpret_cast< TokIDEnum * >(argp2);
    if (arg1) (arg1)->tokids = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tokids_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TokIDEnum *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_tokids_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tokids_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (TokIDEnum *)& ((arg1)->tokids);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagids_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    TagIDEnum *arg2 = (TagIDEnum *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_tagids_set(self,tagids);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagids_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tagids_set" "', argument " "2"" of type '" "TagIDEnum *""'"); 
    }
    arg2 = reinterpret_cast< TagIDEnum * >(argp2);
    if (arg1) (arg1)->tagids = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagids_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TagIDEnum *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_tagids_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagids_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (TagIDEnum *)& ((arg1)->tagids);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_flavid) {
  {
    HMM *arg1 = (HMM *) 0 ;
    mootTokenFlavor arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TokID result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_flavid(self,flav);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_flavid" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_flavid" "', argument " "2"" of type '" "mootTokenFlavor""'");
    } 
    arg2 = static_cast< mootTokenFlavor >(val2);
    result = (TokID)HMM_flavid(arg1,arg2);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_n_tags_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_n_tags_set(self,n_tags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_n_tags_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_n_tags_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->n_tags = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_n_tags_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_n_tags_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_n_tags_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->n_tags);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_n_toks_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_n_toks_set(self,n_toks);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_n_toks_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_n_toks_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->n_toks = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_n_toks_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_n_toks_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_n_toks_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->n_toks);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_n_classes_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_n_classes_set(self,n_classes);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_n_classes_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_n_classes_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->n_classes = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_n_classes_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_n_classes_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_n_classes_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->n_classes);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_lexprobs_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    HMMLexProbTableT *arg2 = (HMMLexProbTableT *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_lexprobs_set(self,lexprobs);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_lexprobs_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_lexprobs_set" "', argument " "2"" of type '" "HMMLexProbTableT *""'"); 
    }
    arg2 = reinterpret_cast< HMMLexProbTableT * >(argp2);
    if (arg1) (arg1)->lexprobs = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_lexprobs_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HMMLexProbTableT *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_lexprobs_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_lexprobs_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (HMMLexProbTableT *)& ((arg1)->lexprobs);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_ngprobsh_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    HMMNgramProbHash *arg2 = (HMMNgramProbHash *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_ngprobsh_set(self,ngprobsh);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_ngprobsh_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_ngprobsh_set" "', argument " "2"" of type '" "HMMNgramProbHash *""'"); 
    }
    arg2 = reinterpret_cast< HMMNgramProbHash * >(argp2);
    if (arg1) (arg1)->ngprobsh = *arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_ngprobsh_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    HMMNgramProbHash *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_ngprobsh_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_ngprobsh_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (HMMNgramProbHash *)& ((arg1)->ngprobsh);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nsents_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_nsents_set(self,nsents);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nsents_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_nsents_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->nsents = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nsents_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_nsents_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nsents_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->nsents);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_ntokens_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_ntokens_set(self,ntokens);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_ntokens_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_ntokens_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->ntokens = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_ntokens_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_ntokens_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_ntokens_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->ntokens);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nnewtokens_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_nnewtokens_set(self,nnewtokens);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nnewtokens_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_nnewtokens_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->nnewtokens = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nnewtokens_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_nnewtokens_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nnewtokens_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->nnewtokens);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nunclassed_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_nunclassed_set(self,nunclassed);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nunclassed_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_nunclassed_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->nunclassed = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nunclassed_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_nunclassed_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nunclassed_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->nunclassed);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nnewclasses_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_nnewclasses_set(self,nnewclasses);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nnewclasses_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_nnewclasses_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->nnewclasses = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nnewclasses_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_nnewclasses_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nnewclasses_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->nnewclasses);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nunknown_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_nunknown_set(self,nunknown);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nunknown_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_nunknown_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->nunknown = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nunknown_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_nunknown_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nunknown_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->nunknown);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nfallbacks_set) {
  {
    HMM *arg1 = (HMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_nfallbacks_set(self,nfallbacks);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nfallbacks_set" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_nfallbacks_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->nfallbacks = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_nfallbacks_get) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_nfallbacks_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_nfallbacks_get" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result =  ((arg1)->nfallbacks);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HMM) {
  {
    int argvi = 0;
    HMM *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_HMM();");
    }
    result = (HMM *)new HMM();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HMM, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_HMM) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_HMM(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HMM" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_clear__SWIG_0) {
  {
    HMM *arg1 = (HMM *) 0 ;
    bool arg2 ;
    bool arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_clear(self,wipe_everything,unlogify);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_clear" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_clear" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMM_clear" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    (arg1)->clear(arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_clear__SWIG_1) {
  {
    HMM *arg1 = (HMM *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_clear(self,wipe_everything);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_clear" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_clear" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    (arg1)->clear(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_clear__SWIG_2) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_clear" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_clear) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_clear__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_clear__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_clear__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'HMM_clear'");
  XSRETURN(0);
}


XS(_wrap_HMM_save__SWIG_0) {
  {
    HMM *arg1 = (HMM *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_save(self,filename,compression_level);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_save" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMM_save" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    result = (bool)(arg1)->save((char const *)arg2,arg3);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_save__SWIG_1) {
  {
    HMM *arg1 = (HMM *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_save(self,filename);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_save" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (bool)(arg1)->save((char const *)arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_save) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_save__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_save__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'HMM_save'");
  XSRETURN(0);
}


XS(_wrap_HMM_load__SWIG_0) {
  {
    HMM *arg1 = (HMM *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_load(self,filename);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_load" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_load" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (bool)(arg1)->load((char const *)arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_load__SWIG_1) {
  {
    HMM *arg1 = (HMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HMM_load(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_load" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    result = (bool)(arg1)->load();
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_load) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_load__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_load__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'HMM_load'");
  XSRETURN(0);
}


XS(_wrap_HMM_load_model__SWIG_0) {
  {
    HMM *arg1 = (HMM *) 0 ;
    std::string *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_load_model(self,modelname,start_tag_str);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_load_model" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_load_model" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_load_model" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HMM_load_model" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_load_model" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    result = (bool)(arg1)->load_model((std::string const &)*arg2,(mootTagString const &)*arg3);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_load_model__SWIG_1) {
  {
    HMM *arg1 = (HMM *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_load_model(self,modelname);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_load_model" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_load_model" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_load_model" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    result = (bool)(arg1)->load_model((std::string const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_load_model) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_load_model__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_load_model__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'HMM_load_model'");
  XSRETURN(0);
}


XS(_wrap_HMM_set_ngram_prob__SWIG_0) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    TagID arg3 ;
    TagID arg4 ;
    TagID arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: HMM_set_ngram_prob(self,p,t1,t2,t3);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_set_ngram_prob" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_set_ngram_prob" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMM_set_ngram_prob" "', argument " "3"" of type '" "TagID""'");
    } 
    arg3 = static_cast< TagID >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HMM_set_ngram_prob" "', argument " "4"" of type '" "TagID""'");
    } 
    arg4 = static_cast< TagID >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HMM_set_ngram_prob" "', argument " "5"" of type '" "TagID""'");
    } 
    arg5 = static_cast< TagID >(val5);
    (arg1)->set_ngram_prob(arg2,arg3,arg4,arg5);
    ST(argvi) = sv_newmortal();
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_set_ngram_prob__SWIG_1) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    TagID arg3 ;
    TagID arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: HMM_set_ngram_prob(self,p,t1,t2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_set_ngram_prob" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_set_ngram_prob" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMM_set_ngram_prob" "', argument " "3"" of type '" "TagID""'");
    } 
    arg3 = static_cast< TagID >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HMM_set_ngram_prob" "', argument " "4"" of type '" "TagID""'");
    } 
    arg4 = static_cast< TagID >(val4);
    (arg1)->set_ngram_prob(arg2,arg3,arg4);
    ST(argvi) = sv_newmortal();
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_set_ngram_prob__SWIG_2) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    TagID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_set_ngram_prob(self,p,t1);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_set_ngram_prob" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_set_ngram_prob" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMM_set_ngram_prob" "', argument " "3"" of type '" "TagID""'");
    } 
    arg3 = static_cast< TagID >(val3);
    (arg1)->set_ngram_prob(arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_set_ngram_prob__SWIG_3) {
  {
    HMM *arg1 = (HMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_set_ngram_prob(self,p);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_set_ngram_prob" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_set_ngram_prob" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    (arg1)->set_ngram_prob(arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_set_ngram_prob) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_set_ngram_prob__SWIG_3); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_set_ngram_prob__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_set_ngram_prob__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_set_ngram_prob__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'HMM_set_ngram_prob'");
  XSRETURN(0);
}


XS(_wrap_HMM_tag_io) {
  {
    HMM *arg1 = (HMM *) 0 ;
    TokenReader *arg2 = (TokenReader *) 0 ;
    TokenWriter *arg3 = (TokenWriter *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_tag_io(self,reader,writer);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tag_io" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_TokenReader, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tag_io" "', argument " "2"" of type '" "TokenReader *""'"); 
    }
    arg2 = reinterpret_cast< TokenReader * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_TokenWriter, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HMM_tag_io" "', argument " "3"" of type '" "TokenWriter *""'"); 
    }
    arg3 = reinterpret_cast< TokenWriter * >(argp3);
    (arg1)->tag_io(arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tag_sentence) {
  {
    HMM *arg1 = (HMM *) 0 ;
    Sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_tag_sentence(self,sentence);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tag_sentence" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_Token_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tag_sentence" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tag_sentence" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    arg2 = reinterpret_cast< Sentence * >(argp2);
    (arg1)->tag_sentence(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tag_dump_trace) {
  {
    HMM *arg1 = (HMM *) 0 ;
    mootSentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_tag_dump_trace(self,sentence);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tag_dump_trace" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_mootSentence,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tag_dump_trace" "', argument " "2"" of type '" "mootSentence &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tag_dump_trace" "', argument " "2"" of type '" "mootSentence &""'"); 
    }
    arg2 = reinterpret_cast< mootSentence * >(argp2);
    (arg1)->tag_dump_trace(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_token2id) {
  {
    HMM *arg1 = (HMM *) 0 ;
    mootTokString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    TokID result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_token2id(self,token);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_token2id" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_token2id" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_token2id" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      arg2 = ptr;
    }
    result = (TokID)((HMM const *)arg1)->token2id((mootTokString const &)*arg2);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_wordp__SWIG_0) {
  {
    HMM *arg1 = (HMM *) 0 ;
    TokID arg2 ;
    TagID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_wordp(self,tokid,tagid);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_wordp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_wordp" "', argument " "2"" of type '" "TokID""'");
    } 
    arg2 = static_cast< TokID >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMM_wordp" "', argument " "3"" of type '" "TagID""'");
    } 
    arg3 = static_cast< TagID >(val3);
    result = (ProbT)((HMM const *)arg1)->wordp(arg2,arg3);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_wordp__SWIG_1) {
  {
    HMM *arg1 = (HMM *) 0 ;
    mootTokString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_wordp(self,tokstr,tagstr);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_wordp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_wordp" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_wordp" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HMM_wordp" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_wordp" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    result = (ProbT)((HMM const *)arg1)->wordp((mootTokString const &)*arg2,(mootTagString const &)*arg3);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_wordp) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_wordp__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_wordp__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'HMM_wordp'");
  XSRETURN(0);
}


XS(_wrap_HMM_tagp__SWIG_0) {
  {
    HMM *arg1 = (HMM *) 0 ;
    TagID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_tagp(self,tagid);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_tagp" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    result = (ProbT)((HMM const *)arg1)->tagp(arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagp__SWIG_1) {
  {
    HMM *arg1 = (HMM *) 0 ;
    mootTagString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_tagp(self,tagstr);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tagp" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tagp" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    result = (ProbT)((HMM const *)arg1)->tagp((mootTagString const &)*arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagp__SWIG_2) {
  {
    HMM *arg1 = (HMM *) 0 ;
    TagID arg2 ;
    TagID arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_tagp(self,tag1id,tag2id);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_tagp" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMM_tagp" "', argument " "3"" of type '" "TagID""'");
    } 
    arg3 = static_cast< TagID >(val3);
    result = (ProbT)((HMM const *)arg1)->tagp(arg2,arg3);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagp__SWIG_3) {
  {
    HMM *arg1 = (HMM *) 0 ;
    mootTagString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_tagp(self,tag1str,tag2str);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tagp" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tagp" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HMM_tagp" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tagp" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    result = (ProbT)((HMM const *)arg1)->tagp((mootTagString const &)*arg2,(mootTagString const &)*arg3);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagp__SWIG_4) {
  {
    HMM *arg1 = (HMM *) 0 ;
    TagID arg2 ;
    TagID arg3 ;
    TagID arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: HMM_tagp(self,tag1id,tag2id,tag3id);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_tagp" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMM_tagp" "', argument " "3"" of type '" "TagID""'");
    } 
    arg3 = static_cast< TagID >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HMM_tagp" "', argument " "4"" of type '" "TagID""'");
    } 
    arg4 = static_cast< TagID >(val4);
    result = (ProbT)((HMM const *)arg1)->tagp(arg2,arg3,arg4);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagp__SWIG_5) {
  {
    HMM *arg1 = (HMM *) 0 ;
    mootTagString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    mootTagString *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int res4 = SWIG_OLDOBJ ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: HMM_tagp(self,tag1str,tag2str,tag3str);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tagp" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tagp" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HMM_tagp" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tagp" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res4 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HMM_tagp" "', argument " "4"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tagp" "', argument " "4"" of type '" "mootTagString const &""'"); 
      }
      arg4 = ptr;
    }
    result = (ProbT)((HMM const *)arg1)->tagp((mootTagString const &)*arg2,(mootTagString const &)*arg3,(mootTagString const &)*arg4);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    if (SWIG_IsNewObj(res4)) delete arg4;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    if (SWIG_IsNewObj(res4)) delete arg4;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagp__SWIG_6) {
  {
    HMM *arg1 = (HMM *) 0 ;
    Trigram *arg2 = 0 ;
    ProbT arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HMM_tagp(self,trigram,ProbZero);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Trigram,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tagp" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tagp" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    arg2 = reinterpret_cast< Trigram * >(argp2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HMM_tagp" "', argument " "3"" of type '" "ProbT""'");
    } 
    arg3 = static_cast< ProbT >(val3);
    result = (ProbT)((HMM const *)arg1)->tagp((Trigram const &)*arg2,arg3);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagp__SWIG_7) {
  {
    HMM *arg1 = (HMM *) 0 ;
    Trigram *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_tagp(self,trigram);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_tagp" "', argument " "1"" of type '" "HMM const *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Trigram,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_tagp" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_tagp" "', argument " "2"" of type '" "Trigram const &""'"); 
    }
    arg2 = reinterpret_cast< Trigram * >(argp2);
    result = (ProbT)((HMM const *)arg1)->tagp((Trigram const &)*arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_tagp) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_Trigram, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_Trigram, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_HMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_tagp__SWIG_7); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_tagp__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_tagp__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_tagp__SWIG_6); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_tagp__SWIG_2); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_tagp__SWIG_3); return;
    case 7:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_tagp__SWIG_4); return;
    case 8:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_HMM_tagp__SWIG_5); return;
    }
  }
  
  croak("No matching function for overloaded 'HMM_tagp'");
  XSRETURN(0);
}


XS(_wrap_HMM_carp) {
  {
    HMM *arg1 = (HMM *) 0 ;
    char *arg2 = (char *) 0 ;
    void *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if (items < 2) {
      SWIG_croak("Usage: HMM_carp(self,fmt,...);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_carp" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_carp" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    (arg1)->carp((char const *)arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_HMM_txtdump) {
  {
    HMM *arg1 = (HMM *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HMM_txtdump(self,filename);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_HMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_txtdump" "', argument " "1"" of type '" "HMM *""'"); 
    }
    arg1 = reinterpret_cast< HMM * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_txtdump" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    HMM_txtdump(arg1,(char const *)arg2);
    ST(argvi) = sv_newmortal();
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_new_DynHMM) {
  {
    int argvi = 0;
    DynHMM *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_DynHMM();");
    }
    result = (DynHMM *)new DynHMM();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DynHMM, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DynHMM) {
  {
    DynHMM *arg1 = (DynHMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DynHMM(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynHMM, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynHMM" "', argument " "1"" of type '" "DynHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynHMM * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynHMM_tag_hook_pre) {
  {
    DynHMM *arg1 = (DynHMM *) 0 ;
    Sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynHMM_tag_hook_pre(self,sent);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynHMM_tag_hook_pre" "', argument " "1"" of type '" "DynHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynHMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_Token_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynHMM_tag_hook_pre" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynHMM_tag_hook_pre" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    arg2 = reinterpret_cast< Sentence * >(argp2);
    (arg1)->tag_hook_pre(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynHMM_tag_hook_post) {
  {
    DynHMM *arg1 = (DynHMM *) 0 ;
    Sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynHMM_tag_hook_post(self,sent);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynHMM_tag_hook_post" "', argument " "1"" of type '" "DynHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynHMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_Token_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynHMM_tag_hook_post" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynHMM_tag_hook_post" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    arg2 = reinterpret_cast< Sentence * >(argp2);
    (arg1)->tag_hook_post(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynHMM_tag_io) {
  {
    DynHMM *arg1 = (DynHMM *) 0 ;
    TokenReader *arg2 = (TokenReader *) 0 ;
    TokenWriter *arg3 = (TokenWriter *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: DynHMM_tag_io(self,reader,writer);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynHMM_tag_io" "', argument " "1"" of type '" "DynHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynHMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_TokenReader, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynHMM_tag_io" "', argument " "2"" of type '" "TokenReader *""'"); 
    }
    arg2 = reinterpret_cast< TokenReader * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_TokenWriter, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynHMM_tag_io" "', argument " "3"" of type '" "TokenWriter *""'"); 
    }
    arg3 = reinterpret_cast< TokenWriter * >(argp3);
    (arg1)->tag_io(arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynHMM_tag_sentence) {
  {
    DynHMM *arg1 = (DynHMM *) 0 ;
    Sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynHMM_tag_sentence(self,sentence);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynHMM_tag_sentence" "', argument " "1"" of type '" "DynHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynHMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_Token_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynHMM_tag_sentence" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynHMM_tag_sentence" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    arg2 = reinterpret_cast< Sentence * >(argp2);
    (arg1)->tag_sentence(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_invert_lexp_set) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_invert_lexp_set(self,invert_lexp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_invert_lexp_set" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynLexHMM_invert_lexp_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->invert_lexp = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_invert_lexp_get) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DynLexHMM_invert_lexp_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_invert_lexp_get" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    result = (bool) ((arg1)->invert_lexp);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_newtag_str_set) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    mootTagString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_newtag_str_set(self,newtag_str);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_newtag_str_set" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynLexHMM_newtag_str_set" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynLexHMM_newtag_str_set" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->newtag_str = *arg2;
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_newtag_str_get) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    mootTagString *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DynLexHMM_newtag_str_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_newtag_str_get" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    result = (mootTagString *) & ((arg1)->newtag_str);
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_newtag_id_set) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    TagID arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_newtag_id_set(self,newtag_id);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_newtag_id_set" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynLexHMM_newtag_id_set" "', argument " "2"" of type '" "TagID""'");
    } 
    arg2 = static_cast< TagID >(val2);
    if (arg1) (arg1)->newtag_id = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_newtag_id_get) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    TagID result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DynLexHMM_newtag_id_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_newtag_id_get" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    result = (TagID) ((arg1)->newtag_id);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_newtag_f_set) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_newtag_f_set(self,newtag_f);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_newtag_f_set" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynLexHMM_newtag_f_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->newtag_f = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_newtag_f_get) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DynLexHMM_newtag_f_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_newtag_f_get" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    result = (ProbT) ((arg1)->newtag_f);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_Ftw_eps_set) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_Ftw_eps_set(self,Ftw_eps);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_Ftw_eps_set" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynLexHMM_Ftw_eps_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->Ftw_eps = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_Ftw_eps_get) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DynLexHMM_Ftw_eps_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_Ftw_eps_get" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    result = (ProbT) ((arg1)->Ftw_eps);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_tagids_size_orig_set) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_tagids_size_orig_set(self,tagids_size_orig);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_tagids_size_orig_set" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynLexHMM_tagids_size_orig_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->tagids_size_orig = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_tagids_size_orig_get) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DynLexHMM_tagids_size_orig_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_tagids_size_orig_get" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    result =  ((arg1)->tagids_size_orig);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DynLexHMM) {
  {
    int argvi = 0;
    DynLexHMM *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_DynLexHMM();");
    }
    result = (DynLexHMM *)new DynLexHMM();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DynLexHMM, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DynLexHMM) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DynLexHMM(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynLexHMM" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_load_model__SWIG_0) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    std::string *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: DynLexHMM_load_model(self,modelname,start_tag_str);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_load_model" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynLexHMM_load_model" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynLexHMM_load_model" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynLexHMM_load_model" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynLexHMM_load_model" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    result = (bool)(arg1)->load_model((std::string const &)*arg2,(mootTagString const &)*arg3);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_load_model__SWIG_1) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_load_model(self,modelname);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_load_model" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynLexHMM_load_model" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynLexHMM_load_model" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    result = (bool)(arg1)->load_model((std::string const &)*arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_load_model) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_DynLexHMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_DynLexHMM, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_DynLexHMM_load_model__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_DynLexHMM_load_model__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'DynLexHMM_load_model'");
  XSRETURN(0);
}


XS(_wrap_DynLexHMM_tag_hook_pre) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    Sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_tag_hook_pre(self,sent);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_tag_hook_pre" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_Token_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynLexHMM_tag_hook_pre" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynLexHMM_tag_hook_pre" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    arg2 = reinterpret_cast< Sentence * >(argp2);
    (arg1)->tag_hook_pre(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_tag_hook_post) {
  {
    DynLexHMM *arg1 = (DynLexHMM *) 0 ;
    Sentence *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_tag_hook_post(self,sent);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_tag_hook_post" "', argument " "1"" of type '" "DynLexHMM *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__listT_Token_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynLexHMM_tag_hook_post" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynLexHMM_tag_hook_post" "', argument " "2"" of type '" "Sentence &""'"); 
    }
    arg2 = reinterpret_cast< Sentence * >(argp2);
    (arg1)->tag_hook_post(*arg2);
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_Boltzmann_dynlex_base_set) {
  {
    DynLexHMM_Boltzmann *arg1 = (DynLexHMM_Boltzmann *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_Boltzmann_dynlex_base_set(self,dynlex_base);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM_Boltzmann, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_Boltzmann_dynlex_base_set" "', argument " "1"" of type '" "DynLexHMM_Boltzmann *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM_Boltzmann * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynLexHMM_Boltzmann_dynlex_base_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->dynlex_base = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_Boltzmann_dynlex_base_get) {
  {
    DynLexHMM_Boltzmann *arg1 = (DynLexHMM_Boltzmann *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DynLexHMM_Boltzmann_dynlex_base_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM_Boltzmann, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_Boltzmann_dynlex_base_get" "', argument " "1"" of type '" "DynLexHMM_Boltzmann *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM_Boltzmann * >(argp1);
    result = (ProbT) ((arg1)->dynlex_base);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_Boltzmann_dynlex_beta_set) {
  {
    DynLexHMM_Boltzmann *arg1 = (DynLexHMM_Boltzmann *) 0 ;
    ProbT arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DynLexHMM_Boltzmann_dynlex_beta_set(self,dynlex_beta);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM_Boltzmann, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_Boltzmann_dynlex_beta_set" "', argument " "1"" of type '" "DynLexHMM_Boltzmann *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM_Boltzmann * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynLexHMM_Boltzmann_dynlex_beta_set" "', argument " "2"" of type '" "ProbT""'");
    } 
    arg2 = static_cast< ProbT >(val2);
    if (arg1) (arg1)->dynlex_beta = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DynLexHMM_Boltzmann_dynlex_beta_get) {
  {
    DynLexHMM_Boltzmann *arg1 = (DynLexHMM_Boltzmann *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    ProbT result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DynLexHMM_Boltzmann_dynlex_beta_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM_Boltzmann, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynLexHMM_Boltzmann_dynlex_beta_get" "', argument " "1"" of type '" "DynLexHMM_Boltzmann *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM_Boltzmann * >(argp1);
    result = (ProbT) ((arg1)->dynlex_beta);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DynLexHMM_Boltzmann) {
  {
    int argvi = 0;
    DynLexHMM_Boltzmann *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_DynLexHMM_Boltzmann();");
    }
    result = (DynLexHMM_Boltzmann *)new DynLexHMM_Boltzmann();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DynLexHMM_Boltzmann, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DynLexHMM_Boltzmann) {
  {
    DynLexHMM_Boltzmann *arg1 = (DynLexHMM_Boltzmann *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DynLexHMM_Boltzmann(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_DynLexHMM_Boltzmann, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynLexHMM_Boltzmann" "', argument " "1"" of type '" "DynLexHMM_Boltzmann *""'"); 
    }
    arg1 = reinterpret_cast< DynLexHMM_Boltzmann * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_ugtotal_set) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    NgramCount arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Ngrams_ugtotal_set(self,ugtotal);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_ugtotal_set" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ngrams_ugtotal_set" "', argument " "2"" of type '" "NgramCount""'");
    } 
    arg2 = static_cast< NgramCount >(val2);
    if (arg1) (arg1)->ugtotal = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_ugtotal_get) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    NgramCount result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Ngrams_ugtotal_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_ugtotal_get" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    result = (NgramCount) ((arg1)->ugtotal);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Ngrams) {
  {
    int argvi = 0;
    Ngrams *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_Ngrams();");
    }
    result = (Ngrams *)new Ngrams();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ngrams, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Ngrams) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Ngrams(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ngrams" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_clear) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Ngrams_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_clear" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_n_unigrams) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Ngrams_n_unigrams(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_n_unigrams" "', argument " "1"" of type '" "Ngrams const *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    result = ((Ngrams const *)arg1)->n_unigrams();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_n_bigrams) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Ngrams_n_bigrams(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_n_bigrams" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    result = (arg1)->n_bigrams();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_n_trigrams) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Ngrams_n_trigrams(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_n_trigrams" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    result = (arg1)->n_trigrams();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_add_count__SWIG_0) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    mootTagString *arg2 = 0 ;
    NgramCount arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Ngrams_add_count(self,tag,count);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_add_count" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_add_count" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_count" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ngrams_add_count" "', argument " "3"" of type '" "NgramCount""'");
    } 
    arg3 = static_cast< NgramCount >(val3);
    (arg1)->add_count((mootTagString const &)*arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_add_count__SWIG_1) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    mootTagString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    NgramCount arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    float val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: Ngrams_add_count(self,tag1,tag2,count);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_add_count" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_add_count" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_count" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ngrams_add_count" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_count" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    ecode4 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Ngrams_add_count" "', argument " "4"" of type '" "NgramCount""'");
    } 
    arg4 = static_cast< NgramCount >(val4);
    (arg1)->add_count((mootTagString const &)*arg2,(mootTagString const &)*arg3,arg4);
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_add_count__SWIG_2) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    mootTagString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    mootTagString *arg4 = 0 ;
    NgramCount arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int res4 = SWIG_OLDOBJ ;
    float val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: Ngrams_add_count(self,tag1,tag2,tag3,count);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_add_count" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_add_count" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_count" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ngrams_add_count" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_count" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res4 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Ngrams_add_count" "', argument " "4"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_count" "', argument " "4"" of type '" "mootTagString const &""'"); 
      }
      arg4 = ptr;
    }
    ecode5 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Ngrams_add_count" "', argument " "5"" of type '" "NgramCount""'");
    } 
    arg5 = static_cast< NgramCount >(val5);
    (arg1)->add_count((mootTagString const &)*arg2,(mootTagString const &)*arg3,(mootTagString const &)*arg4,arg5);
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    if (SWIG_IsNewObj(res4)) delete arg4;
    
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    if (SWIG_IsNewObj(res4)) delete arg4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_add_count) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_add_count__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_add_count__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_add_count__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'Ngrams_add_count'");
  XSRETURN(0);
}


XS(_wrap_Ngrams_add_counts__SWIG_0) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    mootTagString *arg2 = 0 ;
    NgramCount arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Ngrams_add_counts(self,tag1,count);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_add_counts" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_add_counts" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_counts" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ngrams_add_counts" "', argument " "3"" of type '" "NgramCount""'");
    } 
    arg3 = static_cast< NgramCount >(val3);
    Ngrams_add_counts__SWIG_0(arg1,(std::string const &)*arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_add_counts__SWIG_1) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    mootTagString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    NgramCount arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    float val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: Ngrams_add_counts(self,tag1,tag2,count);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_add_counts" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_add_counts" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_counts" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ngrams_add_counts" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_counts" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    ecode4 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Ngrams_add_counts" "', argument " "4"" of type '" "NgramCount""'");
    } 
    arg4 = static_cast< NgramCount >(val4);
    Ngrams_add_counts__SWIG_1(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_add_counts__SWIG_2) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    mootTagString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    mootTagString *arg4 = 0 ;
    NgramCount arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int res4 = SWIG_OLDOBJ ;
    float val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: Ngrams_add_counts(self,tag1,tag2,tag3,count);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_add_counts" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_add_counts" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_counts" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ngrams_add_counts" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_counts" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res4 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Ngrams_add_counts" "', argument " "4"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_add_counts" "', argument " "4"" of type '" "mootTagString const &""'"); 
      }
      arg4 = ptr;
    }
    ecode5 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Ngrams_add_counts" "', argument " "5"" of type '" "NgramCount""'");
    } 
    arg5 = static_cast< NgramCount >(val5);
    Ngrams_add_counts__SWIG_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    if (SWIG_IsNewObj(res4)) delete arg4;
    
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    if (SWIG_IsNewObj(res4)) delete arg4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_add_counts) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_add_counts__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_add_counts__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_add_counts__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'Ngrams_add_counts'");
  XSRETURN(0);
}


XS(_wrap_Ngrams_lookup__SWIG_0) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    mootTagString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    NgramCount result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Ngrams_lookup(self,tag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_lookup" "', argument " "1"" of type '" "Ngrams const *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_lookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_lookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    result = (NgramCount)((Ngrams const *)arg1)->lookup((mootTagString const &)*arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_lookup__SWIG_1) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    mootTagString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int argvi = 0;
    NgramCount result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Ngrams_lookup(self,tag1,tag2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_lookup" "', argument " "1"" of type '" "Ngrams const *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_lookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_lookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ngrams_lookup" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_lookup" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    result = (NgramCount)((Ngrams const *)arg1)->lookup((mootTagString const &)*arg2,(mootTagString const &)*arg3);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_lookup__SWIG_2) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    mootTagString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    mootTagString *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int res4 = SWIG_OLDOBJ ;
    int argvi = 0;
    NgramCount result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: Ngrams_lookup(self,tag1,tag2,tag3);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_lookup" "', argument " "1"" of type '" "Ngrams const *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_lookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_lookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Ngrams_lookup" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_lookup" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res4 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Ngrams_lookup" "', argument " "4"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ngrams_lookup" "', argument " "4"" of type '" "mootTagString const &""'"); 
      }
      arg4 = ptr;
    }
    result = (NgramCount)((Ngrams const *)arg1)->lookup((mootTagString const &)*arg2,(mootTagString const &)*arg3,(mootTagString const &)*arg4);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    if (SWIG_IsNewObj(res4)) delete arg4;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    if (SWIG_IsNewObj(res4)) delete arg4;
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_lookup) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_lookup__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_lookup__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_lookup__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'Ngrams_lookup'");
  XSRETURN(0);
}


XS(_wrap_Ngrams_load) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Ngrams_load(self,filename);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_load" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_load" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (bool)(arg1)->load((char const *)arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_save__SWIG_0) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    char *arg2 = (char *) 0 ;
    bool arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Ngrams_save(self,filename,compact);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_save" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_save" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ngrams_save" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    result = (bool)(arg1)->save((char const *)arg2,arg3);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_save__SWIG_1) {
  {
    Ngrams *arg1 = (Ngrams *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Ngrams_save(self,filename);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Ngrams, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ngrams_save" "', argument " "1"" of type '" "Ngrams *""'"); 
    }
    arg1 = reinterpret_cast< Ngrams * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ngrams_save" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (bool)(arg1)->save((char const *)arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Ngrams_save) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Ngrams, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_save__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Ngrams_save__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'Ngrams_save'");
  XSRETURN(0);
}


XS(_wrap_Lexfreqs_n_tokens_set) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    LexfreqCount arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Lexfreqs_n_tokens_set(self,n_tokens);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_n_tokens_set" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lexfreqs_n_tokens_set" "', argument " "2"" of type '" "LexfreqCount""'");
    } 
    arg2 = static_cast< LexfreqCount >(val2);
    if (arg1) (arg1)->n_tokens = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_n_tokens_get) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    LexfreqCount result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Lexfreqs_n_tokens_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_n_tokens_get" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    result = (LexfreqCount) ((arg1)->n_tokens);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Lexfreqs) {
  {
    int argvi = 0;
    Lexfreqs *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_Lexfreqs();");
    }
    result = (Lexfreqs *)new Lexfreqs();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Lexfreqs, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Lexfreqs) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Lexfreqs(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Lexfreqs" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_clear) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Lexfreqs_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_clear" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    (arg1)->clear();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_compute_specials) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Lexfreqs_compute_specials(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_compute_specials" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    (arg1)->compute_specials();
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_n_pairs) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Lexfreqs_n_pairs(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_n_pairs" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    result = (arg1)->n_pairs();
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_add_count) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    mootTokString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    LexfreqCount arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    float val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: Lexfreqs_add_count(self,text,tag,count);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_add_count" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lexfreqs_add_count" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lexfreqs_add_count" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Lexfreqs_add_count" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lexfreqs_add_count" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    ecode4 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Lexfreqs_add_count" "', argument " "4"" of type '" "LexfreqCount""'");
    } 
    arg4 = static_cast< LexfreqCount >(val4);
    (arg1)->add_count((mootTokString const &)*arg2,(mootTagString const &)*arg3,arg4);
    ST(argvi) = sv_newmortal();
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_taglookup) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    mootTagString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    LexfreqCount result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Lexfreqs_taglookup(self,tag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_taglookup" "', argument " "1"" of type '" "Lexfreqs const *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lexfreqs_taglookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lexfreqs_taglookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    result = (LexfreqCount)((Lexfreqs const *)arg1)->taglookup((mootTagString const &)*arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_tlookup) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    mootTagString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    LexfreqCount result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Lexfreqs_tlookup(self,tag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_tlookup" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lexfreqs_tlookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lexfreqs_tlookup" "', argument " "2"" of type '" "mootTagString const &""'"); 
      }
      arg2 = ptr;
    }
    result = (LexfreqCount)Lexfreqs_tlookup(arg1,(std::string const &)*arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_wlookup) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    mootTokString *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int argvi = 0;
    LexfreqCount result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Lexfreqs_wlookup(self,tok);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_wlookup" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lexfreqs_wlookup" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lexfreqs_wlookup" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      arg2 = ptr;
    }
    result = (LexfreqCount)Lexfreqs_wlookup(arg1,(std::string const &)*arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_wtlookup) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    mootTokString *arg2 = 0 ;
    mootTagString *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    int res3 = SWIG_OLDOBJ ;
    int argvi = 0;
    LexfreqCount result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Lexfreqs_wtlookup(self,tok,tag);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_wtlookup" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lexfreqs_wtlookup" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lexfreqs_wtlookup" "', argument " "2"" of type '" "mootTokString const &""'"); 
      }
      arg2 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Lexfreqs_wtlookup" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Lexfreqs_wtlookup" "', argument " "3"" of type '" "mootTagString const &""'"); 
      }
      arg3 = ptr;
    }
    result = (LexfreqCount)Lexfreqs_wtlookup(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    XSRETURN(argvi);
  fail:
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    if (SWIG_IsNewObj(res3)) delete arg3;
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_load) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Lexfreqs_load(self,filename);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_load" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lexfreqs_load" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (bool)(arg1)->load((char const *)arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Lexfreqs_save) {
  {
    Lexfreqs *arg1 = (Lexfreqs *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Lexfreqs_save(self,filename);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Lexfreqs, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lexfreqs_save" "', argument " "1"" of type '" "Lexfreqs *""'"); 
    }
    arg1 = reinterpret_cast< Lexfreqs * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Lexfreqs_save" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (bool)(arg1)->save((char const *)arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_DynLexHMM_BoltzmannTo_p_DynLexHMM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DynLexHMM *)  ((DynLexHMM_Boltzmann *) x));
}
static void *_p_DynLexHMM_BoltzmannTo_p_DynHMM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DynHMM *) (DynLexHMM *) ((DynLexHMM_Boltzmann *) x));
}
static void *_p_DynLexHMMTo_p_DynHMM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DynHMM *)  ((DynLexHMM *) x));
}
static void *_p_DynLexHMM_BoltzmannTo_p_HMM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HMM *) (DynHMM *)(DynLexHMM *) ((DynLexHMM_Boltzmann *) x));
}
static void *_p_DynHMMTo_p_HMM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HMM *)  ((DynHMM *) x));
}
static void *_p_DynLexHMMTo_p_HMM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HMM *) (DynHMM *) ((DynLexHMM *) x));
}
static swig_type_info _swigt__p_AssocVectorT_unsigned_int_float_t = {"_p_AssocVectorT_unsigned_int_float_t", "HMMLexProbSubTableT *|AssocVector< unsigned int,float > *|AssocVector< mootEnumID,ProbT > *", 0, 0, (void*)"moot::IdProbAssocVector", 0};
static swig_type_info _swigt__p_DynHMM = {"_p_DynHMM", "DynHMM *", 0, 0, (void*)"moot::DynHMM", 0};
static swig_type_info _swigt__p_DynLexHMM = {"_p_DynLexHMM", "DynLexHMM *", 0, 0, (void*)"moot::DynLexHMM", 0};
static swig_type_info _swigt__p_DynLexHMM_Boltzmann = {"_p_DynLexHMM_Boltzmann", "DynLexHMM_Boltzmann *", 0, 0, (void*)"moot::DynLexHMM_Boltzmann", 0};
static swig_type_info _swigt__p_HMM = {"_p_HMM", "HMM *", 0, 0, (void*)"moot::HMM", 0};
static swig_type_info _swigt__p_HMMVerbosityLevel = {"_p_HMMVerbosityLevel", "enum HMMVerbosityLevel *|HMMVerbosityLevel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Lexfreqs = {"_p_Lexfreqs", "Lexfreqs *", 0, 0, (void*)"moot::Lexfreqs", 0};
static swig_type_info _swigt__p_Ngrams = {"_p_Ngrams", "Ngrams *", 0, 0, (void*)"moot::Ngrams", 0};
static swig_type_info _swigt__p_Token = {"_p_Token", "Token *", 0, 0, (void*)"moot::Token", 0};
static swig_type_info _swigt__p_TokenAnalysis = {"_p_TokenAnalysis", "TokenAnalysis *", 0, 0, (void*)"moot::TokenAnalysis", 0};
static swig_type_info _swigt__p_TokenLocation = {"_p_TokenLocation", "TokenLocation *", 0, 0, (void*)"moot::TokenLocation", 0};
static swig_type_info _swigt__p_TokenReader = {"_p_TokenReader", "TokenReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TokenWriter = {"_p_TokenWriter", "TokenWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Trigram = {"_p_Trigram", "Trigram *", 0, 0, (void*)"moot::Trigram", 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "ProbT *|float *|NgramCount *|LexfreqCount *|CountT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t = {"_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t", "HMMNgramProbHash *|hash_map< Trigram,float,Trigram::HashFcn,Trigram::EqualFcn > *|hash_map< Trigram,ProbT,Trigram::HashFcn,Trigram::EqualFcn > *", 0, 0, (void*)"moot::HMMNgramProbHash", 0};
static swig_type_info _swigt__p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t = {"_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t", "mootEnum< std::string,hash< std::string >,equal_to< std::string > > *|TokIDEnum *|TagIDEnum *|mootEnum< std::string > *", 0, 0, (void*)"moot::StringEnum", 0};
static swig_type_info _swigt__p_mootSentence = {"_p_mootSentence", "mootSentence *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mootTokenFlavor = {"_p_mootTokenFlavor", "enum mootTokenFlavor *|mootTokenFlavor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mootTokenType = {"_p_mootTokenType", "enum mootTokenType *|mootTokenType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_TokenAnalysis_t = {"_p_std__listT_TokenAnalysis_t", "TokenAnalyses *|std::list< TokenAnalysis > *", 0, 0, (void*)"moot::TokenAnalyses", 0};
static swig_type_info _swigt__p_std__listT_Token_t = {"_p_std__listT_Token_t", "Sentence *|std::list< Token > *", 0, 0, (void*)"moot::Sentence", 0};
static swig_type_info _swigt__p_std__pairT_unsigned_int_float_t = {"_p_std__pairT_unsigned_int_float_t", "std::pair< unsigned int,float > *|std::pair< mootEnumID,ProbT > *", 0, 0, (void*)"moot::IdProbAssocVectorNode", 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "TokStr *|std::string *|mootTagString *|mootTokString *|TagStr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t = {"_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t", "HMMLexProbTableT *|std::vector< AssocVector< unsigned int,float > > *|std::vector< HMMLexProbSubTableT > *|std::vector< AssocVector< mootEnumID,ProbT > > *", 0, 0, (void*)"moot::HMMLexProbTable", 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "OffsetT *|unsigned int *|ClassID *|TagID *|mootEnumID *|TokID *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AssocVectorT_unsigned_int_float_t,
  &_swigt__p_DynHMM,
  &_swigt__p_DynLexHMM,
  &_swigt__p_DynLexHMM_Boltzmann,
  &_swigt__p_HMM,
  &_swigt__p_HMMVerbosityLevel,
  &_swigt__p_Lexfreqs,
  &_swigt__p_Ngrams,
  &_swigt__p_Token,
  &_swigt__p_TokenAnalysis,
  &_swigt__p_TokenLocation,
  &_swigt__p_TokenReader,
  &_swigt__p_TokenWriter,
  &_swigt__p_Trigram,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t,
  &_swigt__p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t,
  &_swigt__p_mootSentence,
  &_swigt__p_mootTokenFlavor,
  &_swigt__p_mootTokenType,
  &_swigt__p_std__listT_TokenAnalysis_t,
  &_swigt__p_std__listT_Token_t,
  &_swigt__p_std__pairT_unsigned_int_float_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_AssocVectorT_unsigned_int_float_t[] = {  {&_swigt__p_AssocVectorT_unsigned_int_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DynHMM[] = {  {&_swigt__p_DynLexHMM_Boltzmann, _p_DynLexHMM_BoltzmannTo_p_DynHMM, 0, 0},  {&_swigt__p_DynHMM, 0, 0, 0},  {&_swigt__p_DynLexHMM, _p_DynLexHMMTo_p_DynHMM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DynLexHMM[] = {  {&_swigt__p_DynLexHMM_Boltzmann, _p_DynLexHMM_BoltzmannTo_p_DynLexHMM, 0, 0},  {&_swigt__p_DynLexHMM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DynLexHMM_Boltzmann[] = {  {&_swigt__p_DynLexHMM_Boltzmann, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HMM[] = {  {&_swigt__p_HMM, 0, 0, 0},  {&_swigt__p_DynLexHMM_Boltzmann, _p_DynLexHMM_BoltzmannTo_p_HMM, 0, 0},  {&_swigt__p_DynHMM, _p_DynHMMTo_p_HMM, 0, 0},  {&_swigt__p_DynLexHMM, _p_DynLexHMMTo_p_HMM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HMMVerbosityLevel[] = {  {&_swigt__p_HMMVerbosityLevel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Lexfreqs[] = {  {&_swigt__p_Lexfreqs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ngrams[] = {  {&_swigt__p_Ngrams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Token[] = {  {&_swigt__p_Token, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TokenAnalysis[] = {  {&_swigt__p_TokenAnalysis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TokenLocation[] = {  {&_swigt__p_TokenLocation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TokenReader[] = {  {&_swigt__p_TokenReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TokenWriter[] = {  {&_swigt__p_TokenWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Trigram[] = {  {&_swigt__p_Trigram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t[] = {  {&_swigt__p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t[] = {  {&_swigt__p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mootSentence[] = {  {&_swigt__p_mootSentence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mootTokenFlavor[] = {  {&_swigt__p_mootTokenFlavor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mootTokenType[] = {  {&_swigt__p_mootTokenType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_TokenAnalysis_t[] = {  {&_swigt__p_std__listT_TokenAnalysis_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Token_t[] = {  {&_swigt__p_std__listT_Token_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_unsigned_int_float_t[] = {  {&_swigt__p_std__pairT_unsigned_int_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t[] = {  {&_swigt__p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AssocVectorT_unsigned_int_float_t,
  _swigc__p_DynHMM,
  _swigc__p_DynLexHMM,
  _swigc__p_DynLexHMM_Boltzmann,
  _swigc__p_HMM,
  _swigc__p_HMMVerbosityLevel,
  _swigc__p_Lexfreqs,
  _swigc__p_Ngrams,
  _swigc__p_Token,
  _swigc__p_TokenAnalysis,
  _swigc__p_TokenLocation,
  _swigc__p_TokenReader,
  _swigc__p_TokenWriter,
  _swigc__p_Trigram,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t,
  _swigc__p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t,
  _swigc__p_mootSentence,
  _swigc__p_mootTokenFlavor,
  _swigc__p_mootTokenType,
  _swigc__p_std__listT_TokenAnalysis_t,
  _swigc__p_std__listT_Token_t,
  _swigc__p_std__pairT_unsigned_int_float_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "mootc::PACKAGE_VERSION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PACKAGE_VERSION_get,0 },
    { "mootc::mootProbEpsilon", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mootProbEpsilon_get,0 },
    { "mootc::MOOT_PROB_NEG", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_MOOT_PROB_NEG_get,0 },
    { "mootc::MOOT_PROB_ZERO", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_MOOT_PROB_ZERO_get,0 },
    { "mootc::MOOT_PROB_ONE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_MOOT_PROB_ONE_get,0 },
    { "mootc::MOOT_PROB_NONE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_MOOT_PROB_NONE_get,0 },
    { "mootc::mootEnumNone", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mootEnumNone_get,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"mootc::TokenTypeName", _wrap_TokenTypeName},
{"mootc::TokenFlavorName", _wrap_TokenFlavorName},
{"mootc::TokenAnalysis_tag_set", _wrap_TokenAnalysis_tag_set},
{"mootc::TokenAnalysis_tag_get", _wrap_TokenAnalysis_tag_get},
{"mootc::TokenAnalysis_details_set", _wrap_TokenAnalysis_details_set},
{"mootc::TokenAnalysis_details_get", _wrap_TokenAnalysis_details_get},
{"mootc::TokenAnalysis_prob_set", _wrap_TokenAnalysis_prob_set},
{"mootc::TokenAnalysis_prob_get", _wrap_TokenAnalysis_prob_get},
{"mootc::new_TokenAnalysis", _wrap_new_TokenAnalysis},
{"mootc::delete_TokenAnalysis", _wrap_delete_TokenAnalysis},
{"mootc::TokenAnalysis_clear", _wrap_TokenAnalysis_clear},
{"mootc::TokenAnalysis_empty", _wrap_TokenAnalysis_empty},
{"mootc::TokenAnalysis_equal", _wrap_TokenAnalysis_equal},
{"mootc::new_TokenAnalyses", _wrap_new_TokenAnalyses},
{"mootc::delete_TokenAnalyses", _wrap_delete_TokenAnalyses},
{"mootc::TokenAnalyses_clear", _wrap_TokenAnalyses_clear},
{"mootc::TokenAnalyses_size", _wrap_TokenAnalyses_size},
{"mootc::TokenAnalyses_empty", _wrap_TokenAnalyses_empty},
{"mootc::TokenAnalyses_front", _wrap_TokenAnalyses_front},
{"mootc::TokenAnalyses_back", _wrap_TokenAnalyses_back},
{"mootc::TokenAnalyses_rotate", _wrap_TokenAnalyses_rotate},
{"mootc::TokenAnalyses_push_front", _wrap_TokenAnalyses_push_front},
{"mootc::TokenAnalyses_push_back", _wrap_TokenAnalyses_push_back},
{"mootc::TokenAnalyses_pop_front", _wrap_TokenAnalyses_pop_front},
{"mootc::TokenAnalyses_pop_back", _wrap_TokenAnalyses_pop_back},
{"mootc::TokenLocation_offset_set", _wrap_TokenLocation_offset_set},
{"mootc::TokenLocation_offset_get", _wrap_TokenLocation_offset_get},
{"mootc::TokenLocation_length_set", _wrap_TokenLocation_length_set},
{"mootc::TokenLocation_length_get", _wrap_TokenLocation_length_get},
{"mootc::new_TokenLocation", _wrap_new_TokenLocation},
{"mootc::delete_TokenLocation", _wrap_delete_TokenLocation},
{"mootc::TokenLocation_clear", _wrap_TokenLocation_clear},
{"mootc::Token_type_set", _wrap_Token_type_set},
{"mootc::Token_type_get", _wrap_Token_type_get},
{"mootc::Token_text_set", _wrap_Token_text_set},
{"mootc::Token_text_get", _wrap_Token_text_get},
{"mootc::Token_tag_set", _wrap_Token_tag_set},
{"mootc::Token_tag_get", _wrap_Token_tag_get},
{"mootc::Token_analyses_set", _wrap_Token_analyses_set},
{"mootc::Token_analyses_get", _wrap_Token_analyses_get},
{"mootc::Token_location_set", _wrap_Token_location_set},
{"mootc::Token_location_get", _wrap_Token_location_get},
{"mootc::new_Token", _wrap_new_Token},
{"mootc::delete_Token", _wrap_delete_Token},
{"mootc::Token_clear", _wrap_Token_clear},
{"mootc::Token_insert", _wrap_Token_insert},
{"mootc::Token_erase", _wrap_Token_erase},
{"mootc::Token_flavor", _wrap_Token_flavor},
{"mootc::tokenFlavor", _wrap_tokenFlavor},
{"mootc::new_Sentence", _wrap_new_Sentence},
{"mootc::delete_Sentence", _wrap_delete_Sentence},
{"mootc::Sentence_clear", _wrap_Sentence_clear},
{"mootc::Sentence_size", _wrap_Sentence_size},
{"mootc::Sentence_empty", _wrap_Sentence_empty},
{"mootc::Sentence_front", _wrap_Sentence_front},
{"mootc::Sentence_back", _wrap_Sentence_back},
{"mootc::Sentence_rotate", _wrap_Sentence_rotate},
{"mootc::Sentence_push_front", _wrap_Sentence_push_front},
{"mootc::Sentence_push_back", _wrap_Sentence_push_back},
{"mootc::Sentence_pop_front", _wrap_Sentence_pop_front},
{"mootc::Sentence_pop_back", _wrap_Sentence_pop_back},
{"mootc::new_StringEnum", _wrap_new_StringEnum},
{"mootc::delete_StringEnum", _wrap_delete_StringEnum},
{"mootc::StringEnum_clear", _wrap_StringEnum_clear},
{"mootc::StringEnum_nameExists", _wrap_StringEnum_nameExists},
{"mootc::StringEnum_idExists", _wrap_StringEnum_idExists},
{"mootc::StringEnum_size", _wrap_StringEnum_size},
{"mootc::StringEnum_name2id", _wrap_StringEnum_name2id},
{"mootc::StringEnum_id2name", _wrap_StringEnum_id2name},
{"mootc::StringEnum_insert", _wrap_StringEnum_insert},
{"mootc::StringEnum_unknown_name", _wrap_StringEnum_unknown_name},
{"mootc::IdProbAssocVectorNode_first_set", _wrap_IdProbAssocVectorNode_first_set},
{"mootc::IdProbAssocVectorNode_first_get", _wrap_IdProbAssocVectorNode_first_get},
{"mootc::IdProbAssocVectorNode_second_set", _wrap_IdProbAssocVectorNode_second_set},
{"mootc::IdProbAssocVectorNode_second_get", _wrap_IdProbAssocVectorNode_second_get},
{"mootc::new_IdProbAssocVectorNode", _wrap_new_IdProbAssocVectorNode},
{"mootc::delete_IdProbAssocVectorNode", _wrap_delete_IdProbAssocVectorNode},
{"mootc::new_IdProbAssocVector", _wrap_new_IdProbAssocVector},
{"mootc::delete_IdProbAssocVector", _wrap_delete_IdProbAssocVector},
{"mootc::IdProbAssocVector_clear", _wrap_IdProbAssocVector_clear},
{"mootc::IdProbAssocVector_size", _wrap_IdProbAssocVector_size},
{"mootc::IdProbAssocVector_find_index", _wrap_IdProbAssocVector_find_index},
{"mootc::IdProbAssocVector_nth", _wrap_IdProbAssocVector_nth},
{"mootc::IdProbAssocVector_get_node", _wrap_IdProbAssocVector_get_node},
{"mootc::IdProbAssocVector_insert", _wrap_IdProbAssocVector_insert},
{"mootc::new_HMMLexProbTable", _wrap_new_HMMLexProbTable},
{"mootc::delete_HMMLexProbTable", _wrap_delete_HMMLexProbTable},
{"mootc::HMMLexProbTable_clear", _wrap_HMMLexProbTable_clear},
{"mootc::HMMLexProbTable_reserve", _wrap_HMMLexProbTable_reserve},
{"mootc::HMMLexProbTable_resize", _wrap_HMMLexProbTable_resize},
{"mootc::HMMLexProbTable_size", _wrap_HMMLexProbTable_size},
{"mootc::HMMLexProbTable_empty", _wrap_HMMLexProbTable_empty},
{"mootc::HMMLexProbTable_front", _wrap_HMMLexProbTable_front},
{"mootc::HMMLexProbTable_back", _wrap_HMMLexProbTable_back},
{"mootc::HMMLexProbTable_nth", _wrap_HMMLexProbTable_nth},
{"mootc::HMMLexProbTable_push", _wrap_HMMLexProbTable_push},
{"mootc::HMMLexProbTable_pop_back", _wrap_HMMLexProbTable_pop_back},
{"mootc::Trigram_tag1_set", _wrap_Trigram_tag1_set},
{"mootc::Trigram_tag1_get", _wrap_Trigram_tag1_get},
{"mootc::Trigram_tag2_set", _wrap_Trigram_tag2_set},
{"mootc::Trigram_tag2_get", _wrap_Trigram_tag2_get},
{"mootc::Trigram_tag3_set", _wrap_Trigram_tag3_set},
{"mootc::Trigram_tag3_get", _wrap_Trigram_tag3_get},
{"mootc::new_Trigram", _wrap_new_Trigram},
{"mootc::delete_Trigram", _wrap_delete_Trigram},
{"mootc::Trigram_hash", _wrap_Trigram_hash},
{"mootc::new_HMMNgramProbHash", _wrap_new_HMMNgramProbHash},
{"mootc::delete_HMMNgramProbHash", _wrap_delete_HMMNgramProbHash},
{"mootc::HMMNgramProbHash_clear", _wrap_HMMNgramProbHash_clear},
{"mootc::HMMNgramProbHash_size", _wrap_HMMNgramProbHash_size},
{"mootc::HMMNgramProbHash_bucket_count", _wrap_HMMNgramProbHash_bucket_count},
{"mootc::HMMNgramProbHash_empty", _wrap_HMMNgramProbHash_empty},
{"mootc::HMMNgramProbHash_resize", _wrap_HMMNgramProbHash_resize},
{"mootc::HMMNgramProbHash_erase", _wrap_HMMNgramProbHash_erase},
{"mootc::HMMNgramProbHash_keyExists", _wrap_HMMNgramProbHash_keyExists},
{"mootc::HMMNgramProbHash_get", _wrap_HMMNgramProbHash_get},
{"mootc::HMMNgramProbHash_getval", _wrap_HMMNgramProbHash_getval},
{"mootc::HMMNgramProbHash_set", _wrap_HMMNgramProbHash_set},
{"mootc::HMM_verbose_set", _wrap_HMM_verbose_set},
{"mootc::HMM_verbose_get", _wrap_HMM_verbose_get},
{"mootc::HMM_ndots_set", _wrap_HMM_ndots_set},
{"mootc::HMM_ndots_get", _wrap_HMM_ndots_get},
{"mootc::HMM_save_ambiguities_set", _wrap_HMM_save_ambiguities_set},
{"mootc::HMM_save_ambiguities_get", _wrap_HMM_save_ambiguities_get},
{"mootc::HMM_save_flavors_set", _wrap_HMM_save_flavors_set},
{"mootc::HMM_save_flavors_get", _wrap_HMM_save_flavors_get},
{"mootc::HMM_save_mark_unknown_set", _wrap_HMM_save_mark_unknown_set},
{"mootc::HMM_save_mark_unknown_get", _wrap_HMM_save_mark_unknown_get},
{"mootc::HMM_hash_ngrams_set", _wrap_HMM_hash_ngrams_set},
{"mootc::HMM_hash_ngrams_get", _wrap_HMM_hash_ngrams_get},
{"mootc::HMM_relax_set", _wrap_HMM_relax_set},
{"mootc::HMM_relax_get", _wrap_HMM_relax_get},
{"mootc::HMM_use_lex_classes_set", _wrap_HMM_use_lex_classes_set},
{"mootc::HMM_use_lex_classes_get", _wrap_HMM_use_lex_classes_get},
{"mootc::HMM_start_tagid_set", _wrap_HMM_start_tagid_set},
{"mootc::HMM_start_tagid_get", _wrap_HMM_start_tagid_get},
{"mootc::HMM_unknown_lex_threshhold_set", _wrap_HMM_unknown_lex_threshhold_set},
{"mootc::HMM_unknown_lex_threshhold_get", _wrap_HMM_unknown_lex_threshhold_get},
{"mootc::HMM_unknown_class_threshhold_set", _wrap_HMM_unknown_class_threshhold_set},
{"mootc::HMM_unknown_class_threshhold_get", _wrap_HMM_unknown_class_threshhold_get},
{"mootc::HMM_nglambda1_set", _wrap_HMM_nglambda1_set},
{"mootc::HMM_nglambda1_get", _wrap_HMM_nglambda1_get},
{"mootc::HMM_nglambda2_set", _wrap_HMM_nglambda2_set},
{"mootc::HMM_nglambda2_get", _wrap_HMM_nglambda2_get},
{"mootc::HMM_nglambda3_set", _wrap_HMM_nglambda3_set},
{"mootc::HMM_nglambda3_get", _wrap_HMM_nglambda3_get},
{"mootc::HMM_wlambda0_set", _wrap_HMM_wlambda0_set},
{"mootc::HMM_wlambda0_get", _wrap_HMM_wlambda0_get},
{"mootc::HMM_wlambda1_set", _wrap_HMM_wlambda1_set},
{"mootc::HMM_wlambda1_get", _wrap_HMM_wlambda1_get},
{"mootc::HMM_clambda0_set", _wrap_HMM_clambda0_set},
{"mootc::HMM_clambda0_get", _wrap_HMM_clambda0_get},
{"mootc::HMM_clambda1_set", _wrap_HMM_clambda1_set},
{"mootc::HMM_clambda1_get", _wrap_HMM_clambda1_get},
{"mootc::HMM_beamwd_set", _wrap_HMM_beamwd_set},
{"mootc::HMM_beamwd_get", _wrap_HMM_beamwd_get},
{"mootc::HMM_tokids_set", _wrap_HMM_tokids_set},
{"mootc::HMM_tokids_get", _wrap_HMM_tokids_get},
{"mootc::HMM_tagids_set", _wrap_HMM_tagids_set},
{"mootc::HMM_tagids_get", _wrap_HMM_tagids_get},
{"mootc::HMM_flavid", _wrap_HMM_flavid},
{"mootc::HMM_n_tags_set", _wrap_HMM_n_tags_set},
{"mootc::HMM_n_tags_get", _wrap_HMM_n_tags_get},
{"mootc::HMM_n_toks_set", _wrap_HMM_n_toks_set},
{"mootc::HMM_n_toks_get", _wrap_HMM_n_toks_get},
{"mootc::HMM_n_classes_set", _wrap_HMM_n_classes_set},
{"mootc::HMM_n_classes_get", _wrap_HMM_n_classes_get},
{"mootc::HMM_lexprobs_set", _wrap_HMM_lexprobs_set},
{"mootc::HMM_lexprobs_get", _wrap_HMM_lexprobs_get},
{"mootc::HMM_ngprobsh_set", _wrap_HMM_ngprobsh_set},
{"mootc::HMM_ngprobsh_get", _wrap_HMM_ngprobsh_get},
{"mootc::HMM_nsents_set", _wrap_HMM_nsents_set},
{"mootc::HMM_nsents_get", _wrap_HMM_nsents_get},
{"mootc::HMM_ntokens_set", _wrap_HMM_ntokens_set},
{"mootc::HMM_ntokens_get", _wrap_HMM_ntokens_get},
{"mootc::HMM_nnewtokens_set", _wrap_HMM_nnewtokens_set},
{"mootc::HMM_nnewtokens_get", _wrap_HMM_nnewtokens_get},
{"mootc::HMM_nunclassed_set", _wrap_HMM_nunclassed_set},
{"mootc::HMM_nunclassed_get", _wrap_HMM_nunclassed_get},
{"mootc::HMM_nnewclasses_set", _wrap_HMM_nnewclasses_set},
{"mootc::HMM_nnewclasses_get", _wrap_HMM_nnewclasses_get},
{"mootc::HMM_nunknown_set", _wrap_HMM_nunknown_set},
{"mootc::HMM_nunknown_get", _wrap_HMM_nunknown_get},
{"mootc::HMM_nfallbacks_set", _wrap_HMM_nfallbacks_set},
{"mootc::HMM_nfallbacks_get", _wrap_HMM_nfallbacks_get},
{"mootc::new_HMM", _wrap_new_HMM},
{"mootc::delete_HMM", _wrap_delete_HMM},
{"mootc::HMM_clear", _wrap_HMM_clear},
{"mootc::HMM_save", _wrap_HMM_save},
{"mootc::HMM_load", _wrap_HMM_load},
{"mootc::HMM_load_model", _wrap_HMM_load_model},
{"mootc::HMM_set_ngram_prob", _wrap_HMM_set_ngram_prob},
{"mootc::HMM_tag_io", _wrap_HMM_tag_io},
{"mootc::HMM_tag_sentence", _wrap_HMM_tag_sentence},
{"mootc::HMM_tag_dump_trace", _wrap_HMM_tag_dump_trace},
{"mootc::HMM_token2id", _wrap_HMM_token2id},
{"mootc::HMM_wordp", _wrap_HMM_wordp},
{"mootc::HMM_tagp", _wrap_HMM_tagp},
{"mootc::HMM_carp", _wrap_HMM_carp},
{"mootc::HMM_txtdump", _wrap_HMM_txtdump},
{"mootc::new_DynHMM", _wrap_new_DynHMM},
{"mootc::delete_DynHMM", _wrap_delete_DynHMM},
{"mootc::DynHMM_tag_hook_pre", _wrap_DynHMM_tag_hook_pre},
{"mootc::DynHMM_tag_hook_post", _wrap_DynHMM_tag_hook_post},
{"mootc::DynHMM_tag_io", _wrap_DynHMM_tag_io},
{"mootc::DynHMM_tag_sentence", _wrap_DynHMM_tag_sentence},
{"mootc::DynLexHMM_invert_lexp_set", _wrap_DynLexHMM_invert_lexp_set},
{"mootc::DynLexHMM_invert_lexp_get", _wrap_DynLexHMM_invert_lexp_get},
{"mootc::DynLexHMM_newtag_str_set", _wrap_DynLexHMM_newtag_str_set},
{"mootc::DynLexHMM_newtag_str_get", _wrap_DynLexHMM_newtag_str_get},
{"mootc::DynLexHMM_newtag_id_set", _wrap_DynLexHMM_newtag_id_set},
{"mootc::DynLexHMM_newtag_id_get", _wrap_DynLexHMM_newtag_id_get},
{"mootc::DynLexHMM_newtag_f_set", _wrap_DynLexHMM_newtag_f_set},
{"mootc::DynLexHMM_newtag_f_get", _wrap_DynLexHMM_newtag_f_get},
{"mootc::DynLexHMM_Ftw_eps_set", _wrap_DynLexHMM_Ftw_eps_set},
{"mootc::DynLexHMM_Ftw_eps_get", _wrap_DynLexHMM_Ftw_eps_get},
{"mootc::DynLexHMM_tagids_size_orig_set", _wrap_DynLexHMM_tagids_size_orig_set},
{"mootc::DynLexHMM_tagids_size_orig_get", _wrap_DynLexHMM_tagids_size_orig_get},
{"mootc::new_DynLexHMM", _wrap_new_DynLexHMM},
{"mootc::delete_DynLexHMM", _wrap_delete_DynLexHMM},
{"mootc::DynLexHMM_load_model", _wrap_DynLexHMM_load_model},
{"mootc::DynLexHMM_tag_hook_pre", _wrap_DynLexHMM_tag_hook_pre},
{"mootc::DynLexHMM_tag_hook_post", _wrap_DynLexHMM_tag_hook_post},
{"mootc::DynLexHMM_Boltzmann_dynlex_base_set", _wrap_DynLexHMM_Boltzmann_dynlex_base_set},
{"mootc::DynLexHMM_Boltzmann_dynlex_base_get", _wrap_DynLexHMM_Boltzmann_dynlex_base_get},
{"mootc::DynLexHMM_Boltzmann_dynlex_beta_set", _wrap_DynLexHMM_Boltzmann_dynlex_beta_set},
{"mootc::DynLexHMM_Boltzmann_dynlex_beta_get", _wrap_DynLexHMM_Boltzmann_dynlex_beta_get},
{"mootc::new_DynLexHMM_Boltzmann", _wrap_new_DynLexHMM_Boltzmann},
{"mootc::delete_DynLexHMM_Boltzmann", _wrap_delete_DynLexHMM_Boltzmann},
{"mootc::Ngrams_ugtotal_set", _wrap_Ngrams_ugtotal_set},
{"mootc::Ngrams_ugtotal_get", _wrap_Ngrams_ugtotal_get},
{"mootc::new_Ngrams", _wrap_new_Ngrams},
{"mootc::delete_Ngrams", _wrap_delete_Ngrams},
{"mootc::Ngrams_clear", _wrap_Ngrams_clear},
{"mootc::Ngrams_n_unigrams", _wrap_Ngrams_n_unigrams},
{"mootc::Ngrams_n_bigrams", _wrap_Ngrams_n_bigrams},
{"mootc::Ngrams_n_trigrams", _wrap_Ngrams_n_trigrams},
{"mootc::Ngrams_add_count", _wrap_Ngrams_add_count},
{"mootc::Ngrams_add_counts", _wrap_Ngrams_add_counts},
{"mootc::Ngrams_lookup", _wrap_Ngrams_lookup},
{"mootc::Ngrams_load", _wrap_Ngrams_load},
{"mootc::Ngrams_save", _wrap_Ngrams_save},
{"mootc::Lexfreqs_n_tokens_set", _wrap_Lexfreqs_n_tokens_set},
{"mootc::Lexfreqs_n_tokens_get", _wrap_Lexfreqs_n_tokens_get},
{"mootc::new_Lexfreqs", _wrap_new_Lexfreqs},
{"mootc::delete_Lexfreqs", _wrap_delete_Lexfreqs},
{"mootc::Lexfreqs_clear", _wrap_Lexfreqs_clear},
{"mootc::Lexfreqs_compute_specials", _wrap_Lexfreqs_compute_specials},
{"mootc::Lexfreqs_n_pairs", _wrap_Lexfreqs_n_pairs},
{"mootc::Lexfreqs_add_count", _wrap_Lexfreqs_add_count},
{"mootc::Lexfreqs_taglookup", _wrap_Lexfreqs_taglookup},
{"mootc::Lexfreqs_tlookup", _wrap_Lexfreqs_tlookup},
{"mootc::Lexfreqs_wlookup", _wrap_Lexfreqs_wlookup},
{"mootc::Lexfreqs_wtlookup", _wrap_Lexfreqs_wtlookup},
{"mootc::Lexfreqs_load", _wrap_Lexfreqs_load},
{"mootc::Lexfreqs_save", _wrap_Lexfreqs_save},
{0,0}
};
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
  dXSARGS;
  int i;
  
  SWIG_InitializeModule(0);
  
  /* Install commands */
  for (i = 0; swig_commands[i].name; i++) {
    // Casts only needed for Perl < 5.10.
#ifdef __cplusplus
    newXS(const_cast<char*>(swig_commands[i].name), swig_commands[i].wrapper, const_cast<char*>(__FILE__));
#else
    newXS((char*)swig_commands[i].name, swig_commands[i].wrapper, (char*)__FILE__);
#endif
  }
  
  /* Install variables */
  for (i = 0; swig_variables[i].name; i++) {
    SV *sv;
    sv = get_sv(swig_variables[i].name, TRUE | 0x2 | GV_ADDMULTI);
    if (swig_variables[i].type) {
      SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
    } else {
      sv_setiv(sv,(IV) 0);
    }
    swig_create_magic(sv, swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
  }
  
  /* Install constant */
  for (i = 0; swig_constants[i].type; i++) {
    SV *sv;
    sv = get_sv(swig_constants[i].name, TRUE | 0x2 | GV_ADDMULTI);
    switch(swig_constants[i].type) {
    case SWIG_INT:
      sv_setiv(sv, (IV) swig_constants[i].lvalue);
      break;
    case SWIG_FLOAT:
      sv_setnv(sv, (double) swig_constants[i].dvalue);
      break;
    case SWIG_STRING:
      sv_setpv(sv, (const char *) swig_constants[i].pvalue);
      break;
    case SWIG_POINTER:
      SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
      break;
    case SWIG_BINARY:
      SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
      break;
    default:
      break;
    }
    SvREADONLY_on(sv);
  }
  
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "VERSION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_FromCharPtr("0.03"));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokTypeUnknown", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokTypeUnknown)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokTypeVanilla", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokTypeVanilla)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokTypeLibXML", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokTypeLibXML)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokTypeXMLRaw", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokTypeXMLRaw)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokTypeComment", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokTypeComment)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokTypeEOS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokTypeEOS)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokTypeEOF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokTypeEOF)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokTypeUser", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokTypeUser)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NTokTypes", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(NTokTypes)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokFlavorAlpha", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokFlavorAlpha)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokFlavorCard", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokFlavorCard)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokFlavorCardPunct", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokFlavorCardPunct)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokFlavorCardSuffix", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokFlavorCardSuffix)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokFlavorCardSeps", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokFlavorCardSeps)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TokFlavorUnknown", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TokFlavorUnknown)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NTokFlavors", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(NTokFlavors)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_TokenAnalysis, (void*) "moot::TokenAnalysis");
  SWIG_TypeClientData(SWIGTYPE_p_std__listT_TokenAnalysis_t, (void*) "moot::TokenAnalyses");
  SWIG_TypeClientData(SWIGTYPE_p_TokenLocation, (void*) "moot::TokenLocation");
  SWIG_TypeClientData(SWIGTYPE_p_Token, (void*) "moot::Token");
  SWIG_TypeClientData(SWIGTYPE_p_std__listT_Token_t, (void*) "moot::Sentence");
  SWIG_TypeClientData(SWIGTYPE_p_mootEnumT_std__string_hashT_std__string_t_equal_toT_std__string_t_t, (void*) "moot::StringEnum");
  SWIG_TypeClientData(SWIGTYPE_p_std__pairT_unsigned_int_float_t, (void*) "moot::IdProbAssocVectorNode");
  SWIG_TypeClientData(SWIGTYPE_p_AssocVectorT_unsigned_int_float_t, (void*) "moot::IdProbAssocVector");
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HMMvlSilent", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(HMMvlSilent)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HMMvlErrors", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(HMMvlErrors)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HMMvlWarnings", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(HMMvlWarnings)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HMMvlProgress", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(HMMvlProgress)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig2.0/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HMMvlEverything", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(HMMvlEverything)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_AssocVectorT_mootEnumID_ProbT_t_t, (void*) "moot::HMMLexProbTable");
  SWIG_TypeClientData(SWIGTYPE_p_Trigram, (void*) "moot::Trigram");
  SWIG_TypeClientData(SWIGTYPE_p_hash_mapT_Trigram_float_Trigram__HashFcn_Trigram__EqualFcn_t, (void*) "moot::HMMNgramProbHash");
  SWIG_TypeClientData(SWIGTYPE_p_HMM, (void*) "moot::HMM");
  SWIG_TypeClientData(SWIGTYPE_p_DynHMM, (void*) "moot::DynHMM");
  SWIG_TypeClientData(SWIGTYPE_p_DynLexHMM, (void*) "moot::DynLexHMM");
  SWIG_TypeClientData(SWIGTYPE_p_DynLexHMM_Boltzmann, (void*) "moot::DynLexHMM_Boltzmann");
  SWIG_TypeClientData(SWIGTYPE_p_Ngrams, (void*) "moot::Ngrams");
  SWIG_TypeClientData(SWIGTYPE_p_Lexfreqs, (void*) "moot::Lexfreqs");
  ST(0) = &PL_sv_yes;
  XSRETURN(1);
}

