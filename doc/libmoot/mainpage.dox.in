/* -*- Mode: C++ -*- */
/** 
\mainpage libmoot: moocow's PoS tagging library

\author Bryan Jurish <moocow@ling.uni-potsdam.de>

\version @PACKAGE_VERSION@



\section Intro Introduction

libmoot is a C++ library for Part-of-Speech (PoS) tagging.
In addition to traditional bigram tagging routines, libmoot
allows the use of a user-defined morphological analyzer in
the form of a finite state transducer, which has been shown
to lead to a reduction in errors of up to 21% with respect
to traditional Hidden-Markov-Model (HMM) methods.



\section PP Preprocessing

libmoot includes a rudimentary preprocessor for raw text,
which tokenizes an input stream, and eliminates most SGML
markup.

\see mootPPLexer
\see <A HREF="../../programs/mootpp.html">mootpp(1)</A>


\section HMM HMM Tagging

The \link moot::mootHMM mootHMM\endlink class provides a fast interface to traditional HMM
tagging and disambiguation.

\todo Write a faster HMM trainer -- for now, use moot::mootHMMTrainer.

\see \link moot::mootHMM mootHMM\endlink
\see <A HREF="../../programs/moothmm.html">moothmm(1)



\section Morph Morphological Analysis

The \link moot::mootMorph mootMorph\endlink
class is designed to be a wrapper for a user-defined
finite-state morphological analyzer using Thomas Hanneforth's libFSM
library.  You must provide the FSMSymSpec object to use for lookup
as well as an FSM object representing the analyzer itself.  Additionally,
you may specify a tag-extraction transducer (yet another FSM) which
maps morphological output paths to PoS tags.

\see \link moot::mootMorph mootMorph\endlink
\see <A HREF="../../programs/mootm.html">mootm(1)</A>



\section CHMM HMM Tagging with Morphological Classes

The \link moot::mootCHMM mootCHMM\endlink class performs Hidden-Markov-Model tagging and
disambiguation.  Based on moot::mootHMM, moot::mootCHMM
additionally gathers statistics on morphological ambiguity classes
(sets of PoS tags) returned by a mootMorph morphological
analyzer for its training data, and uses this data in the
absence of token-specific information.  mootCHMM can also
use a cache to store morphological analyses for the most
frequent known tokens, which provides a significant speed
improvement (3x) with respect to mootMorph on its own.

\see \link moot::mootCHMM mootCHMM\endlink
\see <A HREF="../../programs/moot.html">moot(1)</A>



\section Ack Acknowledgements

This package was developed in the context of the
project
<A HREF=http://www.bbaw.de/forschung/kollokationen>Kollokationen im Wörterbuch</A>
("collocations in the dictionary")
in association with the project
<A HREF=http://www.dwds.de>Digitales Wörterbuch deutscher Sprache (DWDS)</A>
("digital dictionary of the German language")
at the
<A HREF="http://www.bbaw.de">Berlin-Brandenburgische Akademie der Wissenschaften</A>
with funding from the
<A HREF="http://www.avh.org">Alexander von Humboldt Stiftung</A>
and from the
Zukunftsinvestitionsprogramm of the German federal government.

I am grateful to Christiane Fellbaum, Alexander Geyken,
Gerald Neumann, Edmund Pohl, Alexey Sokirko, and others
for offering useful insights in the course of development
of this package.

Thomas Hanneforth wrote and maintains the libFSM C++ library
for finite-state device operations used by the
class-based HMM tagger / disambiguator.

Alexander Geyken and Thomas Hanneforth developed the
rule-based morphological analysis system for German
which was used in the development and testing of the
class-based HMM tagger / disambiguator.


\section SeeAlso More Information

\see FSM
\see <A HREF="../../programs/mootpp.html">mootpp(1)</A>
\see <A HREF="../../programs/mootrain.html">mootrain(1)</A>
\see <A HREF="../../programs/moothmm.html">moothmm(1)</A>
\see <A HREF="../../programs/mootm.html">mootm(1)</A>
\see <A HREF="../../programs/moot.html">moot(1)</A>

\todo Write Perl interface.

*/
